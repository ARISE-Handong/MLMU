[math3, ., util, ., MathArrays, ;, public, class, RandomDataGenerator, implements, RandomData, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., MathArrays, ;, public, class, RandomDataGenerator, implements, RandomData, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[class, RandomDataGenerator, implements, RandomData, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -, 626730818244969716L, ;, private, RandomGenerator, rand, =]
[{, private, static, final, long, serialVersionUID, =, -, 626730818244969716L, ;, private, RandomGenerator, rand, =, null, ;, private, RandomGenerator, secRand, =]
[;, private, RandomGenerator, secRand, =, null, ;, public, RandomDataGenerator, (, ), {, }, public, RandomDataGenerator, (, RandomGenerator, rand, ), {]
[;, private, RandomGenerator, secRand, =, null, ;, public, RandomDataGenerator, (, ), {, }, public, RandomDataGenerator, (, RandomGenerator, rand, ), {]
[=, null, ;, public, RandomDataGenerator, (, ), {, }, public, RandomDataGenerator, (, RandomGenerator, rand, ), {, this, ., rand, =]
[{, this, ., rand, =, rand, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (]
[{, this, ., rand, =, rand, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (]
[., rand, =, rand, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=]
[;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw]
[String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =]
[NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =]
[RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =]
[getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, []
[getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, []
[(, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, [, (]
[(, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, [, (]
[;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, [, (, len, /]
[=, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, [, (, len, /, 2, ), +]
[(, ), ;, byte, [, ], randomBytes, =, new, byte, [, (, len, /, 2, ), +, 1, ], ;]
[(, ), ;, byte, [, ], randomBytes, =, new, byte, [, (, len, /, 2, ), +, 1, ], ;]
[[, ], randomBytes, =, new, byte, [, (, len, /, 2, ), +, 1, ], ;, ran, ., nextBytes, (]
[len, /, 2, ), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =]
[2, ), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;]
[2, ), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;]
[+, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <]
[+, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <]
[ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;]
[ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =]
[for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =]
[=, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (]
[=, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (]
[;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, []
[i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =]
[i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =]
[Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[(, randomBytes, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==]
[c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {]
[intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =]
[intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =]
[), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (]
[==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return]
[==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return]
[==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return]
[hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring, (]
[}, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,]
[len, ), ;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return]
[len, ), ;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return]
[}, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (]
[(, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (, getRandomGenerator, (, ), ,]
[int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (, getRandomGenerator, (, ), ,, lower, ,]
[), ;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (]
[), ;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (]
[}, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=]
[(, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw]
[lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,]
[throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,]
[{, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =]
[new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (]
[new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (]
[(, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (, upper, -]
[LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +]
[upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=]
[=, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =]
[+, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (]
[0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, ), {, final, long, r, =]
[0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, ), {, final, long, r, =]
[(, ), ;, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[(, ), ;, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[(, ), ;, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[;, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=]
[(, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&]
[(, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&]
[), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <]
[upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return]
[upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return]
[{, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +]
[{, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +]
[}, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (]
[(, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, )]
[{, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {, return]
[{, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {, return]
[lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +]
[getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (]
[nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, ), ,]
[}, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {, if, (]
[}, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {, if, (]
[private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {, if, (, n, >]
[final, long, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, final, byte, [, ], byteArray, =]
[), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, final, byte, [, ], byteArray, =, new, byte, []
[final, byte, [, ], byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long, val, ;, do, {]
[final, byte, [, ], byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long, val, ;, do, {]
[byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long, val, ;, do, {, rng, ., nextBytes, (]
[byte, [, 8, ], ;, long, bits, ;, long, val, ;, do, {, rng, ., nextBytes, (, byteArray, ), ;]
[8, ], ;, long, bits, ;, long, val, ;, do, {, rng, ., nextBytes, (, byteArray, ), ;, bits, =]
[;, do, {, rng, ., nextBytes, (, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :]
[rng, ., nextBytes, (, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {]
[nextBytes, (, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =]
[nextBytes, (, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =]
[(, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (]
[(, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (]
[), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<]
[=, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |]
[0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (]
[0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (]
[;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (, (]
[final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (, (, (, long, )]
[:, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (, (, (, long, ), b, ), &]
[bits, =, (, bits, <<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }]
[(, bits, <<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =]
[(, bits, <<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =]
[<<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &]
[), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;]
[(, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =]
[(, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =]
[(, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %]
[&, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (]
[&, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (]
[&, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (]
[&, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (]
[), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -]
[}, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +]
[bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (]
[throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (]
[NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=]
[;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw]
[String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =]
[(, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =]
[,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {]
[), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {, alg, =]
[), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {, alg, =]
[RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {, alg, =, MessageDigest, ., getInstance, (]
[;, try, {, alg, =, MessageDigest, ., getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw]
[alg, =, MessageDigest, ., getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (]
[getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }]
[getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }]
[ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =]
[ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =]
[), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =, (]
[), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =, (]
[throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =, (, len, /]
[(, ex, ), ;, }, alg, ., reset, (, ), ;, int, numIter, =, (, len, /, 40, ), +]
[alg, ., reset, (, ), ;, int, numIter, =, (, len, /, 40, ), +, 1, ;, StringBuilder, outBuffer, =]
[len, /, 40, ), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =]
[40, ), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;]
[40, ), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;]
[+, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <]
[+, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <]
[;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <, numIter, +]
[outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <, numIter, +, 1, ;]
[outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <, numIter, +, 1, ;]
[int, iter, =, 1, ;, iter, <, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =]
[1, ;, iter, <, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, []
[<, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;]
[<, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;]
[;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (]
[), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (, randomBytes, ), ;]
[), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (, randomBytes, ), ;]
[], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (, randomBytes, ), ;, alg, ., update, (]
[;, secRan, ., nextBytes, (, randomBytes, ), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =]
[;, secRan, ., nextBytes, (, randomBytes, ), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =]
[(, randomBytes, ), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =]
[), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;]
[byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;, i, <, hash, ., length, ;]
[=, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;, i, <, hash, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =]
[for, (, int, i, =, 0, ;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =]
[=, 0, ;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (]
[=, 0, ;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (]
[;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, []
[i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =]
[i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =]
[Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (]
[(, hash, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==]
[c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {]
[intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =]
[intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =]
[), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (]
[1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return]
[1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return]
[1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return]
[;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (]
[outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,]
[len, ), ;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return]
[len, ), ;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return]
[}, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (]
[(, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (, getSecRan, (, ), ,]
[int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution, (, getSecRan, (, ), ,, lower, ,]
[), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (]
[), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (]
[}, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=]
[(, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw]
[lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[upper, ), throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,]
[throws, NumberIsTooLargeException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,]
[{, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =]
[lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =]
[lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =]
[,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (]
[,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (]
[,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -]
[;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, ), +]
[rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=]
[long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, while, (]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =]
[0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (]
[{, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=]
[(, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&]
[(, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&]
[), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <]
[upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return]
[upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return]
[{, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +]
[{, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +]
[}, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (]
[else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (, (, int, )]
[MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return]
[MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return]
[{, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +]
[lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (]
[rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (, rng, ,]
[nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[,, max, ), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (]
[}, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, ), ,]
[public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, ), ,, mean, ,]
[public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, ), ,, mean, ,]
[double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, ), ,, mean, ,, PoissonDistribution, ., DEFAULT_EPSILON, ,]
[double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, ), ,, mean, ,, PoissonDistribution, ., DEFAULT_EPSILON, ,]
[sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (]
[sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (]
[), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=]
[double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=, 0, ), {, throw]
[double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,]
[if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return]
[if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return]
[if, (, sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return]
[sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *]
[sigma, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *]
[(, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *, getRandomGenerator, (, ), ., nextGaussian, (, ), +]
[), ., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[), ., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[(, ), +, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (]
[;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (, ), ,]
[public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (, ), ,, mean, ,]
[public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (, ), ,, mean, ,]
[., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (]
[double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (, getRandomGenerator, (, ), ,]
[(, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (, getRandomGenerator, (, ), ,, shape, ,]
[shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (, getRandomGenerator, (, ), ,, shape, ,, scale, ,]
[shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (, getRandomGenerator, (, ), ,, shape, ,, scale, ,]
[int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, HypergeometricDistribution, (]
[numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, HypergeometricDistribution, (, getRandomGenerator, (, ), ,]
[int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, HypergeometricDistribution, (, getRandomGenerator, (, ), ,, populationSize, ,]
[), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, HypergeometricDistribution, (, getRandomGenerator, (, ), ,, populationSize, ,, numberOfSuccesses, ,]
[(, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return]
[(, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return]
[}, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, new, PascalDistribution, (]
[(, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, new, PascalDistribution, (, getRandomGenerator, (, ), ,]
[r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, new, PascalDistribution, (, getRandomGenerator, (, ), ,, r, ,]
[,, p, ), ., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return]
[,, p, ), ., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return]
[., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (]
[;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (, getRandomGenerator, (, ), ,]
[public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (, getRandomGenerator, (, ), ,, df, ,]
[public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (, getRandomGenerator, (, ), ,, df, ,]
[., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (]
[double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (, getRandomGenerator, (, ), ,]
[(, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (, getRandomGenerator, (, ), ,, shape, ,]
[shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (, getRandomGenerator, (, ), ,, shape, ,, scale, ,]
[shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (, getRandomGenerator, (, ), ,, shape, ,, scale, ,]
[., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return]
[., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return]
[), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, new, ZipfDistribution, (]
[int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, new, ZipfDistribution, (, getRandomGenerator, (, ), ,]
[(, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, new, ZipfDistribution, (, getRandomGenerator, (, ), ,, numberOfElements, ,]
[exponent, ), ., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return]
[exponent, ), ., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return]
[sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (]
[}, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (, getRandomGenerator, (, ), ,]
[double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (, getRandomGenerator, (, ), ,, alpha, ,]
[(, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (, getRandomGenerator, (, ), ,, alpha, ,, beta, ,]
[(, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (, getRandomGenerator, (, ), ,, alpha, ,, beta, ,]
[DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return]
[DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return]
[sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new, BinomialDistribution, (]
[}, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new, BinomialDistribution, (, getRandomGenerator, (, ), ,]
[int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new, BinomialDistribution, (, getRandomGenerator, (, ), ,, numberOfTrials, ,]
[probabilityOfSuccess, ), ., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return]
[probabilityOfSuccess, ), ., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return]
[sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (]
[}, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (, getRandomGenerator, (, ), ,]
[double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (, getRandomGenerator, (, ), ,, median, ,]
[(, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (, getRandomGenerator, (, ), ,, median, ,, scale, ,]
[(, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (, getRandomGenerator, (, ), ,, median, ,, scale, ,]
[,, CauchyDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return]
[,, CauchyDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return]
[DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (]
[(, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator, (, ), ,]
[;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator, (, ), ,, df, ,]
[;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator, (, ), ,, df, ,]
[., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return]
[., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return]
[), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (]
[double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (, getRandomGenerator, (, ), ,]
[(, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (, getRandomGenerator, (, ), ,, numeratorDf, ,]
[numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (, getRandomGenerator, (, ), ,, numeratorDf, ,, denominatorDf, ,]
[numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (, getRandomGenerator, (, ), ,, numeratorDf, ,, denominatorDf, ,]
[;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, nextUniform, (]
[nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, nextUniform, (, lower, ,]
[double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, nextUniform, (, lower, ,, upper, ,]
[nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (]
[nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (]
[double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (, lower, >=]
[upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (, lower, >=, upper, ), {, throw]
[lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[,, NotFiniteNumberException, ,, NotANumberException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,]
[,, NotANumberException, {, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,]
[{, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (]
[,, lower, ,, upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw]
[upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (]
[upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (]
[;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,]
[isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (]
[isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (]
[(, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw]
[INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (]
[INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (]
[;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,]
[isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (]
[isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (]
[isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (]
[new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (, lower, ), ||]
[new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (, lower, ), ||]
[., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (]
[;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (, upper, ), ), {, throw]
[||, Double, ., isNaN, (, upper, ), ), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =]
[), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =]
[), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =]
[}, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (]
[}, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (]
[final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !]
[generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&]
[generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&]
[getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=]
[;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {]
[u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =]
[u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =]
[while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return]
[while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return]
[while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return]
[!, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *]
[&&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +]
[&&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +]
[u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (]
[u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (]
[0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -]
[u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u, ), *]
[}, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (]
[}, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (]
[int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, k, >]
[(, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, k, >, n, ), {, throw]
[,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (]
[,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (]
[throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,]
[,, NotStrictlyPositiveException, {, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,]
[{, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (, k, <=]
[LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw]
[,, k, ,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, k, ,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,]
[0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =]
[{, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural, (]
[NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;]
[PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (]
[k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index, ,]
[], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return]
[], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return]
[(, n, ), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (]
[), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (, index, ,]
[], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, int, len, =]
[], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, int, len, =]
[,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, int, len, =, c, ., size, (, ), ;, if, (]
[,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, int, len, =, c, ., size, (, ), ;, if, (]
[k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, int, len, =, c, ., size, (, ), ;, if, (, k, >]
[,, NotStrictlyPositiveException, {, int, len, =, c, ., size, (, ), ;, if, (, k, >, len, ), {, throw]
[int, len, =, c, ., size, (, ), ;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (]
[int, len, =, c, ., size, (, ), ;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (]
[., size, (, ), ;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,]
[(, ), ;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,]
[;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (, k, <=]
[LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw]
[,, k, ,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, k, ,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects, =]
[0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects, =]
[k, ), ;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index, =]
[;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index, =, nextPermutation, (]
[Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index, =, nextPermutation, (, len, ,]
[(, ), ;, int, [, ], index, =, nextPermutation, (, len, ,, k, ), ;, Object, [, ], result, =]
[int, [, ], index, =, nextPermutation, (, len, ,, k, ), ;, Object, [, ], result, =, new, Object, []
[,, k, ), ;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =]
[), ;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;]
[), ;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;]
[Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;, i, <]
[], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;]
[], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;]
[Object, [, k, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {]
[Object, [, k, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {]
[k, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, []
[for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ], =]
[int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ], =, objects, []
[int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ], =, objects, []
[=, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ], =, objects, [, index, []
[;, i, ++, ), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;, }, return]
[[, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {]
[[, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {]
[;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (, ), ., setSeed, (]
[long, seed, ), {, getRandomGenerator, (, ), ., setSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {]
[long, seed, ), {, getRandomGenerator, (, ), ., setSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {]
[), ., setSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {, getSecRan, (, ), ., setSeed, (]
[), ., setSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {, getSecRan, (, ), ., setSeed, (]
[), ., setSeed, (, System, ., currentTimeMillis, (, ), ), ;, }, public, void, reSeedSecure, (, long, seed, ), {]
[), ., setSeed, (, System, ., currentTimeMillis, (, ), ), ;, }, public, void, reSeedSecure, (, long, seed, ), {]
[currentTimeMillis, (, ), ), ;, }, public, void, reSeedSecure, (, long, seed, ), {, getSecRan, (, ), ., setSeed, (]
[long, seed, ), {, getSecRan, (, ), ., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {]
[long, seed, ), {, getSecRan, (, ), ., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {]
[), ., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (]
[), ., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (]
[), ., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (]
[;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System, ., currentTimeMillis, (, ), +]
[;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System, ., currentTimeMillis, (, ), +]
[reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (]
[this, ), ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {]
[), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =]
[), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =]
[void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (]
[void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (]
[algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, SecureRandom, ., getInstance, (]
[String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, SecureRandom, ., getInstance, (, algorithm, ,]
[(, SecureRandom, ., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (]
[(, SecureRandom, ., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (]
[., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==]
[algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {]
[}, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {, initRan, (, ), ;, }, return]
[rand, ==, null, ), {, initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {]
[null, ), {, initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =]
[initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (]
[initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (]
[initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (]
[rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (, System, ., currentTimeMillis, (, ), +]
[rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (, System, ., currentTimeMillis, (, ), +]
[void, initRan, (, ), {, rand, =, new, Well19937c, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (]
[(, ), +, System, ., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (]
[(, ), +, System, ., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (]
[+, System, ., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==]
[identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {]
[this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =]
[this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =]
[}, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (]
[{, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;]
[{, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;]
[==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (]
[==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (]
[==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (]
[RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +]
[RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +]
[new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (]
[secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, return]
[}, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ], natural, =]
[;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ], natural, =, new, int, []
[int, n, ), {, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =]
[), {, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[), {, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =]
[=, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return]
