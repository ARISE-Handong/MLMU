[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, true]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, maybeCollapseIntoForStatements, (]
[;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !]
[,, parent, ), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==]
[), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||]
[), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !, n, ., isVar, (, )]
[||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (]
[==, null, ||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, .]
[||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (]
[), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !, n, ., isVar, (, )]
[), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !, n, ., isVar, (, )]
[., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !]
[), ), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !, n, ., isVar, (]
[), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (, nextSibling, ==, null, )]
[&&, !, n, ., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, )]
[&&, !, n, ., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, )]
[., isExprResult, (, ), &&, !, n, ., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n]
[), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (, nextSibling, ==, null, )]
[), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (, nextSibling, ==, null, )]
[., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (]
[;, if, (, nextSibling, ==, null, ), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (, nextSibling, )]
[., getNext, (, ), ;, if, (, nextSibling, ==, null, ), {, return, ;, }, else, if, (, NodeUtil, .]
[), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode, =, nextSibling]
[==, null, ), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode]
[), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode, =, nextSibling]
[), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (, forVar, .]
[., isForIn, (, nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, )]
[), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (, forVar]
[;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&, n, .]
[;, if, (, forVar, ., isName, (, ), &&, n, ., isVar, (, ), &&, n, ., hasOneChild, (, )]
[., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&, n, ., isVar, (, ), &&, n]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&]
[&&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[&&, n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild]
[., isName, (, ), &&, n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), ), {, Node, name]
[&&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[., isVar, (, ), &&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, )]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&]
[., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, .]
[;, if, (, !, name, ., hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (, name, .]
[., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&, forVar, ., getString, (, ), .]
[), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler, .]
[&&, forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild]
[&&, forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild]
[., hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), )]
[), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler, .]
[., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, .]
[., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild, (, n]
[), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler]
[., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,]
[;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else]
[., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&, nextSibling]
[., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (]
[,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&]
[;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&, nextSibling, ., getFirstChild, (, ), ., isEmpty]
[., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&, nextSibling, ., getFirstChild]
[), {, if, (, NodeUtil, ., containsType, (, n, ,, Token, ., IN, ), ), {, return, ;, }, Node]
[&&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (, n, ,]
[., isFor, (, ), &&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, .]
[), {, if, (, NodeUtil, ., containsType, (, n, ,, Token, ., IN, ), ), {, return, ;, }, Node]
[., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (, n, ,, Token, ., IN, ), ), {]
[., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (, n, ,, Token, .]
[), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;, parent]
[., containsType, (, n, ,, Token, ., IN, ), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node]
[,, Token, ., IN, ), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, .]
[), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;]
[., IN, ), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (]
[;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;]
[;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {]
[., getFirstChild, (, ), ;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (, n, ., isVar]
[;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {]
[., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =]
[), ;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else]
[), {, newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;]
[., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild]
[=, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n]
[;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild]
[;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild]
[., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, .]
[), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, .]
[., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, )]
[=, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer]
[;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;, compiler, .]
[., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer]
[;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, static]
[., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;, compiler, ., reportCodeChange, (]
[), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler]
[., replaceChild, (, oldInitializer, ,, newInitializer, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, static, class, StripConstantAnnotations, extends]
[,, newInitializer, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler]
[;, }, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, StripConstantAnnotations, (, AbstractCompiler, compiler, )]
[., reportCodeChange, (, ), ;, }, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, StripConstantAnnotations]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[., traverse, (, compiler, ,, externs, ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, this, )]
[,, externs, ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, this, ), ;, }, @, Override]
[,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, this, ), ;, }, @, Override, public, void]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, this, ), ;, }, @, Override, public, void, visit, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[., traverse, (, compiler, ,, js, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, js, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if]
[), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }, }]
[||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }]
[||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (, Node, .]
[., isName, (, ), ||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {, node, .]
[||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }]
[., isString, (, ), ||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, )]
[), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }, }]
[., isStringKey, (, ), ), {, node, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }, }]
[;, }, }, }, }]
[., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., IS_CONSTANT_NAME, ), ;, }, }, }, }]
