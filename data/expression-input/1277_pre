[apache, ., commons, ., math3, ., util, ., FastMath, ;, public, class, CholeskyDecomposition, {, public, static, final, double, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD, =]
[FastMath, ;, public, class, CholeskyDecomposition, {, public, static, final, double, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD, =, 1.0e-15, ;, public, static, final, double, DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD, =]
[lTData, ;, private, RealMatrix, cachedL, ;, private, RealMatrix, cachedLT, ;, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ), {, this, (]
[private, RealMatrix, cachedL, ;, private, RealMatrix, cachedLT, ;, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ), {, this, (, matrix, ,]
[cachedL, ;, private, RealMatrix, cachedLT, ;, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ), {, this, (, matrix, ,, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD, ,]
[;, }, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, ), {, if, (]
[}, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, ), {, if, (, !]
[}, public, CholeskyDecomposition, (, final, RealMatrix, matrix, ,, final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, ), {, if, (, !]
[final, double, relativeSymmetryThreshold, ,, final, double, absolutePositivityThreshold, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw]
[,, final, double, absolutePositivityThreshold, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[,, final, double, absolutePositivityThreshold, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =]
[), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =]
[;, }, final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;]
[final, int, order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;, cachedL, =]
[order, =, matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;, cachedL, =, null, ;]
[matrix, ., getRowDimension, (, ), ;, lTData, =, matrix, ., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =]
[=, matrix, ., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =]
[., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;]
[., getData, (, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;]
[(, ), ;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[;, cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;]
[cachedL, =, null, ;, cachedLT, =, null, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++]
[(, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], lI, =]
[(, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], lI, =]
[i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], lI, =, lTData, []
[++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =]
[++, i, ), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +]
[final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +, 1, ;]
[final, double, [, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +, 1, ;]
[[, ], lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +, 1, ;, j, <]
[lI, =, lTData, [, i, ], ;, for, (, int, j, =, i, +, 1, ;, j, <, order, ;]
[=, lTData, [, i, ], ;, for, (, int, j, =, i, +, 1, ;, j, <, order, ;, ++]
[j, =, i, +, 1, ;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =]
[j, =, i, +, 1, ;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =]
[i, +, 1, ;, j, <, order, ;, ++, j, ), {, final, double, [, ], lJ, =, lTData, []
[;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =]
[;, ++, j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =]
[j, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lIJ, =, lI, []
[lJ, =, lTData, [, j, ], ;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =]
[lJ, =, lTData, [, j, ], ;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =]
[lTData, [, j, ], ;, final, double, lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, []
[lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =]
[lIJ, =, lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =]
[lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *]
[lI, [, j, ], ;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *]
[;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (]
[;, final, double, lJI, =, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (]
[=, lJ, [, i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (]
[i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,]
[i, ], ;, final, double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,]
[double, maxDelta, =, relativeSymmetryThreshold, *, FastMath, ., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (]
[., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (]
[., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (]
[., max, (, FastMath, ., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (]
[., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (]
[., abs, (, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (]
[(, lIJ, ), ,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -]
[,, FastMath, ., abs, (, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >]
[(, lJI, ), ), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw]
[), ;, if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (]
[if, (, FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,]
[FastMath, ., abs, (, lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,]
[lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }]
[lIJ, -, lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }]
[lJI, ), >, maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, []
[maxDelta, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =]
[j, ,, relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =]
[relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;]
[relativeSymmetryThreshold, ), ;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;]
[;, }, lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[lJ, [, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;]
[[, i, ], =, 0, ;, }, }, for, (, int, i, =, 0, ;, i, <, order, ;, ++]
[(, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], ltI, =]
[(, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], ltI, =]
[i, =, 0, ;, i, <, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, []
[<, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (]
[<, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (]
[<, order, ;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (]
[;, ++, i, ), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, []
[), {, final, double, [, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=]
[[, ], ltI, =, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw]
[=, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (]
[=, lTData, [, i, ], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (]
[[, i, ], ;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, []
[;, if, (, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,]
[(, ltI, [, i, ], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,]
[], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }]
[], <=, absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }]
[absolutePositivityThreshold, ), {, throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, []
[throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =]
[throw, new, NonPositiveDefiniteMatrixException, (, ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =]
[ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (]
[ltI, [, i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (]
[i, ], ,, i, ,, absolutePositivityThreshold, ), ;, }, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, []
[}, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =]
[}, ltI, [, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =]
[[, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /]
[[, i, ], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /]
[], =, FastMath, ., sqrt, (, ltI, [, i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, []
[i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =]
[i, ], ), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =]
[), ;, final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -]
[final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;]
[final, double, inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;]
[inverse, =, 1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >]
[1.0, /, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;]
[/, ltI, [, i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --]
[i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {]
[i, ], ;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {]
[;, for, (, int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {, ltI, []
[int, q, =, order, -, 1, ;, q, >, i, ;, --, q, ), {, ltI, [, q, ], *=]
[>, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =]
[>, i, ;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =]
[;, --, q, ), {, ltI, [, q, ], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, []
[], *=, inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =]
[inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;]
[inverse, ;, final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;]
[final, double, [, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;, p, <]
[[, ], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;]
[], ltQ, =, lTData, [, q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++]
[lTData, [, q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {]
[lTData, [, q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {]
[q, ], ;, for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, []
[for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=]
[for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=]
[for, (, int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=]
[int, p, =, q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, []
[q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *]
[q, ;, p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *]
[p, <, order, ;, ++, p, ), {, ltQ, [, p, ], -=, ltI, [, q, ], *, ltI, []
[q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (]
[q, ], *, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (]
[*, ltI, [, p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==]
[p, ], ;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {]
[;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {, cachedL, =]
[;, }, }, }, }, public, RealMatrix, getL, (, ), {, if, (, cachedL, ==, null, ), {, cachedL, =]
[{, if, (, cachedL, ==, null, ), {, cachedL, =, getLT, (, ), ., transpose, (, ), ;, }, return]
[(, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (]
[(, ), ., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (]
[., transpose, (, ), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==]
[), ;, }, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {]
[}, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {, cachedLT, =]
[}, return, cachedL, ;, }, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {, cachedLT, =]
[}, public, RealMatrix, getLT, (, ), {, if, (, cachedLT, ==, null, ), {, cachedLT, =, MatrixUtils, ., createRealMatrix, (]
[), {, if, (, cachedLT, ==, null, ), {, cachedLT, =, MatrixUtils, ., createRealMatrix, (, lTData, ), ;, }, return]
[., createRealMatrix, (, lTData, ), ;, }, return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double, determinant, =]
[return, cachedLT, ;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =]
[;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;]
[;, }, public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;]
[public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <]
[public, double, getDeterminant, (, ), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;]
[{, double, determinant, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;, ++]
[for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =]
[for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =]
[for, (, int, i, =, 0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =]
[int, i, =, 0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =, lTData, []
[0, ;, i, <, lTData, ., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], []
[<, lTData, ., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;]
[., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=]
[., length, ;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=]
[;, ++, i, ), {, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *]
[{, double, lTii, =, lTData, [, i, ], [, i, ], ;, determinant, *=, lTii, *, lTii, ;, }, return]
[], ;, determinant, *=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return]
[*=, lTii, *, lTii, ;, }, return, determinant, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[final, double, [, ], [, ], lTData, ;, private, Solver, (, final, double, [, ], [, ], lTData, ), {]
[final, double, [, ], [, ], lTData, ;, private, Solver, (, final, double, [, ], [, ], lTData, ), {]
[[, ], lTData, ;, private, Solver, (, final, double, [, ], [, ], lTData, ), {, this, ., lTData, =]
[], [, ], lTData, ), {, this, ., lTData, =, lTData, ;, }, public, boolean, isNonSingular, (, ), {, return]
[(, ), {, return, true, ;, }, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =]
[(, ), {, return, true, ;, }, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =]
[}, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[}, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[}, public, RealVector, solve, (, final, RealVector, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[RealVector, b, ), {, final, int, m, =, lTData, ., length, ;, if, (, b, ., getDimension, (, ), !=]
[final, int, m, =, lTData, ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw]
[=, lTData, ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[=, lTData, ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[(, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,]
[throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, final, double, [, ], x, =]
[throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, final, double, [, ], x, =]
[), ;, }, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =]
[}, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0, ;]
[}, final, double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0, ;]
[double, [, ], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;]
[], x, =, b, ., toArray, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;]
[(, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =]
[(, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =]
[j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, []
[;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;]
[<, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, []
[j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ], /=]
[j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ], /=]
[), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, x, [, j, ], /=, lJ, []
[=, lTData, [, j, ], ;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =]
[=, lTData, [, j, ], ;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =]
[[, j, ], ;, x, [, j, ], /=, lJ, [, j, ], ;, final, double, xJ, =, x, []
[/=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =]
[/=, lJ, [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =]
[[, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +]
[], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;]
[], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;]
[final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <]
[xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;]
[xJ, =, x, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;]
[j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {]
[j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {]
[;, for, (, int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, []
[int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=]
[int, i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=]
[=, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *]
[=, j, +, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *]
[+, 1, ;, i, <, m, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lJ, []
[{, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =]
[{, x, [, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =]
[[, i, ], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -]
[], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;]
[], -=, xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;]
[xJ, *, lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=]
[lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;]
[lJ, [, i, ], ;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;]
[;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[;, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[}, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, x, []
[int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=]
[int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=]
[int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=]
[=, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, []
[1, ;, j, >=, 0, ;, j, --, ), {, x, [, j, ], /=, lTData, [, j, ], []
[--, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =]
[--, ), {, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =]
[{, x, [, j, ], /=, lTData, [, j, ], [, j, ], ;, final, double, xJ, =, x, []
[j, ], [, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =]
[[, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;]
[[, j, ], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <]
[final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;]
[final, double, xJ, =, x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;]
[x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {]
[x, [, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {]
[j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, []
[for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=]
[for, (, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=]
[int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *]
[int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *]
[int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *]
[=, 0, ;, i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, []
[i, <, j, ;, i, ++, ), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], []
[), {, x, [, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return]
[[, i, ], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (]
[], -=, xJ, *, lTData, [, i, ], [, j, ], ;, }, }, return, new, ArrayRealVector, (, x, ,]
[ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =]
[ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if, (]
[RealMatrix, b, ), {, final, int, m, =, lTData, ., length, ;, if, (, b, ., getRowDimension, (, ), !=]
[final, int, m, =, lTData, ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw]
[=, lTData, ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[=, lTData, ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (]
[(, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, final, int, nColB, =]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, final, int, nColB, =]
[;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], x, =]
[;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], x, =]
[;, final, double, [, ], [, ], x, =, b, ., getData, (, ), ;, for, (, int, j, =]
[double, [, ], [, ], x, =, b, ., getData, (, ), ;, for, (, int, j, =, 0, ;]
[double, [, ], [, ], x, =, b, ., getData, (, ), ;, for, (, int, j, =, 0, ;]
[], [, ], x, =, b, ., getData, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[], x, =, b, ., getData, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;]
[], x, =, b, ., getData, (, ), ;, for, (, int, j, =, 0, ;, j, <, m, ;]
[(, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =]
[(, int, j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =]
[j, =, 0, ;, j, <, m, ;, j, ++, ), {, final, double, [, ], lJ, =, lTData, []
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =]
[;, j, ++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =]
[++, ), {, final, double, [, ], lJ, =, lTData, [, j, ], ;, final, double, lJJ, =, lJ, []
[lTData, [, j, ], ;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =]
[lTData, [, j, ], ;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =]
[j, ], ;, final, double, lJJ, =, lJ, [, j, ], ;, final, double, [, ], xJ, =, x, []
[[, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;]
[], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++]
[x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, []
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ], /=]
[<, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =]
[<, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +]
[k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;]
[k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;]
[{, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <]
[[, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;]
[[, k, ], /=, lJJ, ;, }, for, (, int, i, =, j, +, 1, ;, i, <, m, ;]
[i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =]
[i, =, j, +, 1, ;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =]
[j, +, 1, ;, i, <, m, ;, i, ++, ), {, final, double, [, ], xI, =, x, []
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =]
[++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lJI, =, lJ, []
[=, x, [, i, ], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =]
[[, i, ], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;]
[[, i, ], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <]
[final, double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;]
[double, lJI, =, lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++]
[lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[lJ, [, i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[i, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, []
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, []
[0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *]
[xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =]
[xI, [, k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =]
[k, ], -=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -]
[-=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;]
[-=, xJ, [, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;]
[[, k, ], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=]
[], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;]
[], *, lJI, ;, }, }, }, for, (, int, j, =, m, -, 1, ;, j, >=, 0, ;]
[(, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =]
[(, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =]
[(, int, j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =]
[j, =, m, -, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, []
[-, 1, ;, j, >=, 0, ;, j, --, ), {, final, double, lJJ, =, lTData, [, j, ], []
[), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, [, ], xJ, =]
[), {, final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, [, ], xJ, =]
[final, double, lJJ, =, lTData, [, j, ], [, j, ], ;, final, double, [, ], xJ, =, x, []
[[, j, ], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[], ;, final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <]
[[, ], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;]
[], xJ, =, x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++]
[x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[x, [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, []
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xJ, [, k, ], /=]
[<, nColB, ;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;]
[;, ++, k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;]
[k, ), {, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <]
[{, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j, ;]
[{, xJ, [, k, ], /=, lJJ, ;, }, for, (, int, i, =, 0, ;, i, <, j, ;]
[(, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, final, double, [, ], xI, =]
[(, int, i, =, 0, ;, i, <, j, ;, i, ++, ), {, final, double, [, ], xI, =]
[i, =, 0, ;, i, <, j, ;, i, ++, ), {, final, double, [, ], xI, =, x, []
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =]
[;, i, ++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =]
[++, ), {, final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =, lTData, []
[final, double, [, ], xI, =, x, [, i, ], ;, final, double, lIJ, =, lTData, [, i, ], []
[i, ], ;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =]
[;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;]
[;, final, double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;]
[double, lIJ, =, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;, k, <]
[=, lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;]
[lTData, [, i, ], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++]
[], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[], [, j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {]
[j, ], ;, for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, []
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[for, (, int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=]
[int, k, =, 0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, []
[0, ;, k, <, nColB, ;, ++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *]
[++, k, ), {, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return]
[{, xI, [, k, ], -=, xJ, [, k, ], *, lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (]
[lIJ, ;, }, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return]
[}, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[}, }, }, return, new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
[new, Array2DRowRealMatrix, (, x, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
