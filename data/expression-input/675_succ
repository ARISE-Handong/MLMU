[;, private, static, final, long, serialVersionUID, =, -, 4602336630143123183L, ;, private, final, T, blocks, [, ], [, ], ;, private]
[;, private, final, T, blocks, [, ], [, ], ;, private, final, int, rows, ;, private, final, int, columns, ;]
[;, private, final, T, blocks, [, ], [, ], ;, private, final, int, rows, ;, private, final, int, columns, ;]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows]
[), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE]
[=, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE]
[., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, )]
[;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns]
[=, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[=, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, )]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows]
[/, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field]
[), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =]
[), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows]
[=, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns]
[;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ]]
[/, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T]
[), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final]
[-, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }]
[-, 1, ), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix]
[), /, BLOCK_SIZE, ;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final]
[;, blocks, =, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ]]
[=, createBlocksLayout, (, field, ,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ]]
[;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData, .]
[,, rows, ,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException]
[,, columns, ), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this]
[), ;, }, public, BlockFieldMatrix, (, final, T, [, ], [, ], rawData, ), throws, DimensionMismatchException, {, this, (, rawData]
[,, rawData, [, 0, ], ., length, ,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public, BlockFieldMatrix, (]
[., length, ,, rawData, [, 0, ], ., length, ,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public]
[,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,, final, int, columns]
[., length, ,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,, final]
[[, 0, ], ., length, ,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public, BlockFieldMatrix, (, final, int]
[], ., length, ,, toBlocksLayout, (, rawData, ), ,, false, ), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,]
[,, false, ), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,, final, int, columns, ,, final, T, [, ]]
[), ,, false, ), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,, final, int, columns, ,, final, T, []
[), ;, }, public, BlockFieldMatrix, (, final, int, rows, ,, final, int, columns, ,, final, T, [, ], [, ]]
[,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =]
[), ,, rows, ,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows]
[,, columns, ), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows]
[), ;, this, ., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE]
[=, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE]
[., rows, =, rows, ;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, )]
[;, this, ., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns]
[=, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +]
[., columns, =, columns, ;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (]
[;, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -]
[=, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, )]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =]
[/, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {]
[), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, )]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[-, 1, ), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (]
[), /, BLOCK_SIZE, ;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, )]
[;, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =]
[=, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, .]
[;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,]
[/, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *]
[), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows]
[-, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, )]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField]
[-, 1, ), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, )]
[), /, BLOCK_SIZE, ;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows]
[;, if, (, copyArray, ), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,]
[), {, blocks, =, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -, 1, ), ;]
[=, MathArrays, ., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {]
[;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0]
[., buildArray, (, getField, (, ), ,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {, blocks, =]
[,, blockRows, *, blockColumns, ,, -, 1, ), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =]
[,, -, 1, ), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (]
[*, blockColumns, ,, -, 1, ), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;]
[,, -, 1, ), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (]
[), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =]
[), ;, }, else, {, blocks, =, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =]
[=, blockData, ;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[;, }, int, index, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length]
[;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth]
[<, blockColumns, ;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight]
[;, ++, jBlock, ,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth]
[,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, )]
[,, ++, index, ), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, )]
[), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw]
[), {, if, (, blockData, [, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw]
[), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), )]
[!=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,]
[., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], .]
[[, index, ], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, []
[], ., length, !=, iHeight, *, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ]]
[), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), )]
[*, blockWidth, (, jBlock, ), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *]
[), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), )]
[), ), {, throw, new, DimensionMismatchException, (, blockData, [, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, )]
[;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, [, index, ], ., clone, (, )]
[,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =]
[., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index]
[[, index, ], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {]
[], ., length, ,, iHeight, *, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, []
[), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, [, index, ], ., clone, (]
[*, blockWidth, (, jBlock, ), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, []
[), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, [, index, ], ., clone, (]
[), ), ;, }, if, (, copyArray, ), {, blocks, [, index, ], =, blockData, [, index, ], ., clone]
[), {, blocks, [, index, ], =, blockData, [, index, ], ., clone, (, ), ;, }, }, }, }]
[=, blockData, [, index, ], ., clone, (, ), ;, }, }, }, }, public, static, <, T, extends, FieldElement]
[[, index, ], =, blockData, [, index, ], ., clone, (, ), ;, }, }, }, }, public, static, <]
[], =, blockData, [, index, ], ., clone, (, ), ;, }, }, }, }, public, static, <, T, extends]
[;, }, }, }, }, public, static, <, T, extends, FieldElement, <, T, >, >, T, [, ], [, ]]
[., clone, (, ), ;, }, }, }, }, public, static, <, T, extends, FieldElement, <, T, >, >, T]
[[, index, ], ., clone, (, ), ;, }, }, }, }, public, static, <, T, extends, FieldElement, <, T]
[], ., clone, (, ), ;, }, }, }, }, public, static, <, T, extends, FieldElement, <, T, >, >]
[;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE]
[., length, ;, final, int, columns, =, rawData, [, 0, ], ., length, ;, final, int, blockRows, =, (, rows]
[;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (]
[., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns]
[[, 0, ], ., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[], ., length, ;, final, int, blockRows, =, (, rows, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int]
[;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =]
[/, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int]
[), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (]
[-, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[-, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (]
[;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int]
[/, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {]
[), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, )]
[-, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length]
[-, 1, ), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++]
[), /, BLOCK_SIZE, ;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, )]
[;, for, (, int, i, =, 0, ;, i, <, rawData, ., length, ;, ++, i, ), {, final, int]
[;, i, <, rawData, ., length, ;, ++, i, ), {, final, int, length, =, rawData, [, i, ], .]
[;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=]
[<, rawData, ., length, ;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;]
[;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=]
[., length, ;, ++, i, ), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (]
[), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=, columns, ), {]
[), {, final, int, length, =, rawData, [, i, ], ., length, ;, if, (, length, !=, columns, ), {]
[;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final]
[., length, ;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }]
[[, i, ], ., length, ;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,, length]
[], ., length, ;, if, (, length, !=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;]
[), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final, Field, <, T, >, field, =]
[!=, columns, ), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final, Field, <, T, >]
[), {, throw, new, DimensionMismatchException, (, columns, ,, length, ), ;, }, }, final, Field, <, T, >, field, =]
[;, }, }, final, Field, <, T, >, field, =, extractField, (, rawData, ), ;, final, T, [, ], []
[,, length, ), ;, }, }, final, Field, <, T, >, field, =, extractField, (, rawData, ), ;, final, T]
[), ;, }, }, final, Field, <, T, >, field, =, extractField, (, rawData, ), ;, final, T, [, ]]
[;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -]
[), ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (]
[,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0]
[,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[*, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock]
[,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (]
[,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock]
[+, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0]
[,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock]
[), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[-, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T]
[,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, .]
[+, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =]
[,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, .]
[), ;, final, int, jWidth, =, qEnd, -, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (]
[;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, []
[-, qStart, ;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;]
[;, final, T, [, ], block, =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, []
[;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;]
[., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =]
[,, iHeight, *, jWidth, ), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (]
[), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart]
[*, jWidth, ), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p]
[), ;, blocks, [, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart]
[=, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[[, blockIndex, ], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[], =, block, ;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[;, int, index, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (]
[;, p, <, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,]
[;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,]
[<, pEnd, ;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,]
[;, ++, p, ), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,]
[), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;]
[), {, System, ., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;]
[;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }, public, static, <, T, extends]
[., arraycopy, (, rawData, [, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth]
[,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }]
[[, p, ], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex]
[], ,, qStart, ,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }]
[,, block, ,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks]
[,, index, ,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }]
[,, jWidth, ), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }, public, static]
[), ;, index, +=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }, public, static, <, T]
[+=, jWidth, ;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }, public, static, <, T, extends, FieldElement, <]
[;, }, ++, blockIndex, ;, }, }, return, blocks, ;, }, public, static, <, T, extends, FieldElement, <, T, >]
[;, }, }, return, blocks, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, T, [, ]]
[;, }, }, return, blocks, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, T, [, ]]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, T, [, ], [, ], createBlocksLayout, (, final]
[;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], []
[/, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, []
[), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T]
[-, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /]
[-, 1, ), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;]
[), /, BLOCK_SIZE, ;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T]
[;, final, int, blockColumns, =, (, columns, +, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], []
[;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -]
[/, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns]
[), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *]
[-, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[+, BLOCK_SIZE, -, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (]
[-, 1, ), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,]
[), /, BLOCK_SIZE, ;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *]
[;, final, T, [, ], [, ], blocks, =, MathArrays, ., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[., buildArray, (, field, ,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (]
[,, blockRows, *, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0]
[,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[*, blockColumns, ,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock]
[,, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =]
[;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (]
[,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock]
[+, BLOCK_SIZE, ,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0]
[,, rows, ), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock]
[), ;, final, int, iHeight, =, pEnd, -, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[-, pStart, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =]
[;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, []
[,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray]
[+, BLOCK_SIZE, ,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays]
[,, columns, ), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray]
[), ;, final, int, jWidth, =, qEnd, -, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field]
[;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;]
[-, qStart, ;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++]
[;, blocks, [, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;]
[=, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }, return, blocks, ;]
[[, blockIndex, ], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }]
[], =, MathArrays, ., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }, return, blocks]
[;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final]
[., buildArray, (, field, ,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @]
[,, iHeight, *, jWidth, ), ;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <]
[), ;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (]
[*, jWidth, ), ;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >]
[), ;, ++, blockIndex, ;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (]
[;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,]
[;, }, }, return, blocks, ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,]
[;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws]
[;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <, T, >, copied, =, new]
[,, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <]
[,, columnDimension, ), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <, T, >]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, BlockFieldMatrix, <, T, >, copied, =]
[;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {, System, .]
[,, rows, ,, columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++]
[,, columns, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., length, ;, ++, i, ), {, System]
[;, i, <, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,]
[;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, []
[<, blocks, ., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,]
[;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, []
[., length, ;, ++, i, ), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, .]
[), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,]
[), {, System, ., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,]
[;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T, >, add, (, final, FieldMatrix, <, T, >]
[., arraycopy, (, blocks, [, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,, blocks]
[,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], ., length, ), ;]
[[, i, ], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], .]
[], ,, 0, ,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], ., length, )]
[,, copied, ., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return]
[,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix]
[[, i, ], ,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return, copied, ;, }, @]
[., blocks, [, i, ], ,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return, copied, ;]
[], ,, 0, ,, blocks, [, i, ], ., length, ), ;, }, return, copied, ;, }, @, Override, public]
[,, blocks, [, i, ], ., length, ), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T]
[), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T, >, add, (, final, FieldMatrix, <, T]
[., length, ), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T, >, add, (, final, FieldMatrix]
[[, i, ], ., length, ), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T, >, add]
[], ., length, ), ;, }, return, copied, ;, }, @, Override, public, FieldMatrix, <, T, >, add, (, final]
[;, }, @, Override, public, FieldMatrix, <, T, >, add, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException]
[;, }, catch, (, ClassCastException, cce, ), {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkAdditionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, .]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock]
[<, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, .]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock]
[., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE]
[;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[+, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, .]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k]
[;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry]
[<, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,]
[=, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k]
[[, k, ], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), )]
[], =, tBlock, [, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++]
[;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T]
[., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex]
[[, k, ], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }]
[], ., add, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++]
[), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <]
[., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }]
[), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix]
[;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, add, (]
[;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, add, (]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, add, (, final, BlockFieldMatrix, <, T, >]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, add, (, final, BlockFieldMatrix, <, T, >]
[;, }, }, public, BlockFieldMatrix, <, T, >, add, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {]
[,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, )]
[;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m, .]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, []
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m]
[;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0]
[[, blockIndex, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int]
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[[, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, )]
[., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock]
[;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ]]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k]
[<, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k]
[., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;]
[=, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }]
[[, k, ], =, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;, }, }, return]
[], =, tBlock, [, k, ], ., add, (, mBlock, [, k, ], ), ;, }, }, return, out, ;]
[;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T]
[., add, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <]
[[, k, ], ., add, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override]
[], ., add, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix]
[), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <]
[[, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, subtract, (]
[], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix]
[;, }, @, Override, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException]
[;, }, catch, (, ClassCastException, cce, ), {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkSubtractionCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[,, rows, ,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, columns, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, .]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock]
[<, out, ., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, .]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock]
[., blockRows, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., blockColumns, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE]
[;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE]
[[, blockIndex, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[+, BLOCK_SIZE, ,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, .]
[,, rows, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k]
[;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry]
[<, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,]
[=, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k]
[[, k, ], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), )]
[], =, tBlock, [, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++]
[;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T]
[., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex]
[[, k, ], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }]
[], ., subtract, (, m, ., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++]
[), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <]
[., getEntry, (, p, ,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, q, ), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }]
[), ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix]
[;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (]
[;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (, final, BlockFieldMatrix, <, T, >]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (, final, BlockFieldMatrix, <, T, >]
[;, }, }, public, BlockFieldMatrix, <, T, >, subtract, (, final, BlockFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {]
[,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, )]
[;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m, .]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, []
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, final, T, [, ], mBlock, =, m]
[;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0]
[[, blockIndex, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int]
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, blockIndex, ], ;, for, (, int, k, =]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[[, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, )]
[., blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++]
[], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock]
[;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ]]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k]
[<, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k]
[., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;]
[=, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }]
[[, k, ], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return]
[], =, tBlock, [, k, ], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return, out, ;]
[;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, )]
[., subtract, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <]
[[, k, ], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override]
[], ., subtract, (, mBlock, [, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix]
[), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d]
[[, k, ], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarAdd, (]
[], ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarAdd, (, final, T]
[;, }, @, Override, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, ), {, final, BlockFieldMatrix, <, T]
[;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {]
[,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, )]
[;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[[, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, )]
[], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock]
[;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ]]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;]
[<, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;]
[., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return]
[=, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return, out, ;, }, @, Override, public]
[[, k, ], =, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return, out, ;, }]
[], =, tBlock, [, k, ], ., add, (, d, ), ;, }, }, return, out, ;, }, @, Override]
[;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, )]
[., add, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarMultiply]
[[, k, ], ., add, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <]
[], ., add, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >]
[), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d]
[;, }, @, Override, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, ), {, final, BlockFieldMatrix, <, T]
[;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {]
[,, rows, ,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length]
[,, columns, ), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++]
[), ;, for, (, int, blockIndex, =, 0, ;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, )]
[;, blockIndex, <, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, out, ., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks]
[;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[., blocks, ., length, ;, ++, blockIndex, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;, k]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int]
[], ;, final, T, [, ], tBlock, =, blocks, [, blockIndex, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, []
[[, blockIndex, ], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, )]
[], ;, for, (, int, k, =, 0, ;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock]
[;, k, <, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ]]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;]
[<, outBlock, ., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply]
[;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;]
[., length, ;, ++, k, ), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return]
[), {, outBlock, [, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return]
[=, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return, out, ;, }, @, Override, public]
[[, k, ], =, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return, out, ;, }]
[], =, tBlock, [, k, ], ., multiply, (, d, ), ;, }, }, return, out, ;, }, @, Override]
[;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T]
[., multiply, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, multiply]
[[, k, ], ., multiply, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <]
[], ., multiply, (, d, ), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >]
[), ;, }, }, return, out, ;, }, @, Override, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <]
[;, }, @, Override, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException]
[;, }, catch, (, ClassCastException, cce, ), {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out, =]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[), ;, }, catch, (, ClassCastException, cce, ), {, checkMultiplicationCompatible, (, m, ), ;, final, BlockFieldMatrix, <, T, >, out]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (]
[,, rows, ,, m, ., getColumnDimension, (, ), ), ;, final, T, zero, =, getField, (, ), ., getZero, (]
[,, m, ., getColumnDimension, (, ), ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;]
[), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for]
[., getColumnDimension, (, ), ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, )]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, )]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[<, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[., blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, )]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0]
[., min, (, qStart, +, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =]
[,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ]]
[+, BLOCK_SIZE, ,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =, out, ., blocks, []
[,, m, ., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ]]
[), ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =]
[., getColumnDimension, (, ), ), ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =]
[[, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final]
[., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, )]
[], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth]
[;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[<, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ]]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock]
[), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock]
[;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =]
[), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart]
[;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart]
[[, iBlock, *, blockColumns, +, kBlock, ], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0]
[], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =]
[+, kBlock, ], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int]
[*, blockColumns, +, kBlock, ], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for]
[+, kBlock, ], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int]
[], ;, final, int, rStart, =, kBlock, *, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[*, BLOCK_SIZE, ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth]
[;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd]
[<, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final]
[;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[*, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <]
[), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q]
[-, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart]
[), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, T, sum, =, zero]
[+, kWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, T, sum]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, T, sum, =, zero]
[;, q, <, qEnd, ;, ++, q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for]
[;, ++, q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =]
[<, qEnd, ;, ++, q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int]
[;, ++, q, ), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =]
[), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l]
[), {, T, sum, =, zero, ;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l]
[;, int, r, =, rStart, ;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, )]
[;, for, (, int, l, =, lStart, ;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, .]
[;, l, <, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], .]
[;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, .]
[<, lEnd, ;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (]
[;, ++, l, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, .]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r]
[=, sum, ., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, )]
[;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;]
[., add, (, tBlock, [, l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), )]
[), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, )]
[., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, []
[[, l, ], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;]
[], ., multiply, (, m, ., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock]
[), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum]
[., getEntry, (, r, ,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock]
[,, q, ), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], .]
[), ), ), ;, ++, r, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (]
[;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;]
[;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;]
[=, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;]
[[, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }]
[], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex]
[;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <]
[., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;]
[[, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }]
[], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out]
[), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix]
[;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, multiply]
[;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, multiply]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, multiply, (, BlockFieldMatrix, <, T, >, m]
[;, }, }, return, out, ;, }, }, public, BlockFieldMatrix, <, T, >, multiply, (, BlockFieldMatrix, <, T, >, m]
[;, }, }, public, BlockFieldMatrix, <, T, >, multiply, (, BlockFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (]
[,, rows, ,, m, ., columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;]
[,, m, ., columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex]
[), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0, ;, for]
[., columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, int, blockIndex, =, 0]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[., getZero, (, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, out, ., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[., blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, )]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, )]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final]
[;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[<, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int]
[), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth]
[), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth]
[;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4]
[., blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +]
[), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int]
[;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, []
[+, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final]
[;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, []
[;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[+, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks]
[;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0]
[+, jWidth, ;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =]
[[, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final]
[., blocks, [, blockIndex, ], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, )]
[], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth]
[;, kBlock, <, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[<, blockColumns, ;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ]]
[;, ++, kBlock, ), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =]
[), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock]
[), {, final, int, kWidth, =, blockWidth, (, kBlock, ), ;, final, T, [, ], tBlock, =, blocks, [, iBlock]
[;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ]]
[), ;, final, T, [, ], tBlock, =, blocks, [, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, []
[;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +, jBlock, ], ;]
[[, iBlock, *, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *]
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +, jBlock, ]]
[+, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +]
[*, blockColumns, +, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, .]
[+, kBlock, ], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +]
[], ;, final, T, [, ], mBlock, =, m, ., blocks, [, kBlock, *, m, ., blockColumns, +, jBlock, ]]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[[, kBlock, *, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =]
[., blocks, [, kBlock, *, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int]
[], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[+, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[*, m, ., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;]
[+, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[., blockColumns, +, jBlock, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =]
[;, p, <, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth]
[;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd]
[<, pEnd, ;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final]
[;, ++, p, ), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[), {, final, int, lStart, =, (, p, -, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;]
[*, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <]
[), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart]
[-, pStart, ), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0]
[), *, kWidth, ;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart]
[;, final, int, lEnd, =, lStart, +, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;]
[;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum, =, zero]
[+, kWidth, ;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum]
[;, for, (, int, nStart, =, 0, ;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum, =, zero]
[;, nStart, <, jWidth, ;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int]
[;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;]
[<, jWidth, ;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =]
[;, ++, nStart, ), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;]
[), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l]
[), {, T, sum, =, zero, ;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l]
[;, int, l, =, lStart, ;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {]
[;, int, n, =, nStart, ;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add]
[;, while, (, l, <, lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ]]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], )]
[<, lEnd, -, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], )]
[-, 3, ), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], )]
[=, sum, ., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add]
[;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum]
[., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), )]
[., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), )]
[., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), )]
[., add, (, tBlock, [, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock]
[), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], )]
[., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply]
[[, l, ], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1]
[], ., multiply, (, mBlock, [, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], .]
[), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ]]
[[, n, ], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n]
[], ), ), ., add, (, tBlock, [, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth]
[), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], )]
[., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ]]
[[, l, +, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock]
[], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2]
[+, 1, ], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l]
[], ., multiply, (, mBlock, [, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2]
[), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ]]
[[, n, +, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock]
[], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2]
[+, jWidth, ], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n]
[], ), ), ., add, (, tBlock, [, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2]
[), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], )]
[., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ]]
[[, l, +, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock]
[], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3]
[+, 2, ], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l]
[], ., multiply, (, mBlock, [, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3]
[), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ]]
[[, n, +, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock]
[], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3]
[+, jWidth2, ], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n]
[], ), ), ., add, (, tBlock, [, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3]
[), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =]
[., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;]
[[, l, +, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4]
[], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4]
[+, 3, ], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n]
[], ., multiply, (, mBlock, [, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4]
[), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum]
[[, n, +, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l]
[], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {]
[+, jWidth3, ], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd]
[], ), ), ;, l, +=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {]
[+=, 4, ;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add]
[;, n, +=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock]
[+=, jWidth4, ;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l]
[;, }, while, (, l, <, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ]]
[), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ]]
[<, lEnd, ), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, []
[), {, sum, =, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ]]
[=, sum, ., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;]
[;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, )]
[., add, (, tBlock, [, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=]
[), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum]
[., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =]
[[, l, ++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock]
[], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ]]
[++, ], ., multiply, (, mBlock, [, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k]
[), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (]
[[, n, ], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ]]
[], ), ), ;, n, +=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add]
[+=, jWidth, ;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++]
[;, }, outBlock, [, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;]
[=, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;]
[[, k, ], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }]
[], =, outBlock, [, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex]
[;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, T]
[., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;]
[[, k, ], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }]
[], ., add, (, sum, ), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out]
[), ;, ++, k, ;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public]
[;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, T, [, ], []
[;, }, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, T, [, ], []
[;, }, }, return, out, ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, final]
[;, }, }, return, out, ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, final]
[;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, final, T, [, ], [, ]]
[;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =]
[., buildArray, (, getField, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =]
[,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1]
[,, getColumnDimension, (, ), ), ;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;]
[), ;, final, int, lastColumns, =, columns, -, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[-, (, blockColumns, -, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[*, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int]
[), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[-, 1, ), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), *, BLOCK_SIZE, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0]
[;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;]
[,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart]
[+, BLOCK_SIZE, ,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p]
[,, rows, ), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart]
[), ;, int, regularPos, =, 0, ;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p]
[;, int, lastPos, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, T, [, ]]
[;, p, <, pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;]
[;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock]
[<, pEnd, ;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex]
[;, ++, p, ), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock]
[), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock, *, blockColumns, ;]
[), {, final, T, [, ], dataP, =, data, [, p, ], ;, int, blockIndex, =, iBlock, *, blockColumns, ;]
[;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;]
[[, p, ], ;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock]
[], ;, int, blockIndex, =, iBlock, *, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0]
[;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++]
[*, blockColumns, ;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1]
[;, int, dataPos, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, .]
[;, jBlock, <, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ]]
[;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos]
[<, blockColumns, -, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos]
[;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos]
[-, 1, ;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP]
[;, ++, jBlock, ), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos]
[), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, )]
[), {, System, ., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, )]
[;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos]
[., arraycopy, (, blocks, [, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=]
[,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks]
[[, blockIndex, ++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System]
[], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (]
[++, ], ,, regularPos, ,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy]
[,, dataP, ,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex]
[,, dataPos, ,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,]
[,, BLOCK_SIZE, ), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,]
[), ;, dataPos, +=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,]
[+=, BLOCK_SIZE, ;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns]
[;, }, System, ., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;]
[;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }, @, Override, public, FieldMatrix, <]
[., arraycopy, (, blocks, [, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE]
[,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }]
[[, blockIndex, ], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns]
[], ,, lastPos, ,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }]
[,, dataP, ,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data]
[,, dataPos, ,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }]
[,, lastColumns, ), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }, @, Override]
[), ;, regularPos, +=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }, @, Override, public, FieldMatrix]
[+=, BLOCK_SIZE, ;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }, @, Override, public, FieldMatrix, <, T, >]
[;, lastPos, +=, lastColumns, ;, }, }, return, data, ;, }, @, Override, public, FieldMatrix, <, T, >, getSubMatrix, (]
[+=, lastColumns, ;, }, }, return, data, ;, }, @, Override, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int]
[;, }, }, return, data, ;, }, @, Override, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow, ,]
[;, }, @, Override, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow, -]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >]
[,, startColumn, ,, endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField]
[,, endColumn, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, )]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, endRow]
[;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn]
[,, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /]
[,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int]
[-, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int]
[,, endColumn, -, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =]
[), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int]
[+, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;]
[-, startColumn, +, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %]
[+, 1, ), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;]
[), ;, final, int, blockStartRow, =, startRow, /, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int]
[;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift]
[/, BLOCK_SIZE, ;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final]
[;, final, int, rowsShift, =, startRow, %, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift]
[;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =]
[%, BLOCK_SIZE, ;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int]
[;, final, int, blockStartColumn, =, startColumn, /, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =]
[;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0]
[/, BLOCK_SIZE, ;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock]
[;, final, int, columnsShift, =, startColumn, %, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0]
[;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[%, BLOCK_SIZE, ;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows]
[;, int, pBlock, =, blockStartRow, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int]
[;, iBlock, <, out, ., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock]
[;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn]
[<, out, ., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;]
[;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn]
[., blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock]
[), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (]
[), {, final, int, iHeight, =, out, ., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (]
[;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++]
[., blockHeight, (, iBlock, ), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <]
[), ;, int, qBlock, =, blockStartColumn, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int]
[;, jBlock, <, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =]
[<, out, ., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =]
[., blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int]
[), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *, out]
[), {, final, int, jWidth, =, out, ., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *, out]
[;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =, out]
[., blockWidth, (, jBlock, ), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T]
[), ;, final, int, outIndex, =, iBlock, *, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *]
[+, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =]
[*, out, ., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;]
[+, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =]
[., blockColumns, +, jBlock, ;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int]
[;, final, T, [, ], outBlock, =, out, ., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *]
[;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;]
[[, outIndex, ], ;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (]
[., blocks, [, outIndex, ], ;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =]
[], ;, final, int, index, =, pBlock, *, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, )]
[;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;]
[+, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -]
[*, blockColumns, +, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +]
[+, qBlock, ;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -]
[;, final, int, width, =, blockWidth, (, qBlock, ), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;]
[;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE]
[), ;, final, int, heightExcess, =, iHeight, +, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -]
[;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (]
[-, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {]
[+, rowsShift, -, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0]
[-, BLOCK_SIZE, ;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {]
[;, final, int, widthExcess, =, jWidth, +, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (]
[;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth]
[-, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2]
[+, columnsShift, -, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final]
[-, BLOCK_SIZE, ;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2]
[;, if, (, heightExcess, >, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth]
[), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;]
[>, 0, ), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1]
[), {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;]
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[>, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index]
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,]
[), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock]
[+, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE]
[), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock]
[;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,]
[,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[[, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,]
[], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, )]
[,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, BLOCK_SIZE, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ]]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2]
[,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift]
[,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE]
[,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0]
[), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,]
[,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess]
[[, index, +, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -]
[+, 1, ], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[], ,, width2, ,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -]
[,, rowsShift, ,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;]
[,, BLOCK_SIZE, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (]
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, []
[,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ]]
[,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width]
[,, 0, ,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0]
[,, jWidth, -, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess]
[), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE]
[-, widthExcess, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift]
[), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,]
[,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0]
[[, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[+, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[,, 0, ,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;]
[,, heightExcess, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (]
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +]
[,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ]]
[,, iHeight, -, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2]
[,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess]
[-, heightExcess, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0]
[,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess]
[), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0]
[;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth]
[,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth]
[[, index, +, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,]
[], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[+, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -]
[+, blockColumns, +, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[+, 1, ], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -]
[], ,, width2, ,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,]
[,, 0, ,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess]
[,, heightExcess, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;]
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else]
[,, widthExcess, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks]
[,, jWidth, ,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index]
[,, iHeight, -, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[-, heightExcess, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,]
[-, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,]
[;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +]
[,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0]
[[, index, ], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, rowsShift, ,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, BLOCK_SIZE, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width]
[+, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ]]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width]
[,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0]
[,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess]
[,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift]
[), ;, copyBlockPart, (, blocks, [, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth]
[;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +]
[,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess]
[[, index, +, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -]
[+, blockColumns, ], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -]
[,, 0, ,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0]
[,, heightExcess, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;]
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }]
[,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >]
[+, columnsShift, ,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (]
[,, outBlock, ,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >]
[,, jWidth, ,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, )]
[,, iHeight, -, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final]
[,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth]
[-, heightExcess, ,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2]
[,, 0, ), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth]
[), ;, }, }, else, {, if, (, widthExcess, >, 0, ), {, final, int, width2, =, blockWidth, (, qBlock]
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[>, 0, ), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index]
[), {, final, int, width2, =, blockWidth, (, qBlock, +, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,]
[;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,]
[), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE]
[+, 1, ), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift]
[), ;, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE]
[;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,]
[,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0]
[[, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,]
[], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, iHeight, +, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (]
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[+, rowsShift, ,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, []
[,, columnsShift, ,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +]
[,, BLOCK_SIZE, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ]]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2]
[,, jWidth, ,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift]
[,, 0, ,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight]
[,, 0, ), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift]
[), ;, copyBlockPart, (, blocks, [, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0]
[;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift]
[,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth]
[[, index, +, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,]
[], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[+, 1, ], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,]
[], ,, width2, ,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,]
[,, rowsShift, ,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess]
[,, iHeight, +, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;]
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart]
[+, rowsShift, ,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else]
[,, 0, ,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart]
[,, widthExcess, ,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks]
[,, outBlock, ,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index]
[,, jWidth, ,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,]
[,, 0, ,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,]
[,, jWidth, -, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,]
[-, widthExcess, ), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +]
[), ;, }, else, {, copyBlockPart, (, blocks, [, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,]
[;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return, out, ;, }, private, void, copyBlockPart, (, final]
[,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0]
[[, index, ], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,]
[], ,, width, ,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,]
[,, rowsShift, ,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0]
[,, iHeight, +, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;]
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock]
[+, rowsShift, ,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }]
[,, columnsShift, ,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock]
[,, jWidth, +, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }]
[+, columnsShift, ,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock]
[,, outBlock, ,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }]
[,, jWidth, ,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return, out]
[,, 0, ,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return, out, ;, }]
[,, 0, ), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return, out, ;, }, private, void]
[), ;, }, }, ++, qBlock, ;, }, ++, pBlock, ;, }, return, out, ;, }, private, void, copyBlockPart, (]
[;, }, ++, pBlock, ;, }, return, out, ;, }, private, void, copyBlockPart, (, final, T, [, ], srcBlock, ,]
[;, }, ++, pBlock, ;, }, return, out, ;, }, private, void, copyBlockPart, (, final, T, [, ], srcBlock, ,]
[;, }, return, out, ;, }, private, void, copyBlockPart, (, final, T, [, ], srcBlock, ,, final, int, srcWidth, ,]
[;, }, return, out, ;, }, private, void, copyBlockPart, (, final, T, [, ], srcBlock, ,, final, int, srcWidth, ,]
[;, }, private, void, copyBlockPart, (, final, T, [, ], srcBlock, ,, final, int, srcWidth, ,, final, int, srcStartRow, ,]
[;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for]
[-, srcStartColumn, ;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn]
[;, int, srcPos, =, srcStartRow, *, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for]
[;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow]
[+, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow]
[*, srcWidth, +, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow]
[+, srcStartColumn, ;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow]
[;, int, dstPos, =, dstStartRow, *, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow]
[;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (]
[+, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, .]
[*, dstWidth, +, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {]
[+, dstStartColumn, ;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, .]
[;, for, (, int, srcRow, =, srcStartRow, ;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (]
[;, srcRow, <, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos]
[;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;]
[<, srcEndRow, ;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length]
[;, ++, srcRow, ), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;]
[), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth]
[), {, System, ., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth]
[;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (, final, T, []
[., arraycopy, (, srcBlock, ,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=]
[,, srcPos, ,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }]
[,, dstBlock, ,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override]
[,, dstPos, ,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void]
[,, length, ), ;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (]
[), ;, srcPos, +=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (, final, T]
[+=, srcWidth, ;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (, final, T, [, ], []
[;, dstPos, +=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix]
[+=, dstWidth, ;, }, }, @, Override, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final]
[;, }, }, @, Override, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final, int, row]
[;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {, throw]
[., checkNotNull, (, subMatrix, ), ;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength]
[), ;, final, int, refLength, =, subMatrix, [, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {]
[;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int]
[., length, ;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, refLength, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, .]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, .]
[;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +]
[), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column]
[., AT_LEAST_ONE_COLUMN, ), ;, }, final, int, endRow, =, row, +, subMatrix, ., length, -, 1, ;, final, int, endColumn]
[;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn]
[-, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column]
[+, subMatrix, ., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row]
[-, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column]
[., length, -, 1, ;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow]
[;, final, int, endColumn, =, column, +, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn]
[;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :]
[-, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ]]
[+, refLength, -, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T]
[-, 1, ;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ]]
[;, checkSubMatrixIndex, (, row, ,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :]
[;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength, )]
[,, endRow, ,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if]
[,, column, ,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow]
[,, endColumn, ), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length]
[), ;, for, (, final, T, [, ], subRow, :, subMatrix, ), {, if, (, subRow, ., length, !=, refLength]
[), {, if, (, subRow, ., length, !=, refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length]
[), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row]
[!=, refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow]
[., length, !=, refLength, ), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final]
[), {, throw, new, DimensionMismatchException, (, refLength, ,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row]
[;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, )]
[,, subRow, ., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =]
[), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE]
[., length, ), ;, }, }, final, int, blockStartRow, =, row, /, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow]
[;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column]
[;, final, int, blockEndRow, =, (, endRow, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE]
[;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, )]
[), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE]
[+, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn]
[), /, BLOCK_SIZE, ;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE]
[;, final, int, blockStartColumn, =, column, /, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE]
[;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;]
[/, BLOCK_SIZE, ;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =]
[;, final, int, blockEndColumn, =, (, endColumn, +, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;]
[;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =]
[/, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int]
[), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final]
[+, BLOCK_SIZE, ), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, )]
[), /, BLOCK_SIZE, ;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final]
[;, for, (, int, iBlock, =, blockStartRow, ;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =]
[;, iBlock, <, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *]
[<, blockEndRow, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow]
[), ;, final, int, firstRow, =, iBlock, *, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,]
[;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =]
[;, final, int, iStart, =, FastMath, ., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, .]
[;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (]
[., max, (, row, ,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,]
[,, firstRow, ), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, )]
[), ;, final, int, iEnd, =, FastMath, ., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for]
[;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =]
[., min, (, endRow, +, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock]
[,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, )]
[+, 1, ,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++]
[,, firstRow, +, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, )]
[), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth]
[+, iHeight, ), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final]
[), ;, for, (, int, jBlock, =, blockStartColumn, ;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth]
[;, jBlock, <, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *]
[<, blockEndColumn, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn]
[), ;, final, int, firstColumn, =, jBlock, *, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,]
[;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =]
[;, final, int, jStart, =, FastMath, ., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, .]
[;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final, int]
[., max, (, column, ,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,]
[,, firstColumn, ), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, )]
[), ;, final, int, jEnd, =, FastMath, ., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final]
[;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[., min, (, endColumn, +, 1, ,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;]
[,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =]
[+, 1, ,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ]]
[,, firstColumn, +, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =]
[), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[+, jWidth, ), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, []
[), ;, final, int, jLength, =, jEnd, -, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[-, jStart, ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++]
[], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy]
[+, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System]
[], ;, for, (, int, i, =, iStart, ;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy]
[;, i, <, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,]
[;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,]
[<, iEnd, ;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -]
[;, ++, i, ), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,]
[), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (]
[), {, System, ., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (]
[;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException]
[., arraycopy, (, subMatrix, [, i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow]
[,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, )]
[[, i, -, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +]
[], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn]
[-, row, ], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart]
[], ,, jStart, -, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn]
[,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;]
[-, column, ,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength]
[,, block, ,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;]
[,, (, i, -, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }]
[,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row]
[+, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T]
[*, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix]
[), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public]
[-, firstRow, ), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @]
[), *, jWidth, +, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public]
[+, (, jStart, -, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T]
[,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row]
[), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int]
[-, firstColumn, ), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (]
[), ,, jLength, ), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int]
[), ;, }, }, }, }, @, Override, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, 1]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int]
[,, 1, ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0]
[/, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[-, iBlock, *, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[*, BLOCK_SIZE, ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, .]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[[, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[., blocks, [, outBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ]]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available]
[;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, .]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (]
[], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System]
[+, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, )]
[*, blockColumns, +, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >]
[+, jBlock, ], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, )]
[], ;, final, int, available, =, outBlock, ., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[-, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[., length, -, outIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock]
[>, available, ), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, )]
[), {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock]
[;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, .]
[,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex]
[,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, .]
[*, jWidth, ,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;]
[,, outBlock, ,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, .]
[,, outIndex, ,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (]
[,, available, ), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,]
[), ;, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *]
[=, out, ., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;]
[[, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth]
[., blocks, [, ++, outBlockIndex, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, )]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, )]
[;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =]
[,, iRow, *, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;]
[,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System]
[*, jWidth, ,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else]
[,, outBlock, ,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System]
[,, 0, ,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy]
[,, jWidth, -, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block]
[), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth]
[-, available, ), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow]
[), ;, outIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth]
[=, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,]
[;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, )]
[-, available, ;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,]
[;, }, else, {, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, )]
[;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override, public, void, setRowMatrix, (, final, int, row]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;]
[,, iRow, *, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out]
[,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override]
[*, jWidth, ,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }]
[,, outBlock, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override]
[,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override, public, void]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override, public, void, setRowMatrix, (]
[), ;, outIndex, +=, jWidth, ;, }, }, return, out, ;, }, @, Override, public, void, setRowMatrix, (, final, int]
[+=, jWidth, ;, }, }, return, out, ;, }, @, Override, public, void, setRowMatrix, (, final, int, row, ,, final]
[;, }, }, return, out, ;, }, @, Override, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <]
[;, }, @, Override, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T, >, matrix, ), throws]
[;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix, (, row, ,, matrix, ), ;, }, }, public]
[,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix, (, row, ,, matrix, ), ;, }, }]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowMatrix, (, row, ,, matrix, ), ;, }, }]
[;, }, }, public, void, setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException]
[., setRowMatrix, (, row, ,, matrix, ), ;, }, }, public, void, setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix]
[,, matrix, ), ;, }, }, public, void, setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix, <, T, >, matrix]
[), ;, }, }, public, void, setRowMatrix, (, final, int, row, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, )]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[!=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;]
[,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock]
[,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row]
[., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final]
[,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock]
[), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0]
[/, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[-, iBlock, *, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[*, BLOCK_SIZE, ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, .]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[[, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[., blocks, [, mBlockIndex, ], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[], ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ]]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available]
[;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System, .]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (]
[], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System]
[+, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, )]
[*, blockColumns, +, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >]
[+, jBlock, ], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, )]
[], ;, final, int, available, =, mBlock, ., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *]
[-, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[., length, -, mIndex, ;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,]
[;, if, (, jWidth, >, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *]
[), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock]
[>, available, ), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, )]
[), {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock]
[;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block]
[., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, .]
[,, mIndex, ,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex]
[,, block, ,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;]
[,, iRow, *, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, .]
[,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,]
[*, jWidth, ,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (]
[,, available, ), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,]
[), ;, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,]
[=, matrix, ., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow]
[;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;]
[[, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth]
[., blocks, [, ++, mBlockIndex, ], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth]
[], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, )]
[], ;, System, ., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, )]
[;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,]
[., arraycopy, (, mBlock, ,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =]
[,, 0, ,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;]
[,, block, ,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else]
[,, iRow, *, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System]
[,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock]
[*, jWidth, ,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy]
[,, jWidth, -, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock]
[), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block]
[-, available, ), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex]
[), ;, mIndex, =, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block]
[=, jWidth, -, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *]
[;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, )]
[-, available, ;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,]
[;, }, else, {, System, ., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, )]
[;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column]
[., arraycopy, (, mBlock, ,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, mIndex, +=, jWidth, ;]
[,, mIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @]
[,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public]
[,, iRow, *, jWidth, ,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <]
[,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (]
[*, jWidth, ,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >]
[,, jWidth, ), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (]
[), ;, mIndex, +=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int]
[+=, jWidth, ;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws]
[;, }, }, }, @, Override, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows, ,]
[), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, rows]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final]
[,, rows, ,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -]
[,, 1, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[/, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;]
[-, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;]
[;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, []
[), ;, int, outBlockIndex, =, 0, ;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks]
[;, int, outIndex, =, 0, ;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (]
[;, T, [, ], outBlock, =, out, ., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[[, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[., blocks, [, outBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ]]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =]
[;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, []
[<, iHeight, ;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, .]
[;, ++, i, ), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, []
[), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ]]
[), {, if, (, outIndex, >=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ]]
[), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex]
[>=, outBlock, ., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;]
[), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex]
[., length, ), {, outBlock, =, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock]
[=, out, ., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =]
[;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ]]
[[, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *]
[., blocks, [, ++, outBlockIndex, ], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, []
[], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn]
[], ;, outIndex, =, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn]
[=, 0, ;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }]
[;, }, outBlock, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[=, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void]
[[, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }]
[], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public]
[++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override]
[;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <]
[[, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (]
[], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix]
[+, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,]
[*, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int]
[+, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,]
[], ;, }, }, return, out, ;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix]
[;, }, @, Override, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T, >, matrix, ), throws]
[;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix, (, column, ,, matrix, ), ;, }, }, void]
[,, (, BlockFieldMatrix, <, T, >, ), matrix, ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix, (, column, ,, matrix, ), ;, }, }]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnMatrix, (, column, ,, matrix, ), ;, }, }]
[;, }, }, void, setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException, ,]
[., setColumnMatrix, (, column, ,, matrix, ), ;, }, }, void, setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <]
[,, matrix, ), ;, }, }, void, setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <, T, >, matrix, )]
[), ;, }, }, void, setColumnMatrix, (, final, int, column, ,, final, BlockFieldMatrix, <, T, >, matrix, ), throws, MatrixDimensionMismatchException]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, )]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[!=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;]
[,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock]
[,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column]
[., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final]
[,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock]
[), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[/, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;]
[-, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;]
[;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, []
[), ;, int, mBlockIndex, =, 0, ;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks]
[;, int, mIndex, =, 0, ;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (]
[;, T, [, ], mBlock, =, matrix, ., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[[, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[., blocks, [, mBlockIndex, ], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[], ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ]]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex]
[;, i, <, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =]
[;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, []
[<, iHeight, ;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, .]
[;, ++, i, ), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, []
[), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ]]
[), {, if, (, mIndex, >=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ]]
[), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i]
[>=, mBlock, ., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;]
[), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i]
[., length, ), {, mBlock, =, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block]
[=, matrix, ., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +]
[;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++, ]]
[[, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock]
[., blocks, [, ++, mBlockIndex, ], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ]]
[], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++]
[], ;, mIndex, =, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++]
[=, 0, ;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }]
[;, }, block, [, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }, }, }]
[=, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final]
[[, i, *, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public]
[], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (]
[+, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >]
[*, jWidth, +, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <]
[+, jColumn, ], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >]
[], =, mBlock, [, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (]
[;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {]
[[, mIndex, ++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row]
[], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException]
[++, ], ;, }, }, }, @, Override, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws]
[;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int]
[), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int]
[., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[/, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[-, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ]]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex]
[+, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, )]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,]
[+, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, )]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex]
[;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;]
[,, iRow, *, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector]
[,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (]
[*, jWidth, ,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T]
[,, outData, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (]
[,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,]
[), ;, outIndex, +=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,]
[+=, jWidth, ;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;]
[;, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;, }, @]
[;, }, @, Override, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, ), throws]
[,, outData, ,, false, ), ;, }, @, Override, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <]
[,, false, ), ;, }, @, Override, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >]
[), ;, }, @, Override, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, )]
[;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,, vector, ), ;, }, }, @]
[,, (, (, ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,, vector, ), ;, }, }]
[., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,, vector]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setRowVector, (, row, ,]
[;, }, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex]
[., setRowVector, (, row, ,, vector, ), ;, }, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final]
[,, vector, ), ;, }, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws]
[), ;, }, }, @, Override, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {]
[;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int]
[), ;, final, T, [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final]
[., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[/, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[-, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ]]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex]
[;, i, <, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth]
[;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;]
[<, iHeight, ;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn]
[;, ++, i, ), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;]
[), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[), {, outData, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[=, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField]
[[, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <]
[], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (]
[++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >]
[;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;, }]
[[, i, *, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, )]
[], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;]
[+, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false]
[*, jWidth, +, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData]
[+, jColumn, ], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false]
[], ;, }, }, return, new, ArrayFieldVector, <, T, >, (, getField, (, ), ,, outData, ,, false, ), ;]
[;, }, @, Override, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, ), throws]
[,, outData, ,, false, ), ;, }, @, Override, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <]
[,, false, ), ;, }, @, Override, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >]
[), ;, }, @, Override, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, )]
[;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,, vector, ), ;, }, }, @]
[,, (, (, ArrayFieldVector, <, T, >, ), vector, ), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException]
[), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,, vector, ), ;, }, }]
[., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,, vector]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,]
[), ., getDataRef, (, ), ), ;, }, catch, (, ClassCastException, cce, ), {, super, ., setColumnVector, (, column, ,]
[;, }, }, @, Override, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[., setColumnVector, (, column, ,, vector, ), ;, }, }, @, Override, public, T, [, ], getRow, (, final, int]
[,, vector, ), ;, }, }, @, Override, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException]
[), ;, }, }, @, Override, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex]
[;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final, int]
[), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int]
[., buildArray, (, getField, (, ), ,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int]
[,, columns, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[/, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[-, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ]]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex]
[+, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, )]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,]
[+, jBlock, ], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, )]
[], ;, System, ., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex]
[;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public, void, setRow, (, final, int, row, ,]
[., arraycopy, (, block, ,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;]
[,, iRow, *, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;]
[,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public]
[*, jWidth, ,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @]
[,, out, ,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public]
[,, outIndex, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public, void, setRow]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public, void, setRow, (, final]
[), ;, outIndex, +=, jWidth, ;, }, return, out, ;, }, @, Override, public, void, setRow, (, final, int, row]
[+=, jWidth, ;, }, return, out, ;, }, @, Override, public, void, setRow, (, final, int, row, ,, final, T]
[;, }, return, out, ;, }, @, Override, public, void, setRow, (, final, int, row, ,, final, T, [, ]]
[;, }, @, Override, public, void, setRow, (, final, int, row, ,, final, T, [, ], array, ), throws, OutOfRangeException]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw]
[;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int]
[!=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }]
[., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, )]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int]
[;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;]
[,, array, ., length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final]
[,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row]
[., length, ,, 1, ,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow]
[,, nCols, ), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock]
[), ;, }, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[/, BLOCK_SIZE, ;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (]
[;, final, int, iRow, =, row, -, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[-, iBlock, *, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[*, BLOCK_SIZE, ;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++]
[;, int, outIndex, =, 0, ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ]]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *]
[], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex]
[+, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, )]
[*, blockColumns, +, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,]
[+, jBlock, ], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, )]
[], ;, System, ., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex]
[;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, ), throws]
[., arraycopy, (, array, ,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=, jWidth, ;]
[,, outIndex, ,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override]
[,, block, ,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T]
[,, iRow, *, jWidth, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ]]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int]
[*, jWidth, ,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (]
[,, jWidth, ), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int]
[), ;, outIndex, +=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, )]
[+=, jWidth, ;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[;, }, }, @, Override, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final, int]
[), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final]
[., buildArray, (, getField, (, ), ,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[,, rows, ), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *]
[), ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[/, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[-, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ]]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex]
[;, i, <, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth]
[;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;]
[<, iHeight, ;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn]
[;, ++, i, ), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;]
[), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[), {, out, [, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return]
[=, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void]
[[, outIndex, ++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }]
[], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public]
[++, ], =, block, [, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override]
[;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int, column, ,, final, T, []
[[, i, *, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (]
[], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int, column, ,, final, T]
[+, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int, column, ,]
[*, jWidth, +, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int]
[+, jColumn, ], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int, column, ,]
[], ;, }, }, return, out, ;, }, @, Override, public, void, setColumn, (, final, int, column, ,, final, T]
[;, }, @, Override, public, void, setColumn, (, final, int, column, ,, final, T, [, ], array, ), throws, MatrixDimensionMismatchException]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw]
[;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int]
[!=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }]
[., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, )]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int]
[;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;]
[,, 1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn]
[., length, ,, 1, ,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final]
[,, nRows, ,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column]
[,, 1, ), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock]
[), ;, }, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[/, BLOCK_SIZE, ;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock]
[;, final, int, jColumn, =, column, -, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[-, jBlock, *, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[*, BLOCK_SIZE, ;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int]
[;, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =]
[;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), ;, int, outIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[<, blockRows, ;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ]]
[;, ++, iBlock, ), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), {, final, int, iHeight, =, blockHeight, (, iBlock, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block]
[*, blockColumns, +, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, )]
[+, jBlock, ], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block]
[], ;, for, (, int, i, =, 0, ;, i, <, iHeight, ;, ++, i, ), {, block, [, i]
[;, i, <, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, []
[;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;]
[<, iHeight, ;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++]
[;, ++, i, ), {, block, [, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;]
[), {, block, [, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }]
[), {, block, [, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }]
[=, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row, ,]
[[, i, *, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public]
[], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row]
[+, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final]
[*, jWidth, +, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry]
[+, jColumn, ], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final]
[], =, array, [, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row]
[;, }, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException]
[[, outIndex, ++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int]
[], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws]
[++, ], ;, }, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, )]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *]
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, []
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k]
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], []
[;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry]
[), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void]
[-, jBlock, *, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }]
[), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void]
[*, BLOCK_SIZE, ), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override]
[), ;, return, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, )]
[[, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final]
[[, iBlock, *, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int]
[], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,]
[+, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int]
[*, blockColumns, +, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,]
[+, jBlock, ], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int]
[], [, k, ], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,]
[], ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ]]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns]
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ]]
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k]
[;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void]
[), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public]
[-, jBlock, *, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;]
[), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public]
[*, BLOCK_SIZE, ), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @]
[), ;, blocks, [, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public]
[=, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T]
[[, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column]
[[, iBlock, *, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (]
[], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int]
[+, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,]
[*, blockColumns, +, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int]
[+, jBlock, ], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,]
[], [, k, ], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int]
[], =, value, ;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final]
[;, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, )]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ]]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, []
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns]
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *]
[;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ]]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[-, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[*, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override, public]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (]
[], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override]
[+, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }]
[*, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, )]
[+, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }]
[], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override]
[=, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int]
[[, k, ], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry]
[], =, blockIJ, [, k, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final]
[;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, )]
[., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column]
[[, k, ], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,]
[], ., add, (, increment, ), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int]
[), ;, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor]
[;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /]
[), ;, checkColumnIndex, (, column, ), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column]
[;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k]
[), ;, final, int, iBlock, =, row, /, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[/, BLOCK_SIZE, ;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *]
[;, final, int, jBlock, =, column, /, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, )]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[/, BLOCK_SIZE, ;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +]
[;, final, int, k, =, (, row, -, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column]
[;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ]]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns]
[*, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[-, iBlock, *, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final]
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[*, BLOCK_SIZE, ), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, []
[), *, blockWidth, (, jBlock, ), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ]
[+, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns]
[), +, (, column, -, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *]
[;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ]]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[-, jBlock, *, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[*, BLOCK_SIZE, ), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ]
[), ;, final, T, [, ], blockIJ, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k]
[;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override, public]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (]
[], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override]
[+, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }]
[*, blockColumns, +, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, )]
[+, jBlock, ], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }]
[], ;, blockIJ, [, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override]
[=, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose]
[[, k, ], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <]
[], =, blockIJ, [, k, ], ., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >]
[;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, ), {, final, int, nRows, =, getRowDimension, (, )]
[., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, ), {, final, int]
[[, k, ], ., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, )]
[], ., multiply, (, factor, ), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, ), {, final]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, transpose, (, ), {, final, int, nRows, =, getRowDimension, (]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T]
[;, final, BlockFieldMatrix, <, T, >, out, =, new, BlockFieldMatrix, <, T, >, (, getField, (, ), ,, nCols, ,]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, )]
[,, nCols, ,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[,, nRows, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock]
[;, iBlock, <, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {]
[<, blockColumns, ;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock]
[;, ++, iBlock, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, []
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, []
[;, jBlock, <, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[<, blockRows, ;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;]
[;, ++, jBlock, ), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[), {, final, T, [, ], outBlock, =, out, ., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock]
[;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =]
[[, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final]
[., blocks, [, blockIndex, ], ;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ]]
[], ;, final, T, [, ], tBlock, =, blocks, [, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart]
[;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE]
[[, jBlock, *, blockColumns, +, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[+, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[*, blockColumns, +, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, .]
[+, iBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[., min, (, pStart, +, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int]
[,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[+, BLOCK_SIZE, ,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, .]
[,, columns, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[., min, (, qStart, +, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, BLOCK_SIZE, ,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, rows, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =]
[;, p, <, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =]
[;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;]
[<, pEnd, ;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -]
[;, ++, p, ), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;]
[), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int]
[), {, final, int, lInc, =, pEnd, -, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int]
[;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[-, pStart, ;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[;, int, l, =, p, -, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ]]
[-, pStart, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, []
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ]]
[;, q, <, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=]
[<, qEnd, ;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;]
[;, ++, q, ), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=]
[), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }]
[), {, outBlock, [, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }]
[=, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }]
[[, k, ], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex]
[], =, tBlock, [, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }]
[;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @]
[[, l, ], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out]
[], ;, ++, k, ;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }]
[;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, int]
[;, l, +=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, int]
[+=, lInc, ;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, int, getRowDimension, (]
[;, }, }, ++, blockIndex, ;, }, }, return, out, ;, }, @, Override, public, int, getRowDimension, (, ), {]
[;, }, }, return, out, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @]
[;, }, }, return, out, ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @]
[;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, int, getColumnDimension, (]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, @, Override, public, T, [, ]]
[;, }, @, Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ], out, =]
[!=, columns, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ]]
[., length, !=, columns, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, columns, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;, final]
[,, columns, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows]
[., length, ,, columns, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, )]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, rows, ), ;]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;]
[., buildArray, (, getField, (, ), ,, rows, ), ;, final, T, zero, =, getField, (, ), ., getZero, (]
[,, rows, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock]
[), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, iBlock, =, 0]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[., getZero, (, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ]]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, []
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[<, blockColumns, ;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock]
[;, ++, jBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart]
[), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =]
[], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[+, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[*, blockColumns, +, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, .]
[+, jBlock, ], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (]
[], ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <]
[,, columns, ), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[), ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, T, sum, =, zero]
[;, p, <, pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while]
[;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd]
[<, pEnd, ;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q]
[;, ++, p, ), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd]
[), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, )]
[), {, T, sum, =, zero, ;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, )]
[;, int, q, =, qStart, ;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add]
[;, while, (, q, <, qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ]]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], )]
[<, qEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], )]
[-, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], )]
[=, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add]
[;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum]
[., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], ), )]
[., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), )]
[., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), )]
[., add, (, block, [, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (, block]
[), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], )]
[., multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply]
[[, k, ], ., multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +, 1]
[], ., multiply, (, v, [, q, ], ), ), ., add, (, block, [, k, +, 1, ], .]
[), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ]]
[[, q, ], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q]
[], ), ), ., add, (, block, [, k, +, 1, ], ., multiply, (, v, [, q, +, 1]
[), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], )]
[., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ]]
[[, k, +, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block]
[], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2]
[+, 1, ], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, [, k]
[], ., multiply, (, v, [, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2]
[), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ]]
[[, q, +, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v]
[], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2]
[+, 1, ], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q]
[], ), ), ., add, (, block, [, k, +, 2, ], ., multiply, (, v, [, q, +, 2]
[), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], )]
[., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ]]
[[, k, +, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block]
[], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3]
[+, 2, ], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, [, k]
[], ., multiply, (, v, [, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3]
[), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ]]
[[, q, +, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v]
[], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3]
[+, 2, ], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q]
[], ), ), ., add, (, block, [, k, +, 3, ], ., multiply, (, v, [, q, +, 3]
[), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =]
[., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;]
[[, k, +, 3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4]
[], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4]
[+, 3, ], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q]
[], ., multiply, (, v, [, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4]
[), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum]
[[, q, +, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q]
[], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {]
[+, 3, ], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd]
[], ), ), ;, k, +=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {]
[+=, 4, ;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add]
[;, q, +=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (, block]
[+=, 4, ;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, [, k]
[;, }, while, (, q, <, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ]]
[), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++]
[<, qEnd, ), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, []
[), {, sum, =, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++]
[=, sum, ., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++, ], ), )]
[;, }, out, [, p, ], =, out, [, p, ], ., add, (, sum, ), ;, }, }, }]
[., add, (, block, [, k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }]
[), ;, }, out, [, p, ], =, out, [, p, ], ., add, (, sum, ), ;, }, }]
[., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =, out, [, p]
[[, k, ++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ]]
[], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =, out, []
[++, ], ., multiply, (, v, [, q, ++, ], ), ), ;, }, out, [, p, ], =, out]
[), ), ;, }, out, [, p, ], =, out, [, p, ], ., add, (, sum, ), ;, }]
[[, q, ++, ], ), ), ;, }, out, [, p, ], =, out, [, p, ], ., add, (]
[], ), ), ;, }, out, [, p, ], =, out, [, p, ], ., add, (, sum, ), ;]
[++, ], ), ), ;, }, out, [, p, ], =, out, [, p, ], ., add, (, sum, )]
[=, out, [, p, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override]
[[, p, ], =, out, [, p, ], ., add, (, sum, ), ;, }, }, }, return, out, ;]
[], =, out, [, p, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @]
[;, }, }, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final, T, [, ]]
[., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply]
[[, p, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T]
[], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T, [, ]]
[), ;, }, }, }, return, out, ;, }, @, Override, public, T, [, ], preMultiply, (, final, T, []
[;, }, @, Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, if]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ], out, =]
[!=, rows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ]]
[., length, !=, rows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, rows, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;, final]
[,, rows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns]
[., length, ,, rows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, )]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, columns, ), ;]
[;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;]
[., buildArray, (, getField, (, ), ,, columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (]
[,, columns, ), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock]
[), ;, final, T, zero, =, getField, (, ), ., getZero, (, ), ;, for, (, int, jBlock, =, 0]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =]
[., getZero, (, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final]
[;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4]
[), ;, final, int, jWidth2, =, jWidth, +, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int]
[;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart]
[+, jWidth, ;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final]
[;, final, int, jWidth3, =, jWidth2, +, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart]
[;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[+, jWidth, ;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, jWidth4, =, jWidth3, +, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[+, jWidth, ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ]]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[+, BLOCK_SIZE, ,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[,, columns, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, []
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[<, blockRows, ;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock]
[;, ++, iBlock, ), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;]
[), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart]
[), {, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart]
[;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[+, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[*, blockColumns, +, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, .]
[+, jBlock, ], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (]
[], ;, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =, q]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, )]
[,, rows, ), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int]
[), ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, int, k, =]
[;, q, <, qEnd, ;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =, zero]
[;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =]
[<, qEnd, ;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int]
[;, ++, q, ), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =]
[), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while]
[), {, int, k, =, q, -, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while]
[;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {]
[-, qStart, ;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3]
[;, T, sum, =, zero, ;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {]
[;, int, p, =, pStart, ;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add]
[;, while, (, p, <, pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ]]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], )]
[<, pEnd, -, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], )]
[-, 3, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], )]
[=, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add]
[;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum]
[., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), )]
[., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), )]
[., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), )]
[., add, (, block, [, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (, block]
[), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], )]
[., multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply]
[[, k, ], ., multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth]
[], ., multiply, (, v, [, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], .]
[), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ]]
[[, p, ], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p]
[], ), ), ., add, (, block, [, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1]
[), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], )]
[., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ]]
[[, k, +, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block]
[], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2]
[+, jWidth, ], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, [, k]
[], ., multiply, (, v, [, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2]
[), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ]]
[[, p, +, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v]
[], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2]
[+, 1, ], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p]
[], ), ), ., add, (, block, [, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2]
[), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], )]
[., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ]]
[[, k, +, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block]
[], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3]
[+, jWidth2, ], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, [, k]
[], ., multiply, (, v, [, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3]
[), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ]]
[[, p, +, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v]
[], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3]
[+, 2, ], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p]
[], ), ), ., add, (, block, [, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3]
[), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =]
[., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;]
[[, k, +, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4]
[], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4]
[+, jWidth3, ], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p]
[], ., multiply, (, v, [, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4]
[), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum]
[[, p, +, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p]
[], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {]
[+, 3, ], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd]
[], ), ), ;, k, +=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {]
[+=, jWidth4, ;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add]
[;, p, +=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block]
[+=, 4, ;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k]
[;, }, while, (, p, <, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], .]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ]]
[<, pEnd, ), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p]
[), {, sum, =, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ]]
[=, sum, ., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;]
[;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add, (, sum, )]
[., add, (, block, [, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=]
[), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add, (, sum]
[., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ]]
[[, k, ], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out]
[], ., multiply, (, v, [, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q]
[), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add, (]
[[, p, ++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q]
[], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add]
[++, ], ), ), ;, k, +=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], .]
[+=, jWidth, ;, }, out, [, q, ], =, out, [, q, ], ., add, (, sum, ), ;, }]
[;, }, out, [, q, ], =, out, [, q, ], ., add, (, sum, ), ;, }, }, }]
[=, out, [, q, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override]
[[, q, ], =, out, [, q, ], ., add, (, sum, ), ;, }, }, }, return, out, ;]
[], =, out, [, q, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @]
[;, }, }, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor]
[., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final]
[[, q, ], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T]
[], ., add, (, sum, ), ;, }, }, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (]
[), ;, }, }, }, return, out, ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart]
[-, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd]
[,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock]
[;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[*, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[*, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block]
[-, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, )]
[), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[=, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[[, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k]
[], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart]
[-, 1, ), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final]
[), ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd]
[,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[,, rows, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;]
[;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock]
[;, ++, p, ), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[), {, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE]
[), ;, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[*, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int]
[+, jBlock, ], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =]
[], ;, int, k, =, (, p, -, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[*, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, .]
[), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor]
[-, pStart, ), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, )]
[), *, jWidth, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[<, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for]
[;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock]
[., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock]
[,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1]
[,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow]
[,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[<, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[+, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[/, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow]
[., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock]
[., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p]
[,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[+, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[/, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[<, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[+, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn]
[., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ]]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[+, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart]
[], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[+, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for]
[*, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0]
[+, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for]
[], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[*, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[-, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[=, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[[, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k]
[], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for]
[;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock]
[., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock]
[,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1]
[,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow]
[,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[<, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[+, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[/, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow]
[., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock]
[., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p]
[,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[,, 1, +, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[+, endRow, ), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for]
[), ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[<, pEnd, ;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +]
[;, ++, p, ), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[), {, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[/, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[<, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[+, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn]
[., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (]
[., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ]]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[+, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =]
[;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart]
[], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[+, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for]
[*, blockColumns, +, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0]
[+, jBlock, ], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for]
[], ;, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, .]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[*, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[-, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, .]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[<, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ]]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;]
[), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[[, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[=, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[[, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k]
[], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, .]
[), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }]
[[, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (]
[], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, visitor, ., start, (]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {]
[;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, )]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =]
[,, 0, ,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;]
[,, columns, -, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[-, 1, ), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;]
[), ;, int, blockIndex, =, 0, ;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock]
[;, for, (, int, iBlock, =, 0, ;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =]
[;, iBlock, <, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[<, blockRows, ;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath]
[;, ++, iBlock, ), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[), {, final, int, pStart, =, iBlock, *, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[*, BLOCK_SIZE, ;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (]
[;, final, int, pEnd, =, FastMath, ., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock]
[;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =]
[., min, (, pStart, +, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[+, BLOCK_SIZE, ,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, )]
[,, rows, ), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final]
[), ;, for, (, int, jBlock, =, 0, ;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart]
[;, jBlock, <, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[<, blockColumns, ;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath]
[;, ++, jBlock, ), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[), {, final, int, qStart, =, jBlock, *, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[*, BLOCK_SIZE, ;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T]
[;, final, int, qEnd, =, FastMath, ., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ]]
[;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (, int]
[., min, (, qStart, +, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ]]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;]
[+, BLOCK_SIZE, ,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =]
[,, columns, ), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;]
[), ;, final, T, [, ], block, =, blocks, [, blockIndex, ], ;, int, k, =, 0, ;, for, (]
[;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[[, blockIndex, ], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;]
[], ;, int, k, =, 0, ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q]
[;, p, <, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[<, pEnd, ;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[;, ++, p, ), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit]
[), {, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit]
[;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[<, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, .]
[), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }]
[[, k, ], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (]
[], ), ;, ++, k, ;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[;, }, }, ++, blockIndex, ;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for]
[;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock]
[., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock]
[,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1]
[,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow]
[,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[<, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[+, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[/, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow]
[., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock]
[., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock]
[,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[+, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[/, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[<, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[+, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn]
[., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p]
[., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ]]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[+, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[+, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int]
[*, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[+, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +]
[;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;]
[<, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;]
[), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[*, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[-, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, []
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ]]
[;, q, <, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[<, qEnd, ;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,]
[;, ++, q, ), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, []
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[), {, block, [, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[=, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }]
[[, k, ], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k]
[], =, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final]
[;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final]
[., end, (, ), ;, }, @, Override, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final]
[;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,]
[,, endColumn, ), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[), ;, visitor, ., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for]
[;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock]
[., start, (, rows, ,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock]
[,, columns, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1]
[,, startColumn, ,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow]
[,, endColumn, ), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE]
[), ;, for, (, int, iBlock, =, startRow, /, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[/, BLOCK_SIZE, ;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock]
[;, iBlock, <, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[<, 1, +, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[+, endRow, /, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[/, BLOCK_SIZE, ;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath]
[;, ++, iBlock, ), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[), {, final, int, p0, =, iBlock, *, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =]
[;, final, int, pStart, =, FastMath, ., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, .]
[;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow]
[., max, (, startRow, ,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1]
[,, p0, ), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, pEnd, =, FastMath, ., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock]
[., min, (, (, iBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock]
[,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn]
[*, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;]
[), *, BLOCK_SIZE, ,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <]
[,, 1, +, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[+, endRow, ), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE]
[), ;, for, (, int, jBlock, =, startColumn, /, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[/, BLOCK_SIZE, ;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth]
[;, jBlock, <, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[<, 1, +, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[+, endColumn, /, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[/, BLOCK_SIZE, ;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =]
[;, ++, jBlock, ), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[), {, final, int, jWidth, =, blockWidth, (, jBlock, ), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final]
[;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0]
[), ;, final, int, q0, =, jBlock, *, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[*, BLOCK_SIZE, ;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =]
[;, final, int, qStart, =, FastMath, ., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, .]
[;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn]
[., max, (, startColumn, ,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1]
[,, q0, ), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,]
[), ;, final, int, qEnd, =, FastMath, ., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +]
[;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p]
[., min, (, (, jBlock, +, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ]]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[*, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[+, 1, ), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock]
[), *, BLOCK_SIZE, ,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns]
[,, 1, +, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ]]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[+, endColumn, ), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for]
[), ;, final, T, [, ], block, =, blocks, [, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int]
[;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (]
[[, iBlock, *, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[+, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int]
[*, blockColumns, +, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, )]
[+, jBlock, ], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int]
[], ;, for, (, int, p, =, pStart, ;, p, <, pEnd, ;, ++, p, ), {, int, k, =]
[;, p, <, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +]
[;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;]
[<, pEnd, ;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -]
[;, ++, p, ), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;]
[), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[), {, int, k, =, (, p, -, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, .]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[*, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[-, p0, ), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd]
[), *, jWidth, +, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++]
[+, qStart, -, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {]
[-, q0, ;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, .]
[;, for, (, int, q, =, qStart, ;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (]
[;, q, <, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[<, qEnd, ;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], )]
[;, ++, q, ), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[), {, visitor, ., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }]
[;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (]
[., visit, (, p, ,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }]
[,, q, ,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end]
[,, block, [, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, )]
[), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight]
[[, k, ], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }]
[], ), ;, ++, k, ;, }, }, }, }, return, visitor, ., end, (, ), ;, }, private, int]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow]
[;, }, }, }, }, return, visitor, ., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow]
[;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows, -, 1, ), ?]
[., end, (, ), ;, }, private, int, blockHeight, (, final, int, blockRow, ), {, return, (, blockRow, ==, blockRows]
[;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?]
[?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return]
[), ?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {]
[==, blockRows, -, 1, ), ?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final]
[), ?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {]
[-, 1, ), ?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn]
[), ?, rows, -, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {]
[:, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1]
[-, blockRow, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn]
[:, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1]
[*, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns]
[:, BLOCK_SIZE, ;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1]
[;, }, private, int, blockWidth, (, final, int, blockColumn, ), {, return, (, blockColumn, ==, blockColumns, -, 1, ), ?]
[;, }, }]
[?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[), ?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[==, blockColumns, -, 1, ), ?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[), ?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[-, 1, ), ?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[), ?, columns, -, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[:, BLOCK_SIZE, ;, }, }]
[-, blockColumn, *, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[:, BLOCK_SIZE, ;, }, }]
[*, BLOCK_SIZE, :, BLOCK_SIZE, ;, }, }]
[:, BLOCK_SIZE, ;, }, }]
[;, }, }]
