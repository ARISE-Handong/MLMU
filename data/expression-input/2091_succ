[;, private, ConvergenceChecker, <, PointValuePair, >, checker, ;, private, GoalType, goal, ;, private, double, [, ], start, ;, private, double]
[), ;, }, protected, BaseAbstractMultivariateOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, ., checker, =, checker, ;, }]
[=, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int]
[., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }]
[;, }, public, int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (]
[;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, ConvergenceChecker, <, PointValuePair]
[., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }]
[;, }, public, ConvergenceChecker, <, PointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected, double, computeObjectiveValue, (, double]
[., getCount, (, ), ;, }, public, ConvergenceChecker, <, PointValuePair, >, getConvergenceChecker, (, ), {, return, checker, ;, }, protected]
[;, }, protected, double, computeObjectiveValue, (, double, [, ], point, ), {, try, {, evaluations, ., incrementCount, (, ), ;]
[;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }]
[., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (]
[;, }, return, function, ., value, (, point, ), ;, }, @, Deprecated, public, PointValuePair, optimize, (, int, maxEval, ,]
[), ;, }, return, function, ., value, (, point, ), ;, }, @, Deprecated, public, PointValuePair, optimize, (, int, maxEval]
[., getMax, (, ), ), ;, }, return, function, ., value, (, point, ), ;, }, @, Deprecated, public, PointValuePair]
[;, }, @, Deprecated, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ]]
[., value, (, point, ), ;, }, @, Deprecated, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType]
[), ;, }, @, Deprecated, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, []
[;, }, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {]
[,, f, ,, goalType, ,, new, InitialGuess, (, startPoint, ), ), ;, }, public, PointValuePair, optimize, (, int, maxEval, ,]
[,, goalType, ,, new, InitialGuess, (, startPoint, ), ), ;, }, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f]
[,, new, InitialGuess, (, startPoint, ), ), ;, }, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType]
[), ;, }, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, )]
[), ), ;, }, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData]
[;, }, @, Deprecated, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ]]
[,, f, ,, goalType, ,, optData, ), ;, }, @, Deprecated, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f]
[,, goalType, ,, optData, ), ;, }, @, Deprecated, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType]
[,, optData, ), ;, }, @, Deprecated, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,]
[), ;, }, @, Deprecated, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, []
[;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws]
[,, f, ,, goalType, ,, new, InitialGuess, (, startPoint, ), ), ;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,]
[,, goalType, ,, new, InitialGuess, (, startPoint, ), ), ;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f]
[,, new, InitialGuess, (, startPoint, ), ), ;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType]
[), ;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, )]
[), ), ;, }, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData]
[;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;]
[., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;]
[), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, )]
[;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return, doOptimize]
[., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (]
[=, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return, doOptimize, (, )]
[;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return, doOptimize, (, ), ;, }]
[=, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return, doOptimize, (, ), ;, }, private, void]
[;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return, doOptimize, (, ), ;, }, private, void, parseOptimizationData, (]
[;, checkParameters, (, ), ;, return, doOptimize, (, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {]
[), ;, checkParameters, (, ), ;, return, doOptimize, (, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, )]
[;, return, doOptimize, (, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data]
[;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if]
[), {, if, (, data, instanceof, InitialGuess, ), {, start, =, (, (, InitialGuess, ), data, ), ., getInitialGuess, (]
[), {, start, =, (, (, InitialGuess, ), data, ), ., getInitialGuess, (, ), ;, continue, ;, }, if, (]
[instanceof, InitialGuess, ), {, start, =, (, (, InitialGuess, ), data, ), ., getInitialGuess, (, ), ;, continue, ;, }]
[=, (, (, InitialGuess, ), data, ), ., getInitialGuess, (, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds]
[;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;]
[., getInitialGuess, (, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (]
[), ., getInitialGuess, (, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =]
[), ., getInitialGuess, (, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =]
[), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =, bounds, ., getLower, (, ), ;, upperBound]
[instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =, bounds, ., getLower, (, )]
[;, lowerBound, =, bounds, ., getLower, (, ), ;, upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }]
[;, lowerBound, =, bounds, ., getLower, (, ), ;, upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }]
[=, bounds, ., getLower, (, ), ;, upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }, }, }]
[;, upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }, }, }, public, GoalType, getGoalType, (, ), {]
[., getLower, (, ), ;, upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }, }, }, public, GoalType]
[=, bounds, ., getUpper, (, ), ;, continue, ;, }, }, }, public, GoalType, getGoalType, (, ), {, return, goal]
[;, continue, ;, }, }, }, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, [, ]]
[., getUpper, (, ), ;, continue, ;, }, }, }, public, GoalType, getGoalType, (, ), {, return, goal, ;, }]
[;, }, public, double, [, ], getStartPoint, (, ), {, return, start, ==, null, ?, null, :, start, ., clone]
[;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?, null, :, lowerBound, ., clone]
[?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound]
[==, null, ?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {]
[?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound]
[:, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null]
[;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?, null, :, lowerBound, ., clone]
[., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?, null]
[;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?, null, :, upperBound, ., clone]
[?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound]
[==, null, ?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {]
[?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound]
[:, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null]
[;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?, null, :, upperBound, ., clone]
[., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?, null]
[;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if, (, start, !=, null]
[?, null, :, upperBound, ., clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters]
[==, null, ?, null, :, upperBound, ., clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private]
[?, null, :, upperBound, ., clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters]
[:, upperBound, ., clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, )]
[;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if, (, start, !=, null]
[., clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if]
[), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound]
[!=, null, ), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if]
[), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound]
[;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException]
[., length, ;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw]
[), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim]
[!=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length]
[), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim]
[), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0]
[!=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i]
[., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (]
[), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v]
[,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double]
[;, i, <, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, []
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, []
[), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;]
[++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, [, i, ]]
[;, final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException]
[[, i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {]
[], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw, new]
[;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }]
[[, i, ], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true]
[], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=]
[<, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (]
[), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=]
[;, }, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=, dim, ), {]
[,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, .]
[,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=]
[), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=, dim, )]
[), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim]
[!=, null, ), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length]
[), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim]
[), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0]
[!=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i]
[., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (]
[), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v]
[,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double]
[;, i, <, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, []
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, []
[), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, [, i, ], ;]
[++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, [, i, ]]
[;, final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException]
[[, i, ], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {]
[], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw, new]
[;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }]
[[, i, ], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true]
[], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==]
[>, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==]
[;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim, ], ;, for]
[,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double]
[,, true, ), ;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim]
[), ;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim, ], ;]
[), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim]
[==, null, ), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i]
[), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim]
[=, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, lowerBound, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, lowerBound, [, i]
[;, i, <, dim, ;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }]
[;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==]
[<, dim, ;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (]
[;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==]
[), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {]
[++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, )]
[=, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new, double, [, dim]
[[, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new]
[], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new, double, []
[;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (]
[., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new, double, [, dim, ], ;]
[), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim]
[==, null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i]
[), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim]
[=, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, upperBound, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, upperBound, [, i]
[;, i, <, dim, ;, i, ++, ), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }]
[;, i, ++, ), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[<, dim, ;, i, ++, ), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[;, i, ++, ), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[++, ), {, upperBound, [, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[=, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[[, i, ], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[], =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }, }]
[;, }, }, }, }, }]
[., POSITIVE_INFINITY, ;, }, }, }, }, }]
