[., time, ., format, ., ISODateTimeFormat, ;, public, final, class, GJChronology, extends, AssembledChronology, {, private, static, final, long, serialVersionUID, =]
[time, ., format, ., ISODateTimeFormat, ;, public, final, class, GJChronology, extends, AssembledChronology, {, private, static, final, long, serialVersionUID, =, -]
[=, -, 2545574827706931671L, ;, private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return]
[=, -, 2545574827706931671L, ;, private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return]
[private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis, (]
[private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis, (]
[private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis, (]
[Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis, (, from, ., year, (, ), ., get, (]
[Chronology, to, ), {, return, to, ., getDateTimeMillis, (, from, ., year, (, ), ., get, (, instant, ), ,]
[Chronology, to, ), {, return, to, ., getDateTimeMillis, (, from, ., year, (, ), ., get, (, instant, ), ,]
[Chronology, to, ), {, return, to, ., getDateTimeMillis, (, from, ., year, (, ), ., get, (, instant, ), ,]
[(, from, ., year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (]
[year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,]
[year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,]
[year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,]
[,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (]
[monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,]
[monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,]
[monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,]
[,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,, from, ., millisOfDay, (, ), ., get, (]
[}, private, static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long, newInstant, ;]
[static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long, newInstant, ;, newInstant, =]
[static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long, newInstant, ;, newInstant, =]
[static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long, newInstant, ;, newInstant, =]
[Chronology, from, ,, Chronology, to, ), {, long, newInstant, ;, newInstant, =, to, ., weekyear, (, ), ., set, (]
[,, Chronology, to, ), {, long, newInstant, ;, newInstant, =, to, ., weekyear, (, ), ., set, (, 0, ,]
[,, Chronology, to, ), {, long, newInstant, ;, newInstant, =, to, ., weekyear, (, ), ., set, (, 0, ,]
[,, Chronology, to, ), {, long, newInstant, ;, newInstant, =, to, ., weekyear, (, ), ., set, (, 0, ,]
[newInstant, =, to, ., weekyear, (, ), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (]
[weekyear, (, ), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;]
[), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,]
[newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (]
[weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;]
[), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,]
[newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (]
[dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;]
[), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =]
[dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,]
[), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,]
[newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get, (]
[(, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, return]
[., millisOfDay, (, ), ., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =]
[), ., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (]
[., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -]
[Instant, (, -, 12219292800000L, ), ;, private, static, final, Map, <, DateTimeZone, ,, ArrayList, <, GJChronology, >, >, cCache, =]
[HashMap, <, DateTimeZone, ,, ArrayList, <, GJChronology, >, >, (, ), ;, public, static, GJChronology, getInstanceUTC, (, ), {, return]
[DateTimeZone, ,, ArrayList, <, GJChronology, >, >, (, ), ;, public, static, GJChronology, getInstanceUTC, (, ), {, return, getInstance, (]
[DateTimeZone, ,, ArrayList, <, GJChronology, >, >, (, ), ;, public, static, GJChronology, getInstanceUTC, (, ), {, return, getInstance, (]
[GJChronology, >, >, (, ), ;, public, static, GJChronology, getInstanceUTC, (, ), {, return, getInstance, (, DateTimeZone, ., UTC, ,]
[>, (, ), ;, public, static, GJChronology, getInstanceUTC, (, ), {, return, getInstance, (, DateTimeZone, ., UTC, ,, DEFAULT_CUTOVER, ,]
[getInstance, (, DateTimeZone, ., UTC, ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return]
[DateTimeZone, ., UTC, ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (]
[DateTimeZone, ., UTC, ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (]
[4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,]
[;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,, DEFAULT_CUTOVER, ,]
[getDefault, (, ), ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return]
[), ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (]
[DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,]
[4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, DEFAULT_CUTOVER, ,]
[,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return]
[,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (]
[), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (, zone, ,]
[}, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (, zone, ,, gregorianCutover, ,]
[4, ), ;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {]
[;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =]
[;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =]
[synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =, DateTimeUtils, ., getZone, (]
[gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (]
[gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (]
[int, minDaysInFirstWeek, ), {, zone, =, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==]
[{, zone, =, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {]
[=, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =]
[zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {]
[;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =]
[;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =]
[), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =]
[=, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (]
[=, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (]
[cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,]
[cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,]
[toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance, (]
[=, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (]
[=, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (]
[=, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (]
[getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, ), <=]
[GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw]
[(, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw, new, IllegalArgumentException, (]
[(, ), <=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (]
[(, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =]
[(, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =]
[}, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (]
[synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (]
[synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (]
[cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==]
[ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, ), {]
[GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =]
[get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (]
[), ;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;]
[), ;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;]
[chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (]
[null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (, zone, ,]
[2, ), ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =]
[2, ), ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =]
[(, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;]
[(, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;]
[zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --]
[chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=]
[else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=, 0, ;, ), {]
[for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=, 0, ;, ), {, chrono, =]
[for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=, 0, ;, ), {, chrono, =]
[=, chronos, ., size, (, ), ;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (]
[), ;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (]
[), ;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (]
[), ;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (]
[--, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==]
[--, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==]
[{, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&]
[{, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&]
[., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (]
[., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (]
[==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return]
[cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (]
[cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (]
[equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (, zone, ==]
[equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (, zone, ==]
[(, ), ), ), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {]
[), ), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =]
[return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (]
[return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (]
[}, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (]
[if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,]
[==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,]
[==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,]
[), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (]
[chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,]
[GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,]
[zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {]
[minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =]
[,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (]
[,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (]
[(, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,]
[,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,]
[,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;]
[), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =]
[else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (]
[else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (]
[getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (]
[DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,]
[,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,]
[,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,]
[), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,]
[), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,]
[new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,]
[new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,]
[(, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }]
[(, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }]
[), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (]
[,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;, }, return]
[public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (]
[public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (]
[GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==]
[GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==]
[gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {]
[int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, cutoverInstant, =]
[cutoverInstant, ;, if, (, gregorianCutover, ==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, cutoverInstant, =, null, ;, }, else, {]
[if, (, gregorianCutover, ==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =]
[==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (]
[), ), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return]
[{, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (]
[=, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (, zone, ,]
[;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (, zone, ,, cutoverInstant, ,]
[;, private, long, iGapDuration, ;, private, GJChronology, (, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (]
[long, iGapDuration, ;, private, GJChronology, (, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, null, ,]
[GJChronology, (, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, null, ,, new, Object, [, ]]
[(, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, null, ,, new, Object, [, ], {]
[julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, null, ,, new, Object, [, ], {, julian, ,]
[GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, null, ,, new, Object, [, ], {, julian, ,, gregorian, ,]
[;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (]
[private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, base, ,]
[base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, base, ,, new, Object, [, ]]
[,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, base, ,, new, Object, [, ], {]
[julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, base, ,, new, Object, [, ], {, julian, ,]
[GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super, (, base, ,, new, Object, [, ], {, julian, ,, gregorian, ,]
[Object, [, ], {, julian, ,, gregorian, ,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return]
[], {, julian, ,, gregorian, ,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (]
[gregorian, ,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,]
[cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,, iCutoverInstant, ,]
[,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (]
[,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (]
[iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (]
[getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (, base, =]
[}, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=]
[(, ), {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[(, ), {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[(, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getZone, (, ), ;, }, return]
[(, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getZone, (, ), ;, }, return]
[base, ., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (, ), {, return]
[getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (, ), {, return, withZone, (]
[getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (, ), {, return, withZone, (]
[{, return, withZone, (, DateTimeZone, ., UTC, ), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (]
[{, return, withZone, (, DateTimeZone, ., UTC, ), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (]
[withZone, (, DateTimeZone, ., UTC, ), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==]
[., UTC, ), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {]
[), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =]
[), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =]
[), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==]
[{, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return]
[., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return]
[(, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (]
[;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, ,]
[if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, ,, iCutoverInstant, ,]
[int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (]
[int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (]
[year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (]
[int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =]
[,, int, millisOfDay, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=]
[throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (]
[if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,]
[(, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[=, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (]
[(, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,]
[,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (]
[;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (]
[long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <]
[iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {]
[getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =]
[getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =]
[monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (]
[dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,]
[millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (]
[iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (]
[{, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (]
[millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return]
[int, hourOfDay, ,, int, minuteOfHour, ,, int, secondOfMinute, ,, int, millisOfSecond, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (]
[int, hourOfDay, ,, int, minuteOfHour, ,, int, secondOfMinute, ,, int, millisOfSecond, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (]
[hourOfDay, ,, int, minuteOfHour, ,, int, secondOfMinute, ,, int, millisOfSecond, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (]
[int, minuteOfHour, ,, int, secondOfMinute, ,, int, millisOfSecond, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =]
[,, int, millisOfSecond, ), throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=]
[throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[throws, IllegalArgumentException, {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return]
[base, ;, if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (]
[if, (, (, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,]
[(, base, =, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[=, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[(, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,]
[), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,]
[null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =]
[,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (]
[,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,]
[,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[}, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,]
[instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,]
[try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (]
[dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (]
[dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (]
[hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=]
[minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||]
[minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||]
[secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=]
[;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw]
[(, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }]
[ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =]
[ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =]
[(, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (]
[!=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,]
[||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[!=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,]
[), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,]
[throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,]
[;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[(, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=]
[,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (]
[,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (]
[,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <]
[;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {]
[(, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =]
[(, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =]
[), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (]
[throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,]
[;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[}, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[(, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,]
[<, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,]
[), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[(, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (]
[millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return]
[throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover, (, ), {, return]
[instant, ;, }, public, Instant, getGregorianCutover, (, ), {, return, iCutoverInstant, ;, }, public, int, getMinimumDaysInFirstWeek, (, ), {, return]
[instant, ;, }, public, Instant, getGregorianCutover, (, ), {, return, iCutoverInstant, ;, }, public, int, getMinimumDaysInFirstWeek, (, ), {, return]
[), {, return, iGregorianChronology, ., getMinimumDaysInFirstWeek, (, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, iGregorianChronology, ., getMinimumDaysInFirstWeek, (, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[return, iGregorianChronology, ., getMinimumDaysInFirstWeek, (, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[(, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[(, this, ==, obj, ), {, return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =]
[obj, ), {, return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, )]
[return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return]
[return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return]
[return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return]
[return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return]
[;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==]
[;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==]
[obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&]
[obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&]
[{, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==]
[{, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==]
[), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&]
[), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&]
[chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (]
[chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (]
[., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;, }, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[(, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return]
[), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *]
[}, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *, 11, +]
[}, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *, 11, +]
[(, ), {, return, "GJ", ., hashCode, (, ), *, 11, +, getZone, (, ), ., hashCode, (, ), +]
["GJ", ., hashCode, (, ), *, 11, +, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +]
["GJ", ., hashCode, (, ), *, 11, +, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +]
[getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =]
[+, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (]
[hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;]
[hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;]
[}, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append, (]
[toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append, (, "GJChronology", ), ;]
[toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append, (, "GJChronology", ), ;]
[StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (]
[new, StringBuffer, (, 60, ), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;]
[new, StringBuffer, (, 60, ), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;]
[), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;, sb, ., append, (]
[), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;, sb, ., append, (]
[append, (, '[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (]
[append, (, '[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (]
['[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=]
['[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=]
[getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {]
[getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {]
[getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (]
[!=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (]
[!=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (]
[!=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (]
[!=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (]
[append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (]
[), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==]
[printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==, 0, ), {]
[if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==, 0, ), {, printer, =]
[if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==, 0, ), {, printer, =]
[., remainder, (, iCutoverMillis, ), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {]
[(, iCutoverMillis, ), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =]
[(, iCutoverMillis, ), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =]
[printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }]
[printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }]
[printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }]
[date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology, (]
[printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (]
[ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,]
[}, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (]
[}, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (]
[(, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=]
[), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {]
[), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {]
[(, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (]
[iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;]
[iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;]
[if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (]
[4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }]
[4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }]
[., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (]
[), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[sb, ., toString, (, ), ;, }, protected, void, assemble, (, Fields, fields, ), {, Object, [, ], params, =]
[;, }, protected, void, assemble, (, Fields, fields, ), {, Object, [, ], params, =, (, Object, [, ], )]
[fields, ), {, Object, [, ], params, =, (, Object, [, ], ), getParam, (, ), ;, JulianChronology, julian, =]
[Object, [, ], params, =, (, Object, [, ], ), getParam, (, ), ;, JulianChronology, julian, =, (, JulianChronology, )]
[Object, [, ], params, =, (, Object, [, ], ), getParam, (, ), ;, JulianChronology, julian, =, (, JulianChronology, )]
[], params, =, (, Object, [, ], ), getParam, (, ), ;, JulianChronology, julian, =, (, JulianChronology, ), params, []
[], ), getParam, (, ), ;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =]
[(, ), ;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, )]
[(, ), ;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, )]
[;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, []
[), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =]
[0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, )]
[0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, )]
[;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, []
[=, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;]
[GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =]
[GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =]
[;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;]
[cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =]
[(, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;]
[), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =]
[[, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;]
[], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =]
[cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (]
[cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (]
[), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=]
[gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (]
[gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (]
[gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (]
[if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=]
[if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=]
[{, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw]
[julian, ., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }]
[getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =]
[getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =]
[), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -]
[gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (]
[(, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;]
[(, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;]
[throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (]
[;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (]
[;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (]
[;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (]
[;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (]
[iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (]
[fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==]
[(, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {]
[(, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {]
[if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =]
[., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (]
[., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (]
[(, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,]
[(, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,]
[0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,]
[fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;]
[fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =]
[julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (]
[julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (]
[fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,]
[fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,]
[fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;]
[fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =]
[julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (]
[julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (]
[fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,]
[fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,]
[iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,]
[fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;]
[fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =]
[julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (]
[julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (]
[fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,]
[fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,]
[fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;]
[fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =]
[julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (]
[julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (]
[fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,]
[fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,]
[iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,]
[fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;]
[fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =]
[julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (]
[julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (]
[fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,]
[fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,]
[fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;]
[fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =]
[julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (]
[julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (]
[fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,]
[fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,]
[fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;]
[fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =]
[julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (]
[julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (]
[fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,]
[fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,]
[iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,]
[fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;]
[fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =]
[julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (]
[julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (]
[fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,]
[fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,]
[fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;]
[fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =]
[julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (]
[julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (]
[fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,]
[fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,]
[iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,]
[fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;]
[fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =]
[julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (]
[julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (]
[fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,]
[fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,]
[iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,]
[halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {]
[halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {]
[(, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =]
[halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (]
[halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (]
[halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,]
[halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,]
[;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,]
[era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {]
[era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {]
[(, julian, ., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =]
[era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (]
[era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (]
[era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,]
[era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,]
[;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,]
[fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;]
[fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;]
[new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =]
[new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =]
[new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =]
[,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;]
[,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;]
[,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =]
[;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (]
[;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (]
[., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,]
[., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,]
[(, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,]
[(, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,]
[., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,]
[new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;]
[new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;]
[., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =]
[), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (]
[), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (]
[fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,]
[fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,]
[iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,]
[fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;]
[fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;]
[new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =]
[new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =]
[new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =]
[,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;]
[,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;]
[,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =]
[;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (]
[;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (]
[., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,]
[., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,]
[(, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,]
[(, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,]
[., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,]
[., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,]
[ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,]
[., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;]
[., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;]
[,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =]
[yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (]
[yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (]
[fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,]
[fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,]
[iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,]
[;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,]
[;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,]
[=, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,]
[(, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;]
[(, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;]
[(, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =]
[(, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =]
[(, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =]
[,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;]
[,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;]
[,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =]
[;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (]
[;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (]
[., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,]
[., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,]
[(, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,]
[;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,]
[., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,]
[new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;]
[new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;]
[., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =]
[., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =]
[., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =]
[,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;]
[,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;]
[,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =]
[;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (]
[;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (]
[., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,]
[., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,]
[(, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,]
[(, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,]
[., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,]
[., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,]
[ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,]
[fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =]
[fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =]
[fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =]
[fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (]
[,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[}, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =]
[cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (]
[cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (]
[), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,]
[), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,]
[iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,]
[iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,]
[., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, ., years, ,]
[=, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,]
[), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =]
[), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =]
[), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =]
[years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (]
[,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[}, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =]
[cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (]
[cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (]
[), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,]
[), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,]
[iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,]
[iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,]
[., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,]
[=, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,]
[), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =]
[., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (]
[., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (]
[,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,]
[,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,]
[), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,]
[{, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;]
[{, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;]
[new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =]
[new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =]
[., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;]
[., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;]
[,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =]
[fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return]
[months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (]
[fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,]
[dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iJulianChronology, ,]
[{, return, convertByYear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return]
[convertByYear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (]
[instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,]
[iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iGregorianChronology, ,]
[{, return, convertByYear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return]
[convertByYear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (]
[instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,]
[iGregorianChronology, ,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iJulianChronology, ,]
[{, return, convertByWeekyear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return]
[convertByWeekyear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (]
[instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,]
[iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,]
[instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {]
[return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (]
[), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[iDurationField, ;, protected, DurationField, iRangeDurationField, ;, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (]
[protected, DurationField, iRangeDurationField, ;, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,]
[iRangeDurationField, ;, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,]
[CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, cutoverMillis, ,]
[), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (]
[}, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (, julianField, ,]
[(, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (, julianField, ,, gregorianField, ,]
[julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (, julianField, ,, gregorianField, ,, null, ,]
[DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (, julianField, ,, gregorianField, ,, null, ,, cutoverMillis, ,]
[CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (]
[CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (]
[,, DurationField, rangeField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, gregorianField, ., getType, (, ), ), ;]
[rangeField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, gregorianField, ., getType, (, ), ), ;, iJulianField, =]
[long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, gregorianField, ., getType, (, ), ), ;, iJulianField, =, julianField, ;]
[,, boolean, convertByWeekyear, ), {, super, (, gregorianField, ., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =]
[convertByWeekyear, ), {, super, (, gregorianField, ., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;]
[{, super, (, gregorianField, ., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =]
[(, gregorianField, ., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;]
[., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =]
[(, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;]
[), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =]
[), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =]
[gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (]
[gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (]
[iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==]
[;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {]
[=, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =]
[=, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =]
[(, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (]
[(, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (]
[;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==]
[rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {]
[null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =]
[null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =]
[(, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }]
[;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =]
[julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient, (, ), {, return]
[public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (]
[public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (]
[isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=]
[return, false, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[return, false, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, int, get, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., get, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return]
[>=, iCutover, ), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return, iJulianField, ., get, (]
[get, (, instant, ), ;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (]
[get, (, instant, ), ;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (]
[instant, ), ;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=]
[}, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return]
[}, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return]
[(, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsText, (]
[instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsText, (, instant, ,]
[(, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return]
[(, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return]
[), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (]
[return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (, instant, ,]
[(, instant, ,, locale, ), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[(, instant, ,, locale, ), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsText, (]
[}, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsText, (, fieldValue, ,]
[(, fieldValue, ,, locale, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (]
[(, fieldValue, ,, locale, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (]
[,, locale, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=]
[}, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return]
[}, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return]
[(, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsShortText, (]
[instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsShortText, (, instant, ,]
[(, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return]
[(, instant, >=, iCutover, ), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return]
[), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (]
[return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (, instant, ,]
[(, instant, ,, locale, ), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[(, instant, ,, locale, ), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsShortText, (]
[}, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsShortText, (, fieldValue, ,]
[getAsShortText, (, fieldValue, ,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[getAsShortText, (, fieldValue, ,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iGregorianField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iGregorianField, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iGregorianField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iGregorianField, ., add, (, instant, ,]
[], add, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[], add, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (]
[(, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==]
[int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return]
[], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, if, (]
[], values, ,, int, valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, if, (]
[valueToAdd, ), {, if, (, valueToAdd, ==, 0, ), {, return, values, ;, }, if, (, DateTimeUtils, ., isContiguous, (]
[0, ), {, return, values, ;, }, if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant, =]
[if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant, =, 0L, ;, for, (, int, i, =]
[isContiguous, (, partial, ), ), {, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =]
[isContiguous, (, partial, ), ), {, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =]
[long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;]
[long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;]
[=, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {]
[0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =]
[0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =]
[0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =]
[0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =]
[partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =, partial, ., getFieldType, (]
[;, i, <, isize, ;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (]
[), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (]
[instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,]
[instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,]
[partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, []
[), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }]
[getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }, instant, =]
[GJChronology, ., this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (]
[this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,]
[(, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return]
[(, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return]
[], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (]
[;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,]
[,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return]
[,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return]
[return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return, super, ., add, (]
[., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return, super, ., add, (, partial, ,]
[., get, (, partial, ,, instant, ), ;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,]
[(, partial, ,, instant, ), ;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,, values, ,]
[,, values, ,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[,, values, ,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifference, (]
[}, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifferenceAsLong, (]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[(, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (]
[(, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (]
[,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {]
[public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (]
[,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (]
[instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <]
[instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +]
[set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <]
[,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (]
[{, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (]
[{, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (]
[(, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (]
[iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=]
[{, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw]
[gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (]
[gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (]
[if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,]
[if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,]
[instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (]
[value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[{, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,]
[(, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, else, {]
[,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =]
[,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =]
[(, value, ), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (]
[), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (]
[}, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=]
[instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -]
[set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (]
[{, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (]
[{, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (]
[(, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (]
[iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=]
[{, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw]
[julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (]
[julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (]
[if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,]
[if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,]
[instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (]
[value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[{, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,]
[getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, return]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, instant, >=]
[long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {]
[(, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[(, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[String, text, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (]
[,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,]
[locale, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,]
[instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (]
[instant, >=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (]
[iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <]
[iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +]
[instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <]
[,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (]
[(, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (]
[instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,]
[gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,]
[}, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (]
[}, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (]
[}, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=]
[iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -]
[instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=]
[,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (]
[if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return]
[=, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (, ), {, return]
[instant, ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[public, DurationField, getRangeDurationField, (, ), {, return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {, if, (]
[public, DurationField, getRangeDurationField, (, ), {, return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {, if, (]
[getRangeDurationField, (, ), {, return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {, if, (, instant, >=]
[return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, boolean, isLeap, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., isLeap, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return]
[>=, iCutover, ), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return, iJulianField, ., isLeap, (]
[return, iJulianField, ., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (]
[return, iJulianField, ., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (]
[., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=]
[), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getLeapAmount, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return]
[>=, iCutover, ), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return, iJulianField, ., getLeapAmount, (]
[}, else, {, return, iJulianField, ., getLeapAmount, (, instant, ), ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return]
[}, else, {, return, iJulianField, ., getLeapAmount, (, instant, ), ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return]
[DurationField, getLeapDurationField, (, ), {, return, iGregorianField, ., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[DurationField, getLeapDurationField, (, ), {, return, iGregorianField, ., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[(, ), {, return, iJulianField, ., getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ), {, return]
[(, ), {, return, iJulianField, ., getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ), {, return]
[iJulianField, ., getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ), {, return, iJulianField, ., getMinimumValue, (]
[getMinimumValue, (, partial, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return]
[getMinimumValue, (, partial, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return]
[;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return, iJulianField, ., getMinimumValue, (]
[public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return, iJulianField, ., getMinimumValue, (, partial, ,]
[iJulianField, ., getMinimumValue, (, partial, ,, values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (]
[iJulianField, ., getMinimumValue, (, partial, ,, values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (]
[getMinimumValue, (, partial, ,, values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <]
[values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {, return]
[values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {, return]
[public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {, return, iJulianField, ., getMinimumValue, (]
[{, if, (, instant, <, iCutover, ), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =]
[{, if, (, instant, <, iCutover, ), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =]
[<, iCutover, ), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (]
[{, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;]
[iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =]
[iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =]
[instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (]
[;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,]
[iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (]
[iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (]
[getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <]
[), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {]
[instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =]
[instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =]
[set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get, (]
[), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return]
[=, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return]
[=, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return]
[), {, return, iGregorianField, ., getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (]
[), {, return, iGregorianField, ., getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (]
[return, iGregorianField, ., getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=]
[(, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[(, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =]
[>=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (]
[{, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;]
[iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =]
[iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =]
[instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (]
[;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,]
[iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (]
[iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (]
[getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=]
[), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {]
[instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =]
[instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =]
[set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (]
[set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (]
[max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (]
[;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,]
[if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -]
[{, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), ), ;, }, return]
[1, ), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =]
[1, ), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =]
[1, ), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =]
[}, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology, ., getInstanceUTC, (, ), ., set, (]
[int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology, ., getInstanceUTC, (, ), ., set, (, partial, ,]
[partial, ), {, long, instant, =, GJChronology, ., getInstanceUTC, (, ), ., set, (, partial, ,, 0L, ), ;, return]
[{, long, instant, =, GJChronology, ., getInstanceUTC, (, ), ., set, (, partial, ,, 0L, ), ;, return, getMaximumValue, (]
[instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, Chronology, chrono, =]
[instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, Chronology, chrono, =]
[partial, ,, int, [, ], values, ), {, Chronology, chrono, =, GJChronology, ., getInstanceUTC, (, ), ;, long, instant, =]
[{, Chronology, chrono, =, GJChronology, ., getInstanceUTC, (, ), ;, long, instant, =, 0L, ;, for, (, int, i, =]
[GJChronology, ., getInstanceUTC, (, ), ;, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =]
[GJChronology, ., getInstanceUTC, (, ), ;, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =]
[long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;]
[long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;]
[=, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =]
[,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =]
[,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (]
[i, <, isize, ;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (]
[++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (]
[++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (]
[++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (]
[{, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (, values, []
[=, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (, values, [, i, ], <=]
[=, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (, values, [, i, ], <=]
[(, i, ), ., getField, (, chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (]
[getField, (, chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {]
[chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =]
[chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =]
[(, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (]
[[, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,]
[[, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,]
[], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,, values, []
[), ), {, instant, =, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return]
[{, instant, =, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return, getMaximumValue, (]
[;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[}, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=]
[(, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {]
[), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundFloor, (]
[), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (]
[), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <]
[), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +]
[iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <]
[(, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (]
[(, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (]
[(, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (, instant, ), ;, }, return]
[roundFloor, (, instant, ), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[roundFloor, (, instant, ), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[instant, ), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=]
[}, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {]
[instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundCeiling, (]
[{, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {]
[(, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =]
[(, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =]
[), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (]
[., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (]
[., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (]
[(, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=]
[else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -]
[iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=]
[(, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (]
[if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return]
[(, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[(, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[}, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (]
[}, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (]
[instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumTextLength, (]
[public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumTextLength, (, locale, ), ,]
[public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumTextLength, (, locale, ), ,]
[Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumTextLength, (, locale, ), ,, iGregorianField, ., getMaximumTextLength, (]
[), ,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return]
[), ,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return]
[getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (]
[getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (]
[), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (]
[public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (, locale, ), ,]
[public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (, locale, ), ,]
[Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (, locale, ), ,, iGregorianField, ., getMaximumShortTextLength, (]
[,, iGregorianField, ., getMaximumShortTextLength, (, locale, ), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (]
[(, locale, ), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return]
[), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (]
[(, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (, instant, ), ;, }, else, {, return]
[instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (, instant, ), ;, }, else, {, return, julianToGregorianByYear, (]
[else, {, return, julianToGregorianByYear, (, instant, ), ;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {, if, (]
[(, instant, ), ;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return]
[), ;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, gregorianToJulianByWeekyear, (]
[(, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, gregorianToJulianByWeekyear, (, instant, ), ;, }, else, {, return]
[instant, ), {, if, (, iConvertByWeekyear, ), {, return, gregorianToJulianByWeekyear, (, instant, ), ;, }, else, {, return, gregorianToJulianByYear, (]
[;, }, else, {, return, gregorianToJulianByYear, (, instant, ), ;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {]
[{, return, gregorianToJulianByYear, (, instant, ), ;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {, @, SuppressWarnings, (]
[}, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[final, long, serialVersionUID, =, 3410248757173576441L, ;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (]
[serialVersionUID, =, 3410248757173576441L, ;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,]
[3410248757173576441L, ;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,]
[ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, null, ,]
[DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, null, ,, cutoverMillis, ,]
[), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (]
[}, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,]
[(, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,]
[julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,]
[DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,, cutoverMillis, ,]
[ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (]
[DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,]
[,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,]
[gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,]
[DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,, cutoverMillis, ,]
[DurationField, rangeDurationField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,, cutoverMillis, ,, false, ), ;]
[,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, durationField, ,, cutoverMillis, ,, false, ), ;, iRangeDurationField, =]
[ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (]
[DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, julianField, ,]
[,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, julianField, ,, gregorianField, ,]
[gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,]
[long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (]
[long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (]
[,, boolean, convertByWeekyear, ), {, super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==]
[), {, super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {]
[super, (, julianField, ,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =]
[,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (]
[,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,]
[), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }]
[if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }, iDurationField, =]
[;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (]
[;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (]
[iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {]
[public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (]
[,, int, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (]
[instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +]
[add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[(, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (]
[(, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (]
[), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=]
[wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (]
[;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,]
[if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (]
[}, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (]
[}, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (]
[else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=]
[year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (]
[;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,]
[if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =]
[iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (]
[instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {]
[-, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[-, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[}, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (]
[instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[}, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -]
[add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (]
[if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return]
[}, }, }, return, instant, ;, }, public, long, add, (, long, instant, ,, long, value, ), {, if, (]
[}, }, }, return, instant, ;, }, public, long, add, (, long, instant, ,, long, value, ), {, if, (]
[}, return, instant, ;, }, public, long, add, (, long, instant, ,, long, value, ), {, if, (, instant, >=]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, if, (, instant, >=, iCutover, ), {]
[public, long, add, (, long, instant, ,, long, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[public, long, add, (, long, instant, ,, long, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[long, instant, ,, long, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (]
[,, long, value, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (]
[if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (]
[instant, >=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +]
[add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[(, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (]
[(, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (]
[), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=]
[wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =]
[instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (]
[;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,]
[if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (]
[}, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (]
[}, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (]
[else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=]
[year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =]
[instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (]
[;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,]
[if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =]
[iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (]
[instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {]
[-, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[-, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[}, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (]
[instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[}, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (]
[iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -]
[add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (]
[if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return]
[}, }, }, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[}, }, }, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[}, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (]
[getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=]
[,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return]
[,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return]
[{, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (]
[(, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =]
[subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (]
[{, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return]
[{, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (]
[minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,]
[gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (]
[gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (]
[minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <]
[iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return]
[iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return]
[minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (]
[subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,]
[else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =]
[subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (]
[{, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return]
[{, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (]
[minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,]
[minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (]
[getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=]
[,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return]
[,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return]
[{, if, (, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (]
[(, minuendInstant, >=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =]
[subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (]
[{, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return]
[{, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return]
[getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (]
[minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (]
[gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (]
[minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <]
[iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return]
[iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return]
[minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (]
[subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =]
[subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (]
[{, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return]
[{, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return]
[getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (]
[minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (]
[(, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=]
[), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMinimumValue, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return]
[>=, iCutover, ), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMinimumValue, (]
[return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (]
[return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (]
[., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=]
[), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return]
[{, if, (, instant, >=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return]
[>=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMaximumValue, (]
[(, instant, ), ;, }, }, }, private, static, class, LinkedDurationField, extends, DecoratedDurationField, {, private, static, final, long, serialVersionUID, =]
[serialVersionUID, =, 4097975388007713084L, ;, private, final, ImpreciseCutoverField, iField, ;, LinkedDurationField, (, DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (]
[4097975388007713084L, ;, private, final, ImpreciseCutoverField, iField, ;, LinkedDurationField, (, DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (, durationField, ,]
[4097975388007713084L, ;, private, final, ImpreciseCutoverField, iField, ;, LinkedDurationField, (, DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (, durationField, ,]
[LinkedDurationField, (, DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (, durationField, ,, durationField, ., getType, (, ), ), ;]
[DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (, durationField, ,, durationField, ., getType, (, ), ), ;, iField, =]
[), ), ;, iField, =, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[), ), ;, iField, =, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[=, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifference, (]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (, minuendInstant, ,]
