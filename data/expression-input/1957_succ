[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, private, final, boolean, anchorUnusedVars, ;, private, SpecializeModule, ., SpecializationState]
[., getLogger, (, RemoveUnusedPrototypeProperties, ., class, ., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, private, final, boolean, anchorUnusedVars, ;, private, SpecializeModule, .]
[., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, private, final, boolean, anchorUnusedVars]
[=, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override]
[;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (]
[=, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state]
[., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, .]
[;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {]
[=, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =]
[., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, .]
[;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =, state, ;]
[=, state, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =]
[., specializationState, =, state, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties]
[;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties]
[;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;, }]
[,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer]
[,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo]
[,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, )]
[), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;]
[;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo]
[., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, private, void]
[,, root, ), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, private, void, removeUnusedSymbols, (, Collection, <]
[), ;, removeUnusedSymbols, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >]
[;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, changed, =, false, ;, for, (]
[), ;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, changed, =, false, ;, for]
[., getAllNameInfo, (, ), ), ;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, changed]
[;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, for]
[), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations]
[), {, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if]
[), {, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if]
[., isReferenced, (, ), ), {, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove]
[), {, boolean, canRemove, =, false, ;, if, (, specializationState, ==, null, ), {, canRemove, =, true, ;, }, else]
[., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (, specializationState, ==, null, ), {, canRemove, =]
[;, if, (, specializationState, ==, null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (]
[), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction]
[==, null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if]
[), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction]
[=, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, )]
[;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, ), {, specializationState]
[;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true]
[), ;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =]
[), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove]
[!=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if]
[), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove]
[;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =]
[., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration]
[,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, )]
[), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed]
[=, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;]
[;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }]
[), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +]
[;, changed, =, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }]
[., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name]
[=, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (]
[;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (, changed, )]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (]
[., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol]
[+, nameInfo, ., name, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol]
[., name, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, .]
[;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (, specializationState, ), ;, Node, specializableFunction]
[., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (, specializationState]
[;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, ), symbol]
[., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =]
[), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, )]
[;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, )]
[), {, specializableFunction, =, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (, symbol]
[instanceof, GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, ), ;, }, else, if]
[=, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, )]
[;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty, ), symbol, ), .]
[., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty]
[), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (]
[), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (]
[), {, Node, propertyValue, =, (, (, AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (, propertyValue, .]
[instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (]
[;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol]
[., getValue, (, ), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }]
[), ., getValue, (, ), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }]
[), ., getValue, (, ), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }]
[), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }]
[., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {]
[=, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {, Preconditions]
[;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {, Preconditions, ., checkState]
[), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (]
[instanceof, LiteralProperty, ), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }]
[;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&]
[;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }]
[., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction]
[,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return]
[), ;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;]
[), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }, }]
[&&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }]
[!=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }, else, {, return, null, ;]
[&&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }]
[), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }, }]
[., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }, }]
[), ), {, return, specializableFunction, ;, }, else, {, return, null, ;, }, }, }]
[;, }, else, {, return, null, ;, }, }, }]
[;, }, }, }]
