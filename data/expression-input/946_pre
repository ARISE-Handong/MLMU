[., jstype, ., StaticSourceFile, ;, import, java, ., util, ., Set, ;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =]
[., jstype, ., StaticSourceFile, ;, import, java, ., util, ., Set, ;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =]
[., jstype, ., StaticSourceFile, ;, import, java, ., util, ., Set, ;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =]
[., StaticSourceFile, ;, import, java, ., util, ., Set, ;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +]
[;, import, java, ., util, ., Set, ;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +]
[;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =]
[;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =]
[;, class, IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =]
[IRFactory, {, static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =, "setters are not supported in older versions of JS. ", +]
[static, final, String, GETTER_ERROR_MESSAGE, =, "getters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =, "setters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +]
["If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =, "setters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SUSPICIOUS_COMMENT_WARNING, =]
["If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =, "setters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SUSPICIOUS_COMMENT_WARNING, =]
["set the appropriate language_in option.", ;, static, final, String, SETTER_ERROR_MESSAGE, =, "setters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SUSPICIOUS_COMMENT_WARNING, =, "Non-JSDoc comment has annotations. ", +]
["setters are not supported in older versions of JS. ", +, "If you are targeting newer versions of JS, ", +, "set the appropriate language_in option.", ;, static, final, String, SUSPICIOUS_COMMENT_WARNING, =, "Non-JSDoc comment has annotations. ", +, "Did you mean to start it with '/**'?", ;, static, final, String, MISPLACED_TYPE_ANNOTATION, =]
[;, private, final, ErrorReporter, errorReporter, ;, private, final, TransformDispatcher, transformDispatcher, ;, private, static, final, ImmutableSet, <, String, >, ALLOWED_DIRECTIVES, =]
[;, private, final, ErrorReporter, errorReporter, ;, private, final, TransformDispatcher, transformDispatcher, ;, private, static, final, ImmutableSet, <, String, >, ALLOWED_DIRECTIVES, =]
[errorReporter, ;, private, final, TransformDispatcher, transformDispatcher, ;, private, static, final, ImmutableSet, <, String, >, ALLOWED_DIRECTIVES, =, ImmutableSet, ., of, (]
[String, >, ALLOWED_DIRECTIVES, =, ImmutableSet, ., of, (, "use strict", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =]
[String, >, ALLOWED_DIRECTIVES, =, ImmutableSet, ., of, (, "use strict", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =]
[ImmutableSet, ., of, (, "use strict", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (]
[of, (, "use strict", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,]
["use strict", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,]
[;, private, static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,]
[static, final, ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,]
[ImmutableSet, <, String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,]
[String, >, ES5_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,]
["enum", ,, "export", ,, "extends", ,, "import", ,, "super", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =]
["enum", ,, "export", ,, "extends", ,, "import", ,, "super", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =]
["extends", ,, "import", ,, "super", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (]
["import", ,, "super", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,]
["super", ), ;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,]
[;, private, static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,]
[static, final, ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,]
[ImmutableSet, <, String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,]
[String, >, ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,]
[ES5_STRICT_RESERVED_KEYWORDS, =, ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,]
[ImmutableSet, ., of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,]
[of, (, "class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,]
["class", ,, "const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,]
["const", ,, "enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,, "package", ,]
["enum", ,, "export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,, "package", ,, "private", ,]
["export", ,, "extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,, "package", ,, "private", ,, "protected", ,]
["extends", ,, "import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,, "package", ,, "private", ,, "protected", ,, "public", ,]
["import", ,, "super", ,, "implements", ,, "interface", ,, "let", ,, "package", ,, "private", ,, "protected", ,, "public", ,, "static", ,]
[,, "yield", ), ;, private, final, Set, <, String, >, reservedKeywords, ;, private, final, Set, <, Comment, >, parsedComments, =]
[,, "yield", ), ;, private, final, Set, <, String, >, reservedKeywords, ;, private, final, Set, <, Comment, >, parsedComments, =]
[>, reservedKeywords, ;, private, final, Set, <, Comment, >, parsedComments, =, Sets, ., newHashSet, (, ), ;, Node, rootNodeJsDocHolder, =]
[private, final, Set, <, Comment, >, parsedComments, =, Sets, ., newHashSet, (, ), ;, Node, rootNodeJsDocHolder, =, new, Node, (]
[private, final, Set, <, Comment, >, parsedComments, =, Sets, ., newHashSet, (, ), ;, Node, rootNodeJsDocHolder, =, new, Node, (]
[newHashSet, (, ), ;, Node, rootNodeJsDocHolder, =, new, Node, (, Token, ., SCRIPT, ), ;, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, =]
[newHashSet, (, ), ;, Node, rootNodeJsDocHolder, =, new, Node, (, Token, ., SCRIPT, ), ;, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, =]
[(, Token, ., SCRIPT, ), ;, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, =, rootNodeJsDocHolder, ., getJsDocBuilderForNode, (, ), ;, JSDocInfo, fileOverviewInfo, =]
[private, Node, templateNode, ;, private, IRFactory, (, String, sourceString, ,, StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {]
[private, Node, templateNode, ;, private, IRFactory, (, String, sourceString, ,, StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {]
[private, IRFactory, (, String, sourceString, ,, StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =]
[(, String, sourceString, ,, StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;]
[(, String, sourceString, ,, StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;]
[StaticSourceFile, sourceFile, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =]
[,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;]
[,, Config, config, ,, ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;]
[ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =]
[ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =]
[ErrorReporter, errorReporter, ), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =]
[), {, this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==]
[this, ., sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==, null, ?]
[sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==, null, ?, null, :]
[sourceString, =, sourceString, ;, this, ., sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==, null, ?, null, :]
[sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, ), ;]
[sourceFile, =, sourceFile, ;, this, ., sourceName, =, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, ), ;]
[this, ., sourceName, =, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, ), ;, this, ., config, =]
[sourceName, =, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, ), ;, this, ., config, =, config, ;]
[sourceName, =, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, ), ;, this, ., config, =, config, ;]
[null, ?, null, :, sourceFile, ., getName, (, ), ;, this, ., config, =, config, ;, this, ., errorReporter, =]
[null, :, sourceFile, ., getName, (, ), ;, this, ., config, =, config, ;, this, ., errorReporter, =, errorReporter, ;]
[null, :, sourceFile, ., getName, (, ), ;, this, ., config, =, config, ;, this, ., errorReporter, =, errorReporter, ;]
[getName, (, ), ;, this, ., config, =, config, ;, this, ., errorReporter, =, errorReporter, ;, this, ., transformDispatcher, =]
[., config, =, config, ;, this, ., errorReporter, =, errorReporter, ;, this, ., transformDispatcher, =, new, TransformDispatcher, (, ), ;]
[., config, =, config, ;, this, ., errorReporter, =, errorReporter, ;, this, ., transformDispatcher, =, new, TransformDispatcher, (, ), ;]
[;, this, ., errorReporter, =, errorReporter, ;, this, ., transformDispatcher, =, new, TransformDispatcher, (, ), ;, this, ., templateNode, =]
[;, this, ., transformDispatcher, =, new, TransformDispatcher, (, ), ;, this, ., templateNode, =, createTemplateNode, (, ), ;, switch, (]
[;, this, ., transformDispatcher, =, new, TransformDispatcher, (, ), ;, this, ., templateNode, =, createTemplateNode, (, ), ;, switch, (]
[TransformDispatcher, (, ), ;, this, ., templateNode, =, createTemplateNode, (, ), ;, switch, (, config, ., languageMode, ), {, case]
[), ;, this, ., templateNode, =, createTemplateNode, (, ), ;, switch, (, config, ., languageMode, ), {, case, ECMASCRIPT3, :]
[this, ., templateNode, =, createTemplateNode, (, ), ;, switch, (, config, ., languageMode, ), {, case, ECMASCRIPT3, :, reservedKeywords, =]
[(, ), ;, switch, (, config, ., languageMode, ), {, case, ECMASCRIPT3, :, reservedKeywords, =, null, ;, break, ;, case]
[;, switch, (, config, ., languageMode, ), {, case, ECMASCRIPT3, :, reservedKeywords, =, null, ;, break, ;, case, ECMASCRIPT5, :]
[(, config, ., languageMode, ), {, case, ECMASCRIPT3, :, reservedKeywords, =, null, ;, break, ;, case, ECMASCRIPT5, :, reservedKeywords, =]
[{, case, ECMASCRIPT3, :, reservedKeywords, =, null, ;, break, ;, case, ECMASCRIPT5, :, reservedKeywords, =, ES5_RESERVED_KEYWORDS, ;, break, ;, case]
[ECMASCRIPT3, :, reservedKeywords, =, null, ;, break, ;, case, ECMASCRIPT5, :, reservedKeywords, =, ES5_RESERVED_KEYWORDS, ;, break, ;, case, ECMASCRIPT5_STRICT, :]
[reservedKeywords, =, null, ;, break, ;, case, ECMASCRIPT5, :, reservedKeywords, =, ES5_RESERVED_KEYWORDS, ;, break, ;, case, ECMASCRIPT5_STRICT, :, reservedKeywords, =]
[ECMASCRIPT5, :, reservedKeywords, =, ES5_RESERVED_KEYWORDS, ;, break, ;, case, ECMASCRIPT5_STRICT, :, reservedKeywords, =, ES5_STRICT_RESERVED_KEYWORDS, ;, break, ;, default, :, throw]
[=, ES5_RESERVED_KEYWORDS, ;, break, ;, case, ECMASCRIPT5_STRICT, :, reservedKeywords, =, ES5_STRICT_RESERVED_KEYWORDS, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[default, :, throw, new, IllegalStateException, (, "unknown language mode", ), ;, }, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =]
[new, IllegalStateException, (, "unknown language mode", ), ;, }, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, new, Node, (]
[new, IllegalStateException, (, "unknown language mode", ), ;, }, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, new, Node, (]
[;, }, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, new, Node, (, Token, ., SCRIPT, ), ;]
[;, }, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, new, Node, (, Token, ., SCRIPT, ), ;]
[Node, createTemplateNode, (, ), {, Node, templateNode, =, new, Node, (, Token, ., SCRIPT, ), ;, templateNode, ., setStaticSourceFile, (]
[{, Node, templateNode, =, new, Node, (, Token, ., SCRIPT, ), ;, templateNode, ., setStaticSourceFile, (, sourceFile, ), ;, return]
[(, AstRoot, node, ,, StaticSourceFile, sourceFile, ,, String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, IRFactory, irFactory, =]
[,, StaticSourceFile, sourceFile, ,, String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, IRFactory, irFactory, =, new, IRFactory, (]
[sourceFile, ,, String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, IRFactory, irFactory, =, new, IRFactory, (, sourceString, ,]
[String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ), {, IRFactory, irFactory, =, new, IRFactory, (, sourceString, ,, sourceFile, ,]
[,, Config, config, ,, ErrorReporter, errorReporter, ), {, IRFactory, irFactory, =, new, IRFactory, (, sourceString, ,, sourceFile, ,, config, ,]
[), {, IRFactory, irFactory, =, new, IRFactory, (, sourceString, ,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =]
[), {, IRFactory, irFactory, =, new, IRFactory, (, sourceString, ,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =]
[=, new, IRFactory, (, sourceString, ,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =, irFactory, ., transform, (]
[,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =, irFactory, ., transform, (, node, ), ;, if, (]
[,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =, irFactory, ., transform, (, node, ), ;, if, (]
[,, sourceFile, ,, config, ,, errorReporter, ), ;, Node, irNode, =, irFactory, ., transform, (, node, ), ;, if, (]
[), ;, Node, irNode, =, irFactory, ., transform, (, node, ), ;, if, (, node, ., getComments, (, ), !=]
[(, node, ), ;, if, (, node, ., getComments, (, ), !=, null, ), {, for, (, Comment, comment, :]
[(, node, ), ;, if, (, node, ., getComments, (, ), !=, null, ), {, for, (, Comment, comment, :]
[(, ), !=, null, ), {, for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (]
[(, ), !=, null, ), {, for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (]
[(, ), !=, null, ), {, for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (]
[(, ), !=, null, ), {, for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (]
[for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==]
[for, (, Comment, comment, :, node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==]
[:, node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., JSDOC, &&]
[node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !]
[node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !]
[node, ., getComments, (, ), ), {, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !]
[{, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !, irFactory, ., parsedComments, ., contains, (]
[., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !, irFactory, ., parsedComments, ., contains, (, comment, ), ), {]
[., getCommentType, (, ), ==, CommentType, ., JSDOC, &&, !, irFactory, ., parsedComments, ., contains, (, comment, ), ), {]
[==, CommentType, ., JSDOC, &&, !, irFactory, ., parsedComments, ., contains, (, comment, ), ), {, irFactory, ., handlePossibleFileOverviewJsDoc, (]
[., JSDOC, &&, !, irFactory, ., parsedComments, ., contains, (, comment, ), ), {, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,]
[., contains, (, comment, ), ), {, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,, irNode, ), ;, }, else, if, (]
[., contains, (, comment, ), ), {, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,, irNode, ), ;, }, else, if, (]
[., contains, (, comment, ), ), {, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,, irNode, ), ;, }, else, if, (]
[{, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,, irNode, ), ;, }, else, if, (, comment, ., getCommentType, (, ), ==]
[{, irFactory, ., handlePossibleFileOverviewJsDoc, (, comment, ,, irNode, ), ;, }, else, if, (, comment, ., getCommentType, (, ), ==]
[comment, ,, irNode, ), ;, }, else, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., BLOCK_COMMENT, ), {]
[comment, ,, irNode, ), ;, }, else, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., BLOCK_COMMENT, ), {]
[;, }, else, if, (, comment, ., getCommentType, (, ), ==, CommentType, ., BLOCK_COMMENT, ), {, irFactory, ., handleBlockComment, (]
[., getCommentType, (, ), ==, CommentType, ., BLOCK_COMMENT, ), {, irFactory, ., handleBlockComment, (, comment, ), ;, }, }, }]
[., getCommentType, (, ), ==, CommentType, ., BLOCK_COMMENT, ), {, irFactory, ., handleBlockComment, (, comment, ), ;, }, }, }]
[==, CommentType, ., BLOCK_COMMENT, ), {, irFactory, ., handleBlockComment, (, comment, ), ;, }, }, }, irFactory, ., setFileOverviewJsDoc, (]
[), {, irFactory, ., handleBlockComment, (, comment, ), ;, }, }, }, irFactory, ., setFileOverviewJsDoc, (, irNode, ), ;, return]
[setFileOverviewJsDoc, (, irNode, ), ;, return, irNode, ;, }, private, void, setFileOverviewJsDoc, (, Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =]
[setFileOverviewJsDoc, (, irNode, ), ;, return, irNode, ;, }, private, void, setFileOverviewJsDoc, (, Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =]
[}, private, void, setFileOverviewJsDoc, (, Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (]
[}, private, void, setFileOverviewJsDoc, (, Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (]
[void, setFileOverviewJsDoc, (, Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=]
[Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=, null, ), {]
[Node, irNode, ), {, JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=, null, ), {]
[JSDocInfo, rootNodeJsDoc, =, rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=, null, ), {, irNode, ., setJSDocInfo, (]
[rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=, null, ), {, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;]
[rootNodeJsDocHolder, ., getJSDocInfo, (, ), ;, if, (, rootNodeJsDoc, !=, null, ), {, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;]
[), ;, if, (, rootNodeJsDoc, !=, null, ), {, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (]
[null, ), {, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (]
[null, ), {, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (]
[{, irNode, ., setJSDocInfo, (, rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=]
[rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (]
[rootNodeJsDoc, ), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (]
[), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (, (]
[), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (, (]
[), ;, rootNodeJsDoc, ., setAssociatedNode, (, irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (, (]
[irNode, ), ;, }, if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=]
[}, if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=, null, ), &&]
[if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=, null, ), &&, (]
[if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=, null, ), &&, (]
[if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=, null, ), &&, (]
[if, (, fileOverviewInfo, !=, null, ), {, if, (, (, irNode, ., getJSDocInfo, (, ), !=, null, ), &&, (]
[irNode, ., getJSDocInfo, (, ), !=, null, ), &&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=]
[), !=, null, ), &&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), ), {]
[), !=, null, ), &&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), ), {]
[&&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), ), {, fileOverviewInfo, ., setLicense, (]
[&&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), ), {, fileOverviewInfo, ., setLicense, (]
[&&, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), ), {, fileOverviewInfo, ., setLicense, (]
[null, ), ), {, fileOverviewInfo, ., setLicense, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ;, }]
[null, ), ), {, fileOverviewInfo, ., setLicense, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ;, }]
[fileOverviewInfo, ., setLicense, (, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ;, }, irNode, ., setJSDocInfo, (]
[(, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ;, }, irNode, ., setJSDocInfo, (, fileOverviewInfo, ), ;]
[(, irNode, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ;, }, irNode, ., setJSDocInfo, (, fileOverviewInfo, ), ;]
[(, ), ., getLicense, (, ), ), ;, }, irNode, ., setJSDocInfo, (, fileOverviewInfo, ), ;, fileOverviewInfo, ., setAssociatedNode, (]
[fileOverviewInfo, ., setAssociatedNode, (, irNode, ), ;, }, }, private, Node, transformBlock, (, AstNode, node, ), {, Node, irNode, =]
[setAssociatedNode, (, irNode, ), ;, }, }, private, Node, transformBlock, (, AstNode, node, ), {, Node, irNode, =, transform, (]
[}, }, private, Node, transformBlock, (, AstNode, node, ), {, Node, irNode, =, transform, (, node, ), ;, if, (]
[}, private, Node, transformBlock, (, AstNode, node, ), {, Node, irNode, =, transform, (, node, ), ;, if, (, !]
[}, private, Node, transformBlock, (, AstNode, node, ), {, Node, irNode, =, transform, (, node, ), ;, if, (, !]
[Node, irNode, =, transform, (, node, ), ;, if, (, !, irNode, ., isBlock, (, ), ), {, if, (]
[Node, irNode, =, transform, (, node, ), ;, if, (, !, irNode, ., isBlock, (, ), ), {, if, (]
[;, if, (, !, irNode, ., isBlock, (, ), ), {, if, (, irNode, ., isEmpty, (, ), ), {]
[;, if, (, !, irNode, ., isBlock, (, ), ), {, if, (, irNode, ., isEmpty, (, ), ), {]
[irNode, ., isBlock, (, ), ), {, if, (, irNode, ., isEmpty, (, ), ), {, irNode, ., setType, (]
[irNode, ., isBlock, (, ), ), {, if, (, irNode, ., isEmpty, (, ), ), {, irNode, ., setType, (]
[), {, if, (, irNode, ., isEmpty, (, ), ), {, irNode, ., setType, (, Token, ., BLOCK, ), ;]
[), {, if, (, irNode, ., isEmpty, (, ), ), {, irNode, ., setType, (, Token, ., BLOCK, ), ;]
[irNode, ., isEmpty, (, ), ), {, irNode, ., setType, (, Token, ., BLOCK, ), ;, irNode, ., setWasEmptyNode, (]
[setType, (, Token, ., BLOCK, ), ;, irNode, ., setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =]
[Token, ., BLOCK, ), ;, irNode, ., setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =, newNode, (]
[Token, ., BLOCK, ), ;, irNode, ., setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =, newNode, (]
[;, irNode, ., setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =, newNode, (, Token, ., BLOCK, ,]
[setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =, newNode, (, Token, ., BLOCK, ,, irNode, ), ;]
[setWasEmptyNode, (, true, ), ;, }, else, {, Node, newBlock, =, newNode, (, Token, ., BLOCK, ,, irNode, ), ;]
[;, }, else, {, Node, newBlock, =, newNode, (, Token, ., BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (]
[;, }, else, {, Node, newBlock, =, newNode, (, Token, ., BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (]
[newNode, (, Token, ., BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (, irNode, ., getLineno, (, ), ), ;]
[newNode, (, Token, ., BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (, irNode, ., getLineno, (, ), ), ;]
[BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (, irNode, ., getLineno, (, ), ), ;, newBlock, ., setCharno, (]
[BLOCK, ,, irNode, ), ;, newBlock, ., setLineno, (, irNode, ., getLineno, (, ), ), ;, newBlock, ., setCharno, (]
[setLineno, (, irNode, ., getLineno, (, ), ), ;, newBlock, ., setCharno, (, irNode, ., getCharno, (, ), ), ;]
[irNode, ., getLineno, (, ), ), ;, newBlock, ., setCharno, (, irNode, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (]
[getLineno, (, ), ), ;, newBlock, ., setCharno, (, irNode, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newBlock, ,]
[), ;, newBlock, ., setCharno, (, irNode, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newBlock, ,, node, ), ;]
[newBlock, ., setCharno, (, irNode, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newBlock, ,, node, ), ;, irNode, =]
[., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newBlock, ,, node, ), ;, irNode, =, newBlock, ;, }, }, return]
[=, newBlock, ;, }, }, return, irNode, ;, }, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =]
[=, newBlock, ;, }, }, return, irNode, ;, }, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =]
[}, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =, comment, ., getValue, (, ), ;, if, (]
[}, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =, comment, ., getValue, (, ), ;, if, (]
[}, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =, comment, ., getValue, (, ), ;, if, (]
[}, private, void, handleBlockComment, (, Comment, comment, ), {, String, value, =, comment, ., getValue, (, ), ;, if, (]
[(, Comment, comment, ), {, String, value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (]
[), {, String, value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=]
[{, String, value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=, -]
[value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||]
[value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||]
[value, =, comment, ., getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||]
[getValue, (, ), ;, if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||, value, ., indexOf, (]
[;, if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||, value, ., indexOf, (, "\n * @", ), !=]
[if, (, value, ., indexOf, (, "/* @", ), !=, -, 1, ||, value, ., indexOf, (, "\n * @", ), !=, -]
[., indexOf, (, "/* @", ), !=, -, 1, ||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {]
[., indexOf, (, "/* @", ), !=, -, 1, ||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {]
[), !=, -, 1, ||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {, errorReporter, ., warning, (]
[-, 1, ||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {, errorReporter, ., warning, (, SUSPICIOUS_COMMENT_WARNING, ,]
[||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {, errorReporter, ., warning, (, SUSPICIOUS_COMMENT_WARNING, ,, sourceName, ,]
[||, value, ., indexOf, (, "\n * @", ), !=, -, 1, ), {, errorReporter, ., warning, (, SUSPICIOUS_COMMENT_WARNING, ,, sourceName, ,]
[), !=, -, 1, ), {, errorReporter, ., warning, (, SUSPICIOUS_COMMENT_WARNING, ,, sourceName, ,, comment, ., getLineno, (, ), ,]
[-, 1, ), {, errorReporter, ., warning, (, SUSPICIOUS_COMMENT_WARNING, ,, sourceName, ,, comment, ., getLineno, (, ), ,, "", ,]
[(, ), ,, "", ,, 0, ), ;, }, }, private, boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (]
[(, ), ,, "", ,, 0, ), ;, }, }, private, boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (]
[(, ), ,, "", ,, 0, ), ;, }, }, private, boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (]
[), ;, }, }, private, boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (, jsDocParser, ., getFileOverviewJSDocInfo, (, ), !=]
[}, private, boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (, jsDocParser, ., getFileOverviewJSDocInfo, (, ), !=, fileOverviewInfo, ), {]
[boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (, jsDocParser, ., getFileOverviewJSDocInfo, (, ), !=, fileOverviewInfo, ), {, fileOverviewInfo, =]
[boolean, handlePossibleFileOverviewJsDoc, (, JsDocInfoParser, jsDocParser, ), {, if, (, jsDocParser, ., getFileOverviewJSDocInfo, (, ), !=, fileOverviewInfo, ), {, fileOverviewInfo, =]
[if, (, jsDocParser, ., getFileOverviewJSDocInfo, (, ), !=, fileOverviewInfo, ), {, fileOverviewInfo, =, jsDocParser, ., getFileOverviewJSDocInfo, (, ), ;, return]
[getFileOverviewJSDocInfo, (, ), !=, fileOverviewInfo, ), {, fileOverviewInfo, =, jsDocParser, ., getFileOverviewJSDocInfo, (, ), ;, return, true, ;, }, return]
[;, }, return, false, ;, }, private, void, handlePossibleFileOverviewJsDoc, (, Comment, comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =]
[return, false, ;, }, private, void, handlePossibleFileOverviewJsDoc, (, Comment, comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (]
[;, }, private, void, handlePossibleFileOverviewJsDoc, (, Comment, comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,]
[void, handlePossibleFileOverviewJsDoc, (, Comment, comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;]
[void, handlePossibleFileOverviewJsDoc, (, Comment, comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;]
[comment, ,, Node, irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (]
[irNode, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (, comment, ), ;]
[{, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (, comment, ), ;, handlePossibleFileOverviewJsDoc, (]
[handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ;, }, private, JSDocInfo, handleJsDoc, (, AstNode, node, ,, Node, irNode, ), {, Comment, comment, =]
[handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ;, }, private, JSDocInfo, handleJsDoc, (, AstNode, node, ,, Node, irNode, ), {, Comment, comment, =]
[handleJsDoc, (, AstNode, node, ,, Node, irNode, ), {, Comment, comment, =, node, ., getJsDocNode, (, ), ;, if, (]
[handleJsDoc, (, AstNode, node, ,, Node, irNode, ), {, Comment, comment, =, node, ., getJsDocNode, (, ), ;, if, (]
[AstNode, node, ,, Node, irNode, ), {, Comment, comment, =, node, ., getJsDocNode, (, ), ;, if, (, comment, !=]
[{, Comment, comment, =, node, ., getJsDocNode, (, ), ;, if, (, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =]
[comment, =, node, ., getJsDocNode, (, ), ;, if, (, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (]
[node, ., getJsDocNode, (, ), ;, if, (, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,]
[(, ), ;, if, (, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;]
[(, ), ;, if, (, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;]
[(, comment, !=, null, ), {, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (]
[{, JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (, comment, ), ;, if, (]
[JsDocInfoParser, jsDocParser, =, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (, comment, ), ;, if, (, !]
[=, createJsDocInfoParser, (, comment, ,, irNode, ), ;, parsedComments, ., add, (, comment, ), ;, if, (, !, handlePossibleFileOverviewJsDoc, (]
[;, parsedComments, ., add, (, comment, ), ;, if, (, !, handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ), {, JSDocInfo, info, =]
[;, parsedComments, ., add, (, comment, ), ;, if, (, !, handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ), {, JSDocInfo, info, =]
[if, (, !, handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ), {, JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (]
[if, (, !, handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ), {, JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (]
[!, handlePossibleFileOverviewJsDoc, (, jsDocParser, ), ), {, JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (, info, !=]
[jsDocParser, ), ), {, JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (, info, !=, null, ), {]
[), {, JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, validateTypeAnnotations, (]
[JSDocInfo, info, =, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, validateTypeAnnotations, (, info, ,]
[=, jsDocParser, ., retrieveAndResetParsedJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, validateTypeAnnotations, (, info, ,, node, ,]
[), ;, if, (, info, !=, null, ), {, validateTypeAnnotations, (, info, ,, node, ,, irNode, ), ;, }, return]
[!=, null, ), {, validateTypeAnnotations, (, info, ,, node, ,, irNode, ), ;, }, return, info, ;, }, }, return]
[return, null, ;, }, private, void, validateTypeAnnotations, (, JSDocInfo, info, ,, AstNode, node, ,, Node, irNode, ), {, if, (]
[return, null, ;, }, private, void, validateTypeAnnotations, (, JSDocInfo, info, ,, AstNode, node, ,, Node, irNode, ), {, if, (]
[,, AstNode, node, ,, Node, irNode, ), {, if, (, info, ., hasType, (, ), ), {, boolean, valid, =]
[Node, irNode, ), {, if, (, info, ., hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (]
[Node, irNode, ), {, if, (, info, ., hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[hasType, (, ), ), {, boolean, valid, =, false, ;, switch, (, node, ., getType, (, ), ), {, case]
[getType, (, ), ), {, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :]
[), ), {, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =]
[), ), {, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[., javascript, ., rhino, ., head, ., Token, ., LP, :, valid, =, node, instanceof, ParenthesizedExpression, ;, break, ;, case]
[instanceof, ParenthesizedExpression, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, valid, =, true, ;, break, ;, case]
[break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, )]
[google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;]
[javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;, valid, =]
[javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;, valid, =]
[javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;, valid, =]
[Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==]
[Token, ., FUNCTION, :, FunctionNode, fnNode, =, (, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[(, FunctionNode, ), node, ;, valid, =, fnNode, ., getFunctionType, (, ), ==, FunctionNode, ., FUNCTION_STATEMENT, ;, break, ;, case]
[., FUNCTION_STATEMENT, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =]
[javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||]
[javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||]
[javascript, ., rhino, ., head, ., Token, ., NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||]
[NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||, node, ., getParent, (, ), instanceof, CatchClause, ||]
[NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||, node, ., getParent, (, ), instanceof, CatchClause, ||]
[NAME, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ||, node, ., getParent, (, ), instanceof, CatchClause, ||]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[||, node, ., getParent, (, ), instanceof, CatchClause, ||, node, ., getParent, (, ), instanceof, FunctionNode, ;, break, ;, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[FunctionNode, ;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., GET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[Token, ., SET, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, case]
[., Token, ., NUMBER, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :]
[., NUMBER, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, valid, =]
[., NUMBER, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, valid, =]
[., NUMBER, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, valid, =]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[., head, ., Token, ., STRING, :, valid, =, node, ., getParent, (, ), instanceof, ObjectProperty, ;, break, ;, case]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, if, (]
[;, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, if, (]
[., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, if, (, node, instanceof, Assignment, ), {]
[., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, if, (, node, instanceof, Assignment, ), {, valid, =]
[., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, if, (, node, instanceof, Assignment, ), {, valid, =]
[., rhino, ., head, ., Token, ., ASSIGN, :, if, (, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (]
[., rhino, ., head, ., Token, ., ASSIGN, :, if, (, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (]
[ASSIGN, :, if, (, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (, node, ., getParent, (, ), ), &&]
[if, (, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (, node, ., getParent, (, ), ), &&, isPropAccess, (]
[if, (, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (, node, ., getParent, (, ), ), &&, isPropAccess, (]
[(, node, instanceof, Assignment, ), {, valid, =, isExprStmt, (, node, ., getParent, (, ), ), &&, isPropAccess, (, (]
[Assignment, ), {, valid, =, isExprStmt, (, node, ., getParent, (, ), ), &&, isPropAccess, (, (, (, Assignment, )]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[), &&, isPropAccess, (, (, (, Assignment, ), node, ), ., getLeft, (, ), ), ;, }, break, ;, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[;, }, break, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, case]
[., Token, ., GETPROP, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :]
[., GETPROP, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, valid, =]
[:, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, valid, =, isExprStmt, (]
[:, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, valid, =, isExprStmt, (]
[Token, ., GETELEM, :, valid, =, isExprStmt, (, node, ., getParent, (, ), ), ;, break, ;, }, if, (]
[., GETELEM, :, valid, =, isExprStmt, (, node, ., getParent, (, ), ), ;, break, ;, }, if, (, !]
[valid, =, isExprStmt, (, node, ., getParent, (, ), ), ;, break, ;, }, if, (, !, valid, ), {]
[valid, =, isExprStmt, (, node, ., getParent, (, ), ), ;, break, ;, }, if, (, !, valid, ), {]
[node, ., getParent, (, ), ), ;, break, ;, }, if, (, !, valid, ), {, errorReporter, ., warning, (]
[getParent, (, ), ), ;, break, ;, }, if, (, !, valid, ), {, errorReporter, ., warning, (, MISPLACED_TYPE_ANNOTATION, ,]
[), ), ;, break, ;, }, if, (, !, valid, ), {, errorReporter, ., warning, (, MISPLACED_TYPE_ANNOTATION, ,, sourceName, ,]
[), ), ;, break, ;, }, if, (, !, valid, ), {, errorReporter, ., warning, (, MISPLACED_TYPE_ANNOTATION, ,, sourceName, ,]
[if, (, !, valid, ), {, errorReporter, ., warning, (, MISPLACED_TYPE_ANNOTATION, ,, sourceName, ,, node, ., getLineno, (, ), ,]
[!, valid, ), {, errorReporter, ., warning, (, MISPLACED_TYPE_ANNOTATION, ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[(, ), ,, "", ,, 0, ), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return]
[(, ), ,, "", ,, 0, ), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return]
[(, ), ,, "", ,, 0, ), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return]
[(, ), ,, "", ,, 0, ), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[), ;, }, }, }, private, boolean, isPropAccess, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, ||, node, ., getType, (, ), ==]
[javascript, ., rhino, ., head, ., Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return]
[javascript, ., rhino, ., head, ., Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return]
[javascript, ., rhino, ., head, ., Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return]
[javascript, ., rhino, ., head, ., Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[Token, ., GETELEM, ;, }, private, boolean, isExprStmt, (, AstNode, node, ), {, return, node, ., getType, (, ), ==]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, ||, node, ., getType, (, ), ==]
[rhino, ., head, ., Token, ., EXPR_VOID, ;, }, private, Node, transform, (, AstNode, node, ), {, Node, irNode, =]
[head, ., Token, ., EXPR_VOID, ;, }, private, Node, transform, (, AstNode, node, ), {, Node, irNode, =, justTransform, (]
[}, private, Node, transform, (, AstNode, node, ), {, Node, irNode, =, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =]
[Node, transform, (, AstNode, node, ), {, Node, irNode, =, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (]
[(, AstNode, node, ), {, Node, irNode, =, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,]
[Node, irNode, =, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (]
[Node, irNode, =, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (]
[=, justTransform, (, node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=]
[node, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {]
[;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =]
[jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (]
[handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (, node, ,]
[node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (, node, ,, jsDocInfo, ,]
[), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (, node, ,, jsDocInfo, ,, irNode, ), ;]
[), ;, if, (, jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (, node, ,, jsDocInfo, ,, irNode, ), ;]
[jsDocInfo, !=, null, ), {, irNode, =, maybeInjectCastNode, (, node, ,, jsDocInfo, ,, irNode, ), ;, irNode, ., setJSDocInfo, (]
[{, irNode, =, maybeInjectCastNode, (, node, ,, jsDocInfo, ,, irNode, ), ;, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }]
[=, maybeInjectCastNode, (, node, ,, jsDocInfo, ,, irNode, ), ;, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (]
[(, node, ,, jsDocInfo, ,, irNode, ), ;, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,]
[,, irNode, ), ;, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,, node, ), ;, return]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[return, irNode, ;, }, private, Node, maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[maybeInjectCastNode, (, AstNode, node, ,, JSDocInfo, info, ,, Node, irNode, ), {, if, (, node, ., getType, (, ), ==]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, &&]
[node, ., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, &&]
[), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, &&, node, instanceof, ParenthesizedExpression, &&]
[), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, &&, node, instanceof, ParenthesizedExpression, &&]
[javascript, ., rhino, ., head, ., Token, ., LP, &&, node, instanceof, ParenthesizedExpression, &&, info, ., hasType, (, ), &&]
[., rhino, ., head, ., Token, ., LP, &&, node, instanceof, ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !]
[., rhino, ., head, ., Token, ., LP, &&, node, instanceof, ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !]
[LP, &&, node, instanceof, ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !, irNode, ., isObjectLit, (, ), ), {]
[node, instanceof, ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !, irNode, ., isObjectLit, (, ), ), {, irNode, =]
[ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !, irNode, ., isObjectLit, (, ), ), {, irNode, =, newNode, (]
[ParenthesizedExpression, &&, info, ., hasType, (, ), &&, !, irNode, ., isObjectLit, (, ), ), {, irNode, =, newNode, (]
[hasType, (, ), &&, !, irNode, ., isObjectLit, (, ), ), {, irNode, =, newNode, (, Token, ., CAST, ,]
[irNode, ., isObjectLit, (, ), ), {, irNode, =, newNode, (, Token, ., CAST, ,, irNode, ), ;, }, return]
[,, irNode, ), ;, }, return, irNode, ;, }, private, Node, transformNameAsString, (, Name, node, ), {, Node, irNode, =]
[,, irNode, ), ;, }, return, irNode, ;, }, private, Node, transformNameAsString, (, Name, node, ), {, Node, irNode, =]
[}, return, irNode, ;, }, private, Node, transformNameAsString, (, Name, node, ), {, Node, irNode, =, transformDispatcher, ., processName, (]
[irNode, ;, }, private, Node, transformNameAsString, (, Name, node, ), {, Node, irNode, =, transformDispatcher, ., processName, (, node, ,]
[(, Name, node, ), {, Node, irNode, =, transformDispatcher, ., processName, (, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =]
[node, ), {, Node, irNode, =, transformDispatcher, ., processName, (, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (]
[{, Node, irNode, =, transformDispatcher, ., processName, (, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,]
[., processName, (, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (]
[., processName, (, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (]
[(, node, ,, true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=]
[true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {]
[true, ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {]
[jsDocInfo, =, handleJsDoc, (, node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (]
[node, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }]
[irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (]
[;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,]
[!=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,, node, ), ;, return]
[irNode, ,, node, ), ;, return, irNode, ;, }, private, Node, transformNumberAsString, (, NumberLiteral, literalNode, ), {, Node, irNode, =]
[node, ), ;, return, irNode, ;, }, private, Node, transformNumberAsString, (, NumberLiteral, literalNode, ), {, Node, irNode, =, newStringNode, (]
[;, return, irNode, ;, }, private, Node, transformNumberAsString, (, NumberLiteral, literalNode, ), {, Node, irNode, =, newStringNode, (, getStringValue, (]
[;, return, irNode, ;, }, private, Node, transformNumberAsString, (, NumberLiteral, literalNode, ), {, Node, irNode, =, newStringNode, (, getStringValue, (]
[), {, Node, irNode, =, newStringNode, (, getStringValue, (, literalNode, ., getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =]
[Node, irNode, =, newStringNode, (, getStringValue, (, literalNode, ., getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (]
[=, newStringNode, (, getStringValue, (, literalNode, ., getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,]
[literalNode, ., getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (]
[literalNode, ., getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (]
[getNumber, (, ), ), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (, jsDocInfo, !=]
[), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {]
[), ), ;, JSDocInfo, jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {]
[jsDocInfo, =, handleJsDoc, (, literalNode, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (]
[literalNode, ,, irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }]
[irNode, ), ;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (]
[;, if, (, jsDocInfo, !=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,]
[!=, null, ), {, irNode, ., setJSDocInfo, (, jsDocInfo, ), ;, }, setSourceInfo, (, irNode, ,, literalNode, ), ;, return]
[,, literalNode, ), ;, return, irNode, ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =]
[;, return, irNode, ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, )]
[}, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (]
[}, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (]
[static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==]
[double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return]
[double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return]
[long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (]
[toString, (, value, ), ;, }, }, private, void, setSourceInfo, (, Node, irNode, ,, AstNode, node, ), {, if, (]
[toString, (, value, ), ;, }, }, private, void, setSourceInfo, (, Node, irNode, ,, AstNode, node, ), {, if, (]
[toString, (, value, ), ;, }, }, private, void, setSourceInfo, (, Node, irNode, ,, AstNode, node, ), {, if, (]
[}, private, void, setSourceInfo, (, Node, irNode, ,, AstNode, node, ), {, if, (, irNode, ., getLineno, (, ), ==]
[private, void, setSourceInfo, (, Node, irNode, ,, AstNode, node, ), {, if, (, irNode, ., getLineno, (, ), ==, -]
[,, AstNode, node, ), {, if, (, irNode, ., getLineno, (, ), ==, -, 1, ), {, int, lineno, =]
[,, AstNode, node, ), {, if, (, irNode, ., getLineno, (, ), ==, -, 1, ), {, int, lineno, =]
[(, irNode, ., getLineno, (, ), ==, -, 1, ), {, int, lineno, =, node, ., getLineno, (, ), ;]
[(, irNode, ., getLineno, (, ), ==, -, 1, ), {, int, lineno, =, node, ., getLineno, (, ), ;]
[(, ), ==, -, 1, ), {, int, lineno, =, node, ., getLineno, (, ), ;, irNode, ., setLineno, (]
[{, int, lineno, =, node, ., getLineno, (, ), ;, irNode, ., setLineno, (, lineno, ), ;, int, charno, =]
[lineno, =, node, ., getLineno, (, ), ;, irNode, ., setLineno, (, lineno, ), ;, int, charno, =, position2charno, (]
[lineno, =, node, ., getLineno, (, ), ;, irNode, ., setLineno, (, lineno, ), ;, int, charno, =, position2charno, (]
[;, irNode, ., setLineno, (, lineno, ), ;, int, charno, =, position2charno, (, node, ., getAbsolutePosition, (, ), ), ;]
[;, irNode, ., setLineno, (, lineno, ), ;, int, charno, =, position2charno, (, node, ., getAbsolutePosition, (, ), ), ;]
[(, lineno, ), ;, int, charno, =, position2charno, (, node, ., getAbsolutePosition, (, ), ), ;, irNode, ., setCharno, (]
[;, int, charno, =, position2charno, (, node, ., getAbsolutePosition, (, ), ), ;, irNode, ., setCharno, (, charno, ), ;]
[charno, =, position2charno, (, node, ., getAbsolutePosition, (, ), ), ;, irNode, ., setCharno, (, charno, ), ;, maybeSetLengthFrom, (]
[position2charno, (, node, ., getAbsolutePosition, (, ), ), ;, irNode, ., setCharno, (, charno, ), ;, maybeSetLengthFrom, (, irNode, ,]
[,, node, ), ;, }, }, private, JsDocInfoParser, createJsDocInfoParser, (, Comment, node, ,, Node, irNode, ), {, String, comment, =]
[,, node, ), ;, }, }, private, JsDocInfoParser, createJsDocInfoParser, (, Comment, node, ,, Node, irNode, ), {, String, comment, =]
[(, Comment, node, ,, Node, irNode, ), {, String, comment, =, node, ., getValue, (, ), ;, int, lineno, =]
[(, Comment, node, ,, Node, irNode, ), {, String, comment, =, node, ., getValue, (, ), ;, int, lineno, =]
[comment, =, node, ., getValue, (, ), ;, int, lineno, =, node, ., getLineno, (, ), ;, int, position, =]
[comment, =, node, ., getValue, (, ), ;, int, lineno, =, node, ., getLineno, (, ), ;, int, position, =]
[lineno, =, node, ., getLineno, (, ), ;, int, position, =, node, ., getAbsolutePosition, (, ), ;, int, numOpeningChars, =]
[(, ), ;, int, position, =, node, ., getAbsolutePosition, (, ), ;, int, numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =]
[int, position, =, node, ., getAbsolutePosition, (, ), ;, int, numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (]
[node, ., getAbsolutePosition, (, ), ;, int, numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (]
[node, ., getAbsolutePosition, (, ), ;, int, numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (]
[), ;, int, numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (]
[numOpeningChars, =, 3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,]
[3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,]
[3, ;, JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,]
[JsDocInfoParser, jsdocParser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,, position2charno, (]
[new, JsDocInfoParser, (, new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,, position2charno, (, position, ), +]
[new, JsDocTokenStream, (, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,]
[(, comment, ., substring, (, numOpeningChars, ), ,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,, node, ,]
[., substring, (, numOpeningChars, ), ,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,, node, ,, irNode, ,]
[(, numOpeningChars, ), ,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,]
[,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,, errorReporter, ), ;]
[,, lineno, ,, position2charno, (, position, ), +, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,, errorReporter, ), ;]
[(, position, ), +, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (]
[+, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;]
[+, numOpeningChars, ), ,, node, ,, irNode, ,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;]
[node, ,, irNode, ,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;, jsdocParser, ., setFileOverviewJSDocInfo, (]
[,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;, jsdocParser, ., setFileOverviewJSDocInfo, (, fileOverviewInfo, ), ;]
[,, config, ,, errorReporter, ), ;, jsdocParser, ., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;, jsdocParser, ., setFileOverviewJSDocInfo, (, fileOverviewInfo, ), ;]
[., setFileLevelJsDocBuilder, (, fileLevelJsDocBuilder, ), ;, jsdocParser, ., setFileOverviewJSDocInfo, (, fileOverviewInfo, ), ;, jsdocParser, ., parse, (, ), ;, return]
[(, ), ;, return, jsdocParser, ;, }, private, void, maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (]
[(, ), ;, return, jsdocParser, ;, }, private, void, maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (]
[;, }, private, void, maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (, config, ., isIdeMode, ), {]
[;, }, private, void, maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (, config, ., isIdeMode, ), {]
[maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (, config, ., isIdeMode, ), {, node, ., setLength, (]
[maybeSetLengthFrom, (, Node, node, ,, AstNode, source, ), {, if, (, config, ., isIdeMode, ), {, node, ., setLength, (]
[source, ., getLength, (, ), ), ;, }, }, private, int, position2charno, (, int, position, ), {, int, lineIndex, =]
[source, ., getLength, (, ), ), ;, }, }, private, int, position2charno, (, int, position, ), {, int, lineIndex, =]
[), ), ;, }, }, private, int, position2charno, (, int, position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (]
[;, }, }, private, int, position2charno, (, int, position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,]
[position2charno, (, int, position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,, position, ), ;, if, (]
[position2charno, (, int, position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,, position, ), ;, if, (]
[int, position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,, position, ), ;, if, (, lineIndex, ==]
[position, ), {, int, lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,, position, ), ;, if, (, lineIndex, ==, -]
[lineIndex, =, sourceString, ., lastIndexOf, (, '\n', ,, position, ), ;, if, (, lineIndex, ==, -, 1, ), {, return]
['\n', ,, position, ), ;, if, (, lineIndex, ==, -, 1, ), {, return, position, ;, }, else, {, return]
['\n', ,, position, ), ;, if, (, lineIndex, ==, -, 1, ), {, return, position, ;, }, else, {, return]
['\n', ,, position, ), ;, if, (, lineIndex, ==, -, 1, ), {, return, position, ;, }, else, {, return]
[position, ), ;, if, (, lineIndex, ==, -, 1, ), {, return, position, ;, }, else, {, return, position, -]
[;, if, (, lineIndex, ==, -, 1, ), {, return, position, ;, }, else, {, return, position, -, lineIndex, -]
[else, {, return, position, -, lineIndex, -, 1, ;, }, }, private, Node, justTransform, (, AstNode, node, ), {, return]
[else, {, return, position, -, lineIndex, -, 1, ;, }, }, private, Node, justTransform, (, AstNode, node, ), {, return]
[-, lineIndex, -, 1, ;, }, }, private, Node, justTransform, (, AstNode, node, ), {, return, transformDispatcher, ., process, (]
[Node, processGeneric, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, n, ), {, Node, node, =]
[(, com, ., google, ., javascript, ., rhino, ., head, ., Node, n, ), {, Node, node, =, newNode, (]
[., google, ., javascript, ., rhino, ., head, ., Node, n, ), {, Node, node, =, newNode, (, transformTokenType, (]
[., google, ., javascript, ., rhino, ., head, ., Node, n, ), {, Node, node, =, newNode, (, transformTokenType, (]
[(, ), ), ), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :]
[), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, n, ), {]
[), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, n, ), {]
[com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, n, ), {, node, ., addChildToBack, (]
[google, ., javascript, ., rhino, ., head, ., Node, child, :, n, ), {, node, ., addChildToBack, (, transform, (]
[., rhino, ., head, ., Node, child, :, n, ), {, node, ., addChildToBack, (, transform, (, (, AstNode, )]
[child, :, n, ), {, node, ., addChildToBack, (, transform, (, (, AstNode, ), child, ), ), ;, }, return]
[), ;, }, return, node, ;, }, private, Node, transformAsString, (, AstNode, n, ), {, Node, ret, ;, if, (]
[), ;, }, return, node, ;, }, private, Node, transformAsString, (, AstNode, n, ), {, Node, ret, ;, if, (]
[;, }, private, Node, transformAsString, (, AstNode, n, ), {, Node, ret, ;, if, (, n, instanceof, Name, ), {]
[private, Node, transformAsString, (, AstNode, n, ), {, Node, ret, ;, if, (, n, instanceof, Name, ), {, ret, =]
[transformAsString, (, AstNode, n, ), {, Node, ret, ;, if, (, n, instanceof, Name, ), {, ret, =, transformNameAsString, (]
[n, ), {, Node, ret, ;, if, (, n, instanceof, Name, ), {, ret, =, transformNameAsString, (, (, Name, )]
[(, n, instanceof, Name, ), {, ret, =, transformNameAsString, (, (, Name, ), n, ), ;, }, else, if, (]
[(, n, instanceof, Name, ), {, ret, =, transformNameAsString, (, (, Name, ), n, ), ;, }, else, if, (]
[{, ret, =, transformNameAsString, (, (, Name, ), n, ), ;, }, else, if, (, n, instanceof, NumberLiteral, ), {]
[=, transformNameAsString, (, (, Name, ), n, ), ;, }, else, if, (, n, instanceof, NumberLiteral, ), {, ret, =]
[(, (, Name, ), n, ), ;, }, else, if, (, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (]
[), n, ), ;, }, else, if, (, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (, (, NumberLiteral, )]
[;, }, else, if, (, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (, (, NumberLiteral, ), n, ), ;]
[;, }, else, if, (, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (, (, NumberLiteral, ), n, ), ;]
[(, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (, (, NumberLiteral, ), n, ), ;, ret, ., putBooleanProp, (]
[(, n, instanceof, NumberLiteral, ), {, ret, =, transformNumberAsString, (, (, NumberLiteral, ), n, ), ;, ret, ., putBooleanProp, (]
[), {, ret, =, transformNumberAsString, (, (, NumberLiteral, ), n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,]
[(, NumberLiteral, ), n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, else, {]
[), n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =]
[), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =, transform, (]
[., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =, transform, (, n, ), ;]
[., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =, transform, (, n, ), ;]
[., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =, transform, (, n, ), ;, ret, ., putBooleanProp, (]
[., QUOTED_PROP, ,, true, ), ;, }, else, {, ret, =, transform, (, n, ), ;, ret, ., putBooleanProp, (]
[), ;, }, else, {, ret, =, transform, (, n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,]
[{, ret, =, transform, (, n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }]
[{, ret, =, transform, (, n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }]
[(, n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, Preconditions, ., checkState, (]
[(, n, ), ;, ret, ., putBooleanProp, (, Node, ., QUOTED_PROP, ,, true, ), ;, }, Preconditions, ., checkState, (]
[Node, ., QUOTED_PROP, ,, true, ), ;, }, Preconditions, ., checkState, (, ret, ., isString, (, ), ), ;, return]
[isString, (, ), ), ;, return, ret, ;, }, @, Override, Node, processArrayLiteral, (, ArrayLiteral, literalNode, ), {, if, (]
[isString, (, ), ), ;, return, ret, ;, }, @, Override, Node, processArrayLiteral, (, ArrayLiteral, literalNode, ), {, if, (]
[;, }, @, Override, Node, processArrayLiteral, (, ArrayLiteral, literalNode, ), {, if, (, literalNode, ., isDestructuring, (, ), ), {]
[@, Override, Node, processArrayLiteral, (, ArrayLiteral, literalNode, ), {, if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (]
[), {, if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =]
[if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =, newNode, (]
[if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =, newNode, (]
[(, literalNode, ), ;, }, Node, node, =, newNode, (, Token, ., ARRAYLIT, ), ;, for, (, AstNode, child, :]
[(, literalNode, ), ;, }, Node, node, =, newNode, (, Token, ., ARRAYLIT, ), ;, for, (, AstNode, child, :]
[Token, ., ARRAYLIT, ), ;, for, (, AstNode, child, :, literalNode, ., getElements, (, ), ), {, Node, c, =]
[ARRAYLIT, ), ;, for, (, AstNode, child, :, literalNode, ., getElements, (, ), ), {, Node, c, =, transform, (]
[for, (, AstNode, child, :, literalNode, ., getElements, (, ), ), {, Node, c, =, transform, (, child, ), ;]
[for, (, AstNode, child, :, literalNode, ., getElements, (, ), ), {, Node, c, =, transform, (, child, ), ;]
[:, literalNode, ., getElements, (, ), ), {, Node, c, =, transform, (, child, ), ;, node, ., addChildToBack, (]
[), ), {, Node, c, =, transform, (, child, ), ;, node, ., addChildToBack, (, c, ), ;, }, return]
[c, ), ;, }, return, node, ;, }, @, Override, Node, processAssignment, (, Assignment, assignmentNode, ), {, Node, assign, =]
[;, }, return, node, ;, }, @, Override, Node, processAssignment, (, Assignment, assignmentNode, ), {, Node, assign, =, processInfixExpression, (]
[@, Override, Node, processAssignment, (, Assignment, assignmentNode, ), {, Node, assign, =, processInfixExpression, (, assignmentNode, ), ;, Node, target, =]
[@, Override, Node, processAssignment, (, Assignment, assignmentNode, ), {, Node, assign, =, processInfixExpression, (, assignmentNode, ), ;, Node, target, =]
[{, Node, assign, =, processInfixExpression, (, assignmentNode, ), ;, Node, target, =, assign, ., getFirstChild, (, ), ;, if, (]
[Node, assign, =, processInfixExpression, (, assignmentNode, ), ;, Node, target, =, assign, ., getFirstChild, (, ), ;, if, (, !]
[=, processInfixExpression, (, assignmentNode, ), ;, Node, target, =, assign, ., getFirstChild, (, ), ;, if, (, !, validAssignmentTarget, (]
[), ;, Node, target, =, assign, ., getFirstChild, (, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {]
[), ;, Node, target, =, assign, ., getFirstChild, (, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {]
[=, assign, ., getFirstChild, (, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {, errorReporter, ., error, (]
[., getFirstChild, (, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {, errorReporter, ., error, (, "invalid assignment target", ,]
[(, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {, errorReporter, ., error, (, "invalid assignment target", ,, sourceName, ,]
[(, ), ;, if, (, !, validAssignmentTarget, (, target, ), ), {, errorReporter, ., error, (, "invalid assignment target", ,, sourceName, ,]
[validAssignmentTarget, (, target, ), ), {, errorReporter, ., error, (, "invalid assignment target", ,, sourceName, ,, target, ., getLineno, (, ), ,]
[target, ), ), {, errorReporter, ., error, (, "invalid assignment target", ,, sourceName, ,, target, ., getLineno, (, ), ,, "", ,]
[., error, (, "invalid assignment target", ,, sourceName, ,, target, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return]
[0, ), ;, }, return, assign, ;, }, @, Override, Node, processAstRoot, (, AstRoot, rootNode, ), {, Node, node, =]
[;, }, return, assign, ;, }, @, Override, Node, processAstRoot, (, AstRoot, rootNode, ), {, Node, node, =, newNode, (]
[;, }, return, assign, ;, }, @, Override, Node, processAstRoot, (, AstRoot, rootNode, ), {, Node, node, =, newNode, (]
[Token, ., SCRIPT, ), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :]
[), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, rootNode, ), {]
[), ;, for, (, com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, rootNode, ), {]
[com, ., google, ., javascript, ., rhino, ., head, ., Node, child, :, rootNode, ), {, node, ., addChildToBack, (]
[google, ., javascript, ., rhino, ., head, ., Node, child, :, rootNode, ), {, node, ., addChildToBack, (, transform, (]
[., rhino, ., head, ., Node, child, :, rootNode, ), {, node, ., addChildToBack, (, transform, (, (, AstNode, )]
[Node, child, :, rootNode, ), {, node, ., addChildToBack, (, transform, (, (, AstNode, ), child, ), ), ;, }]
[:, rootNode, ), {, node, ., addChildToBack, (, transform, (, (, AstNode, ), child, ), ), ;, }, parseDirectives, (]
[node, ., addChildToBack, (, transform, (, (, AstNode, ), child, ), ), ;, }, parseDirectives, (, node, ), ;, return]
[), ;, return, node, ;, }, private, void, parseDirectives, (, Node, node, ), {, Set, <, String, >, directives, =]
[;, }, private, void, parseDirectives, (, Node, node, ), {, Set, <, String, >, directives, =, null, ;, while, (]
[private, void, parseDirectives, (, Node, node, ), {, Set, <, String, >, directives, =, null, ;, while, (, isDirective, (]
[private, void, parseDirectives, (, Node, node, ), {, Set, <, String, >, directives, =, null, ;, while, (, isDirective, (]
[>, directives, =, null, ;, while, (, isDirective, (, node, ., getFirstChild, (, ), ), ), {, String, directive, =]
[>, directives, =, null, ;, while, (, isDirective, (, node, ., getFirstChild, (, ), ), ), {, String, directive, =]
[>, directives, =, null, ;, while, (, isDirective, (, node, ., getFirstChild, (, ), ), ), {, String, directive, =]
[>, directives, =, null, ;, while, (, isDirective, (, node, ., getFirstChild, (, ), ), ), {, String, directive, =]
[{, String, directive, =, node, ., removeFirstChild, (, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[{, String, directive, =, node, ., removeFirstChild, (, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[directive, =, node, ., removeFirstChild, (, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (, directives, ==]
[., removeFirstChild, (, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (, directives, ==, null, ), {]
[(, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (, directives, ==, null, ), {, directives, =]
[(, ), ., getFirstChild, (, ), ., getString, (, ), ;, if, (, directives, ==, null, ), {, directives, =]
[(, ), ., getString, (, ), ;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (]
[;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, directive, ), ;, }, else, {]
[;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, directive, ), ;, }, else, {]
[==, null, ), {, directives, =, Sets, ., newHashSet, (, directive, ), ;, }, else, {, directives, ., add, (]
[., newHashSet, (, directive, ), ;, }, else, {, directives, ., add, (, directive, ), ;, }, }, if, (]
[., newHashSet, (, directive, ), ;, }, else, {, directives, ., add, (, directive, ), ;, }, }, if, (]
[(, directive, ), ;, }, else, {, directives, ., add, (, directive, ), ;, }, }, if, (, directives, !=]
[;, }, else, {, directives, ., add, (, directive, ), ;, }, }, if, (, directives, !=, null, ), {]
[;, }, else, {, directives, ., add, (, directive, ), ;, }, }, if, (, directives, !=, null, ), {]
[directives, ., add, (, directive, ), ;, }, }, if, (, directives, !=, null, ), {, node, ., setDirectives, (]
[{, node, ., setDirectives, (, directives, ), ;, }, }, private, boolean, isDirective, (, Node, n, ), {, if, (]
[{, node, ., setDirectives, (, directives, ), ;, }, }, private, boolean, isDirective, (, Node, n, ), {, if, (]
[., setDirectives, (, directives, ), ;, }, }, private, boolean, isDirective, (, Node, n, ), {, if, (, n, ==]
[directives, ), ;, }, }, private, boolean, isDirective, (, Node, n, ), {, if, (, n, ==, null, ), return]
[private, boolean, isDirective, (, Node, n, ), {, if, (, n, ==, null, ), return, false, ;, int, nType, =]
[private, boolean, isDirective, (, Node, n, ), {, if, (, n, ==, null, ), return, false, ;, int, nType, =]
[{, if, (, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return]
[{, if, (, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return]
[{, if, (, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return]
[{, if, (, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return]
[(, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return, nType, ==]
[(, n, ==, null, ), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return, nType, ==]
[), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return, nType, ==, Token, ., EXPR_RESULT, &&]
[), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return, nType, ==, Token, ., EXPR_RESULT, &&]
[), return, false, ;, int, nType, =, n, ., getType, (, ), ;, return, nType, ==, Token, ., EXPR_RESULT, &&]
[(, ), ;, return, nType, ==, Token, ., EXPR_RESULT, &&, n, ., getFirstChild, (, ), ., isString, (, ), &&]
[(, ), ;, return, nType, ==, Token, ., EXPR_RESULT, &&, n, ., getFirstChild, (, ), ., isString, (, ), &&]
[nType, ==, Token, ., EXPR_RESULT, &&, n, ., getFirstChild, (, ), ., isString, (, ), &&, ALLOWED_DIRECTIVES, ., contains, (]
[nType, ==, Token, ., EXPR_RESULT, &&, n, ., getFirstChild, (, ), ., isString, (, ), &&, ALLOWED_DIRECTIVES, ., contains, (]
[nType, ==, Token, ., EXPR_RESULT, &&, n, ., getFirstChild, (, ), ., isString, (, ), &&, ALLOWED_DIRECTIVES, ., contains, (]
[getFirstChild, (, ), ., getString, (, ), ), ;, }, @, Override, Node, processBlock, (, Block, blockNode, ), {, return]
[), ., getString, (, ), ), ;, }, @, Override, Node, processBlock, (, Block, blockNode, ), {, return, processGeneric, (]
[{, return, processGeneric, (, blockNode, ), ;, }, @, Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =]
[processGeneric, (, blockNode, ), ;, }, @, Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =, newNode, (]
[processGeneric, (, blockNode, ), ;, }, @, Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =, newNode, (]
[Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., BREAK, ), ;, if, (]
[Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., BREAK, ), ;, if, (]
[Override, Node, processBreakStatement, (, BreakStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., BREAK, ), ;, if, (]
[), {, Node, node, =, newNode, (, Token, ., BREAK, ), ;, if, (, statementNode, ., getBreakLabel, (, ), !=]
[(, Token, ., BREAK, ), ;, if, (, statementNode, ., getBreakLabel, (, ), !=, null, ), {, Node, labelName, =]
[., BREAK, ), ;, if, (, statementNode, ., getBreakLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (]
[., BREAK, ), ;, if, (, statementNode, ., getBreakLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (]
[., getBreakLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;]
[., getBreakLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;]
[!=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;, labelName, ., setType, (]
[!=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;, labelName, ., setType, (]
[labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;]
[labelName, =, transform, (, statementNode, ., getBreakLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;]
[statementNode, ., getBreakLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;, node, ., addChildToBack, (]
[), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;, node, ., addChildToBack, (, labelName, ), ;, }, return]
[labelName, ), ;, }, return, node, ;, }, @, Override, Node, processCatchClause, (, CatchClause, clauseNode, ), {, AstNode, catchVar, =]
[labelName, ), ;, }, return, node, ;, }, @, Override, Node, processCatchClause, (, CatchClause, clauseNode, ), {, AstNode, catchVar, =]
[Override, Node, processCatchClause, (, CatchClause, clauseNode, ), {, AstNode, catchVar, =, clauseNode, ., getVarName, (, ), ;, Node, node, =]
[processCatchClause, (, CatchClause, clauseNode, ), {, AstNode, catchVar, =, clauseNode, ., getVarName, (, ), ;, Node, node, =, newNode, (]
[processCatchClause, (, CatchClause, clauseNode, ), {, AstNode, catchVar, =, clauseNode, ., getVarName, (, ), ;, Node, node, =, newNode, (]
[), {, AstNode, catchVar, =, clauseNode, ., getVarName, (, ), ;, Node, node, =, newNode, (, Token, ., CATCH, ,]
[AstNode, catchVar, =, clauseNode, ., getVarName, (, ), ;, Node, node, =, newNode, (, Token, ., CATCH, ,, transform, (]
[(, ), ;, Node, node, =, newNode, (, Token, ., CATCH, ,, transform, (, catchVar, ), ), ;, if, (]
[(, ), ;, Node, node, =, newNode, (, Token, ., CATCH, ,, transform, (, catchVar, ), ), ;, if, (]
[(, ), ;, Node, node, =, newNode, (, Token, ., CATCH, ,, transform, (, catchVar, ), ), ;, if, (]
[newNode, (, Token, ., CATCH, ,, transform, (, catchVar, ), ), ;, if, (, clauseNode, ., getCatchCondition, (, ), !=]
[., CATCH, ,, transform, (, catchVar, ), ), ;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {]
[., CATCH, ,, transform, (, catchVar, ), ), ;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {]
[(, catchVar, ), ), ;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {, errorReporter, ., error, (]
[), ), ;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {, errorReporter, ., error, (, "Catch clauses are not supported", ,]
[;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {, errorReporter, ., error, (, "Catch clauses are not supported", ,, sourceName, ,]
[;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {, errorReporter, ., error, (, "Catch clauses are not supported", ,, sourceName, ,]
[;, if, (, clauseNode, ., getCatchCondition, (, ), !=, null, ), {, errorReporter, ., error, (, "Catch clauses are not supported", ,, sourceName, ,]
[), {, errorReporter, ., error, (, "Catch clauses are not supported", ,, sourceName, ,, clauseNode, ., getCatchCondition, (, ), ., getLineno, (, ), ,]
[errorReporter, ., error, (, "Catch clauses are not supported", ,, sourceName, ,, clauseNode, ., getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,]
["Catch clauses are not supported", ,, sourceName, ,, clauseNode, ., getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,, 0, ), ;, }]
["Catch clauses are not supported", ,, sourceName, ,, clauseNode, ., getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,, 0, ), ;, }]
[clauseNode, ., getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,, 0, ), ;, }, node, ., addChildToBack, (]
[getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,, 0, ), ;, }, node, ., addChildToBack, (, transformBlock, (]
[getCatchCondition, (, ), ., getLineno, (, ), ,, "", ,, 0, ), ;, }, node, ., addChildToBack, (, transformBlock, (]
[,, 0, ), ;, }, node, ., addChildToBack, (, transformBlock, (, clauseNode, ., getBody, (, ), ), ), ;, return]
[getBody, (, ), ), ), ;, return, node, ;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return]
[), ), ), ;, return, node, ;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return, newNode, (]
[), ), ), ;, return, node, ;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return, newNode, (]
[return, node, ;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return, newNode, (, Token, ., HOOK, ,]
[;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return, newNode, (, Token, ., HOOK, ,, transform, (]
[;, }, @, Override, Node, processConditionalExpression, (, ConditionalExpression, exprNode, ), {, return, newNode, (, Token, ., HOOK, ,, transform, (]
[ConditionalExpression, exprNode, ), {, return, newNode, (, Token, ., HOOK, ,, transform, (, exprNode, ., getTestExpression, (, ), ), ,]
[), {, return, newNode, (, Token, ., HOOK, ,, transform, (, exprNode, ., getTestExpression, (, ), ), ,, transform, (]
[), {, return, newNode, (, Token, ., HOOK, ,, transform, (, exprNode, ., getTestExpression, (, ), ), ,, transform, (]
[HOOK, ,, transform, (, exprNode, ., getTestExpression, (, ), ), ,, transform, (, exprNode, ., getTrueExpression, (, ), ), ,]
[transform, (, exprNode, ., getTestExpression, (, ), ), ,, transform, (, exprNode, ., getTrueExpression, (, ), ), ,, transform, (]
[transform, (, exprNode, ., getTestExpression, (, ), ), ,, transform, (, exprNode, ., getTrueExpression, (, ), ), ,, transform, (]
[., getFalseExpression, (, ), ), ), ;, }, @, Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =]
[(, ), ), ), ;, }, @, Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =, newNode, (]
[(, ), ), ), ;, }, @, Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =, newNode, (]
[Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., CONTINUE, ), ;, if, (]
[Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., CONTINUE, ), ;, if, (]
[Override, Node, processContinueStatement, (, ContinueStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., CONTINUE, ), ;, if, (]
[), {, Node, node, =, newNode, (, Token, ., CONTINUE, ), ;, if, (, statementNode, ., getLabel, (, ), !=]
[(, Token, ., CONTINUE, ), ;, if, (, statementNode, ., getLabel, (, ), !=, null, ), {, Node, labelName, =]
[., CONTINUE, ), ;, if, (, statementNode, ., getLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (]
[., CONTINUE, ), ;, if, (, statementNode, ., getLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (]
[., getLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;]
[., getLabel, (, ), !=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;]
[!=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;, labelName, ., setType, (]
[!=, null, ), {, Node, labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;, labelName, ., setType, (]
[labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;]
[labelName, =, transform, (, statementNode, ., getLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;]
[statementNode, ., getLabel, (, ), ), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;, node, ., addChildToBack, (]
[), ;, labelName, ., setType, (, Token, ., LABEL_NAME, ), ;, node, ., addChildToBack, (, labelName, ), ;, }, return]
[addChildToBack, (, labelName, ), ;, }, return, node, ;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return]
[labelName, ), ;, }, return, node, ;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return, newNode, (]
[labelName, ), ;, }, return, node, ;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return, newNode, (]
[return, node, ;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return, newNode, (, Token, ., DO, ,]
[;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return, newNode, (, Token, ., DO, ,, transformBlock, (]
[;, }, @, Override, Node, processDoLoop, (, DoLoop, loopNode, ), {, return, newNode, (, Token, ., DO, ,, transformBlock, (]
[DoLoop, loopNode, ), {, return, newNode, (, Token, ., DO, ,, transformBlock, (, loopNode, ., getBody, (, ), ), ,]
[), {, return, newNode, (, Token, ., DO, ,, transformBlock, (, loopNode, ., getBody, (, ), ), ,, transform, (]
[), {, return, newNode, (, Token, ., DO, ,, transformBlock, (, loopNode, ., getBody, (, ), ), ,, transform, (]
[(, loopNode, ., getCondition, (, ), ), ), ;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return]
[., getCondition, (, ), ), ), ;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return, newNode, (]
[., getCondition, (, ), ), ), ;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return, newNode, (]
[), ), ;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return, newNode, (, Token, ., GETELEM, ,]
[;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return, newNode, (, Token, ., GETELEM, ,, transform, (]
[;, }, @, Override, Node, processElementGet, (, ElementGet, getNode, ), {, return, newNode, (, Token, ., GETELEM, ,, transform, (]
[ElementGet, getNode, ), {, return, newNode, (, Token, ., GETELEM, ,, transform, (, getNode, ., getTarget, (, ), ), ,]
[), {, return, newNode, (, Token, ., GETELEM, ,, transform, (, getNode, ., getTarget, (, ), ), ,, transform, (]
[), {, return, newNode, (, Token, ., GETELEM, ,, transform, (, getNode, ., getTarget, (, ), ), ,, transform, (]
[., getElement, (, ), ), ), ;, }, @, Override, Node, processEmptyExpression, (, EmptyExpression, exprNode, ), {, Node, node, =]
[(, ), ), ), ;, }, @, Override, Node, processEmptyExpression, (, EmptyExpression, exprNode, ), {, Node, node, =, newNode, (]
[(, ), ), ), ;, }, @, Override, Node, processEmptyExpression, (, EmptyExpression, exprNode, ), {, Node, node, =, newNode, (]
[@, Override, Node, processEmptyExpression, (, EmptyExpression, exprNode, ), {, Node, node, =, newNode, (, Token, ., EMPTY, ), ;, return]
[., EMPTY, ), ;, return, node, ;, }, @, Override, Node, processEmptyStatement, (, EmptyStatement, exprNode, ), {, Node, node, =]
[), ;, return, node, ;, }, @, Override, Node, processEmptyStatement, (, EmptyStatement, exprNode, ), {, Node, node, =, newNode, (]
[), ;, return, node, ;, }, @, Override, Node, processEmptyStatement, (, EmptyStatement, exprNode, ), {, Node, node, =, newNode, (]
[@, Override, Node, processEmptyStatement, (, EmptyStatement, exprNode, ), {, Node, node, =, newNode, (, Token, ., EMPTY, ), ;, return]
[., EMPTY, ), ;, return, node, ;, }, @, Override, Node, processExpressionStatement, (, ExpressionStatement, statementNode, ), {, Node, node, =]
[), ;, return, node, ;, }, @, Override, Node, processExpressionStatement, (, ExpressionStatement, statementNode, ), {, Node, node, =, newNode, (]
[return, node, ;, }, @, Override, Node, processExpressionStatement, (, ExpressionStatement, statementNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[return, node, ;, }, @, Override, Node, processExpressionStatement, (, ExpressionStatement, statementNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[(, ExpressionStatement, statementNode, ), {, Node, node, =, newNode, (, transformTokenType, (, statementNode, ., getType, (, ), ), ), ;]
[(, ExpressionStatement, statementNode, ), {, Node, node, =, newNode, (, transformTokenType, (, statementNode, ., getType, (, ), ), ), ;]
[{, Node, node, =, newNode, (, transformTokenType, (, statementNode, ., getType, (, ), ), ), ;, node, ., addChildToBack, (]
[node, =, newNode, (, transformTokenType, (, statementNode, ., getType, (, ), ), ), ;, node, ., addChildToBack, (, transform, (]
[node, =, newNode, (, transformTokenType, (, statementNode, ., getType, (, ), ), ), ;, node, ., addChildToBack, (, transform, (]
[(, ), ), ), ;, node, ., addChildToBack, (, transform, (, statementNode, ., getExpression, (, ), ), ), ;, return]
[(, ), ), ), ;, return, node, ;, }, @, Override, Node, processForInLoop, (, ForInLoop, loopNode, ), {, if, (]
[(, ), ), ), ;, return, node, ;, }, @, Override, Node, processForInLoop, (, ForInLoop, loopNode, ), {, if, (]
[;, }, @, Override, Node, processForInLoop, (, ForInLoop, loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {]
[;, }, @, Override, Node, processForInLoop, (, ForInLoop, loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {]
[Node, processForInLoop, (, ForInLoop, loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {, errorReporter, ., error, (]
[(, ForInLoop, loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {, errorReporter, ., error, (, "unsupported language extension: for each", ,]
[loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {, errorReporter, ., error, (, "unsupported language extension: for each", ,, sourceName, ,]
[loopNode, ), {, if, (, loopNode, ., isForEach, (, ), ), {, errorReporter, ., error, (, "unsupported language extension: for each", ,, sourceName, ,]
[., isForEach, (, ), ), {, errorReporter, ., error, (, "unsupported language extension: for each", ,, sourceName, ,, loopNode, ., getLineno, (, ), ,]
[(, ), ), {, errorReporter, ., error, (, "unsupported language extension: for each", ,, sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,]
[errorReporter, ., error, (, "unsupported language extension: for each", ,, sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return]
[error, (, "unsupported language extension: for each", ,, sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[error, (, "unsupported language extension: for each", ,, sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,]
[sourceName, ,, loopNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,]
[getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (]
[0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return]
[;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return, newNode, (]
[;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return, newNode, (]
[Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return, newNode, (, Token, ., FOR, ,]
[EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return, newNode, (, Token, ., FOR, ,, transform, (]
[EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, return, newNode, (, Token, ., FOR, ,, transform, (]
[), ), ;, }, return, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getIterator, (, ), ), ,]
[;, }, return, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getIterator, (, ), ), ,, transform, (]
[;, }, return, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getIterator, (, ), ), ,, transform, (]
[FOR, ,, transform, (, loopNode, ., getIterator, (, ), ), ,, transform, (, loopNode, ., getIteratedObject, (, ), ), ,]
[transform, (, loopNode, ., getIterator, (, ), ), ,, transform, (, loopNode, ., getIteratedObject, (, ), ), ,, transformBlock, (]
[transform, (, loopNode, ., getIterator, (, ), ), ,, transform, (, loopNode, ., getIteratedObject, (, ), ), ,, transformBlock, (]
[., getBody, (, ), ), ), ;, }, @, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =]
[(, ), ), ), ;, }, @, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =, newNode, (]
[(, ), ), ), ;, }, @, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =, newNode, (]
[;, }, @, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =, newNode, (, Token, ., FOR, ,]
[@, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =, newNode, (, Token, ., FOR, ,, transform, (]
[@, Override, Node, processForLoop, (, ForLoop, loopNode, ), {, Node, node, =, newNode, (, Token, ., FOR, ,, transform, (]
[), {, Node, node, =, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getInitializer, (, ), ), ,]
[Node, node, =, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getInitializer, (, ), ), ,, transform, (]
[Node, node, =, newNode, (, Token, ., FOR, ,, transform, (, loopNode, ., getInitializer, (, ), ), ,, transform, (]
[FOR, ,, transform, (, loopNode, ., getInitializer, (, ), ), ,, transform, (, loopNode, ., getCondition, (, ), ), ,]
[transform, (, loopNode, ., getInitializer, (, ), ), ,, transform, (, loopNode, ., getCondition, (, ), ), ,, transform, (]
[transform, (, loopNode, ., getInitializer, (, ), ), ,, transform, (, loopNode, ., getCondition, (, ), ), ,, transform, (]
[,, transform, (, loopNode, ., getCondition, (, ), ), ,, transform, (, loopNode, ., getIncrement, (, ), ), ), ;]
[,, transform, (, loopNode, ., getCondition, (, ), ), ,, transform, (, loopNode, ., getIncrement, (, ), ), ), ;]
[., getCondition, (, ), ), ,, transform, (, loopNode, ., getIncrement, (, ), ), ), ;, node, ., addChildToBack, (]
[(, ), ), ,, transform, (, loopNode, ., getIncrement, (, ), ), ), ;, node, ., addChildToBack, (, transformBlock, (]
[(, ), ), ,, transform, (, loopNode, ., getIncrement, (, ), ), ), ;, node, ., addChildToBack, (, transformBlock, (]
[(, ), ), ), ;, node, ., addChildToBack, (, transformBlock, (, loopNode, ., getBody, (, ), ), ), ;, return]
[), ), ), ;, return, node, ;, }, @, Override, Node, processFunctionCall, (, FunctionCall, callNode, ), {, Node, node, =]
[), ;, return, node, ;, }, @, Override, Node, processFunctionCall, (, FunctionCall, callNode, ), {, Node, node, =, newNode, (]
[return, node, ;, }, @, Override, Node, processFunctionCall, (, FunctionCall, callNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[return, node, ;, }, @, Override, Node, processFunctionCall, (, FunctionCall, callNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[processFunctionCall, (, FunctionCall, callNode, ), {, Node, node, =, newNode, (, transformTokenType, (, callNode, ., getType, (, ), ), ,]
[FunctionCall, callNode, ), {, Node, node, =, newNode, (, transformTokenType, (, callNode, ., getType, (, ), ), ,, transform, (]
[FunctionCall, callNode, ), {, Node, node, =, newNode, (, transformTokenType, (, callNode, ., getType, (, ), ), ,, transform, (]
[getType, (, ), ), ,, transform, (, callNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :]
[getType, (, ), ), ,, transform, (, callNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :]
[callNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :, callNode, ., getArguments, (, ), ), {]
[callNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :, callNode, ., getArguments, (, ), ), {]
[), ), ), ;, for, (, AstNode, child, :, callNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (]
[), ;, for, (, AstNode, child, :, callNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (]
[child, :, callNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }]
[child, :, callNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }]
[getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (]
[getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (]
[getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (]
[child, ), ), ;, }, node, ., setLineno, (, node, ., getFirstChild, (, ), ., getLineno, (, ), ), ;]
[child, ), ), ;, }, node, ., setLineno, (, node, ., getFirstChild, (, ), ., getLineno, (, ), ), ;]
[}, node, ., setLineno, (, node, ., getFirstChild, (, ), ., getLineno, (, ), ), ;, node, ., setCharno, (]
[}, node, ., setLineno, (, node, ., getFirstChild, (, ), ., getLineno, (, ), ), ;, node, ., setCharno, (]
[}, node, ., setLineno, (, node, ., getFirstChild, (, ), ., getLineno, (, ), ), ;, node, ., setCharno, (]
[getLineno, (, ), ), ;, node, ., setCharno, (, node, ., getFirstChild, (, ), ., getCharno, (, ), ), ;]
[), ), ;, node, ., setCharno, (, node, ., getFirstChild, (, ), ., getCharno, (, ), ), ;, maybeSetLengthFrom, (]
[;, node, ., setCharno, (, node, ., getFirstChild, (, ), ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, node, ,]
[(, node, ., getFirstChild, (, ), ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, node, ,, callNode, ), ;, return]
[,, callNode, ), ;, return, node, ;, }, @, Override, Node, processFunctionNode, (, FunctionNode, functionNode, ), {, Name, name, =]
[,, callNode, ), ;, return, node, ;, }, @, Override, Node, processFunctionNode, (, FunctionNode, functionNode, ), {, Name, name, =]
[Override, Node, processFunctionNode, (, FunctionNode, functionNode, ), {, Name, name, =, functionNode, ., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =]
[FunctionNode, functionNode, ), {, Name, name, =, functionNode, ., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =, false, ;, if, (]
[FunctionNode, functionNode, ), {, Name, name, =, functionNode, ., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =, false, ;, if, (]
[), {, Name, name, =, functionNode, ., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =, false, ;, if, (, name, ==]
[., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =, false, ;, if, (, name, ==, null, ), {, int, functionType, =]
[., getFunctionName, (, ), ;, Boolean, isUnnamedFunction, =, false, ;, if, (, name, ==, null, ), {, int, functionType, =]
[false, ;, if, (, name, ==, null, ), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (]
[false, ;, if, (, name, ==, null, ), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (]
[if, (, name, ==, null, ), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (, functionType, !=]
[if, (, name, ==, null, ), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (, functionType, !=]
[), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {]
[), {, int, functionType, =, functionNode, ., getFunctionType, (, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {]
[=, functionNode, ., getFunctionType, (, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (]
[., getFunctionType, (, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (, "unnamed function statement", ,]
[(, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (, "unnamed function statement", ,, sourceName, ,]
[(, ), ;, if, (, functionType, !=, FunctionNode, ., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (, "unnamed function statement", ,, sourceName, ,]
[!=, FunctionNode, ., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (, "unnamed function statement", ,, sourceName, ,, functionNode, ., getLineno, (, ), ,]
[., FUNCTION_EXPRESSION, ), {, errorReporter, ., error, (, "unnamed function statement", ,, sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,]
[errorReporter, ., error, (, "unnamed function statement", ,, sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return]
[error, (, "unnamed function statement", ,, sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[error, (, "unnamed function statement", ,, sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,]
[sourceName, ,, functionNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,]
[getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (]
[,, 0, ), ;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }]
[), ;, return, newNode, (, Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, name, =]
[Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, name, =, new, Name, (, ), ;]
[Token, ., EXPR_RESULT, ,, Node, ., newNumber, (, 0, ), ), ;, }, name, =, new, Name, (, ), ;]
[Node, ., newNumber, (, 0, ), ), ;, }, name, =, new, Name, (, ), ;, name, ., setIdentifier, (]
[(, 0, ), ), ;, }, name, =, new, Name, (, ), ;, name, ., setIdentifier, (, "", ), ;]
[), ), ;, }, name, =, new, Name, (, ), ;, name, ., setIdentifier, (, "", ), ;, isUnnamedFunction, =]
[new, Name, (, ), ;, name, ., setIdentifier, (, "", ), ;, isUnnamedFunction, =, true, ;, }, Node, node, =]
[(, ), ;, name, ., setIdentifier, (, "", ), ;, isUnnamedFunction, =, true, ;, }, Node, node, =, newNode, (]
[(, ), ;, name, ., setIdentifier, (, "", ), ;, isUnnamedFunction, =, true, ;, }, Node, node, =, newNode, (]
[), ;, isUnnamedFunction, =, true, ;, }, Node, node, =, newNode, (, Token, ., FUNCTION, ), ;, Node, newName, =]
[isUnnamedFunction, =, true, ;, }, Node, node, =, newNode, (, Token, ., FUNCTION, ), ;, Node, newName, =, transform, (]
[Node, node, =, newNode, (, Token, ., FUNCTION, ), ;, Node, newName, =, transform, (, name, ), ;, if, (]
[newNode, (, Token, ., FUNCTION, ), ;, Node, newName, =, transform, (, name, ), ;, if, (, isUnnamedFunction, ), {]
[newNode, (, Token, ., FUNCTION, ), ;, Node, newName, =, transform, (, name, ), ;, if, (, isUnnamedFunction, ), {]
[FUNCTION, ), ;, Node, newName, =, transform, (, name, ), ;, if, (, isUnnamedFunction, ), {, newName, ., setLineno, (]
[FUNCTION, ), ;, Node, newName, =, transform, (, name, ), ;, if, (, isUnnamedFunction, ), {, newName, ., setLineno, (]
[;, if, (, isUnnamedFunction, ), {, newName, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, int, lpColumn, =]
[;, if, (, isUnnamedFunction, ), {, newName, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, int, lpColumn, =]
[;, if, (, isUnnamedFunction, ), {, newName, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, int, lpColumn, =]
[newName, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, int, lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +]
[newName, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, int, lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +]
[getLineno, (, ), ), ;, int, lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +, functionNode, ., getLp, (, ), ;]
[getLineno, (, ), ), ;, int, lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +, functionNode, ., getLp, (, ), ;]
[;, int, lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +, functionNode, ., getLp, (, ), ;, newName, ., setCharno, (]
[lpColumn, =, functionNode, ., getAbsolutePosition, (, ), +, functionNode, ., getLp, (, ), ;, newName, ., setCharno, (, position2charno, (]
[getAbsolutePosition, (, ), +, functionNode, ., getLp, (, ), ;, newName, ., setCharno, (, position2charno, (, lpColumn, ), ), ;]
[), +, functionNode, ., getLp, (, ), ;, newName, ., setCharno, (, position2charno, (, lpColumn, ), ), ;, maybeSetLengthFrom, (]
[functionNode, ., getLp, (, ), ;, newName, ., setCharno, (, position2charno, (, lpColumn, ), ), ;, maybeSetLengthFrom, (, newName, ,]
[), ;, newName, ., setCharno, (, position2charno, (, lpColumn, ), ), ;, maybeSetLengthFrom, (, newName, ,, name, ), ;, }]
[), ;, newName, ., setCharno, (, position2charno, (, lpColumn, ), ), ;, maybeSetLengthFrom, (, newName, ,, name, ), ;, }]
[setCharno, (, position2charno, (, lpColumn, ), ), ;, maybeSetLengthFrom, (, newName, ,, name, ), ;, }, node, ., addChildToBack, (]
[), ;, maybeSetLengthFrom, (, newName, ,, name, ), ;, }, node, ., addChildToBack, (, newName, ), ;, Node, lp, =]
[maybeSetLengthFrom, (, newName, ,, name, ), ;, }, node, ., addChildToBack, (, newName, ), ;, Node, lp, =, newNode, (]
[maybeSetLengthFrom, (, newName, ,, name, ), ;, }, node, ., addChildToBack, (, newName, ), ;, Node, lp, =, newNode, (]
[node, ., addChildToBack, (, newName, ), ;, Node, lp, =, newNode, (, Token, ., PARAM_LIST, ), ;, Name, fnName, =]
[node, ., addChildToBack, (, newName, ), ;, Node, lp, =, newNode, (, Token, ., PARAM_LIST, ), ;, Name, fnName, =]
[lp, =, newNode, (, Token, ., PARAM_LIST, ), ;, Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (]
[lp, =, newNode, (, Token, ., PARAM_LIST, ), ;, Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (]
[newNode, (, Token, ., PARAM_LIST, ), ;, Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (, fnName, !=]
[., PARAM_LIST, ), ;, Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (, fnName, !=, null, ), {]
[., PARAM_LIST, ), ;, Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (, fnName, !=, null, ), {]
[Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (, fnName, !=, null, ), {, lp, ., setLineno, (]
[Name, fnName, =, functionNode, ., getFunctionName, (, ), ;, if, (, fnName, !=, null, ), {, lp, ., setLineno, (]
[(, fnName, !=, null, ), {, lp, ., setLineno, (, fnName, ., getLineno, (, ), ), ;, }, else, {]
[(, fnName, !=, null, ), {, lp, ., setLineno, (, fnName, ., getLineno, (, ), ), ;, }, else, {]
[), {, lp, ., setLineno, (, fnName, ., getLineno, (, ), ), ;, }, else, {, lp, ., setLineno, (]
[), {, lp, ., setLineno, (, fnName, ., getLineno, (, ), ), ;, }, else, {, lp, ., setLineno, (]
[), ;, }, else, {, lp, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, }, int, lparenCharno, =]
[), ;, }, else, {, lp, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, }, int, lparenCharno, =]
[), ;, }, else, {, lp, ., setLineno, (, functionNode, ., getLineno, (, ), ), ;, }, int, lparenCharno, =]
[., setLineno, (, functionNode, ., getLineno, (, ), ), ;, }, int, lparenCharno, =, functionNode, ., getLp, (, ), +]
[., setLineno, (, functionNode, ., getLineno, (, ), ), ;, }, int, lparenCharno, =, functionNode, ., getLp, (, ), +]
[(, ), ), ;, }, int, lparenCharno, =, functionNode, ., getLp, (, ), +, functionNode, ., getAbsolutePosition, (, ), ;]
[(, ), ), ;, }, int, lparenCharno, =, functionNode, ., getLp, (, ), +, functionNode, ., getAbsolutePosition, (, ), ;]
[}, int, lparenCharno, =, functionNode, ., getLp, (, ), +, functionNode, ., getAbsolutePosition, (, ), ;, lp, ., setCharno, (]
[lparenCharno, =, functionNode, ., getLp, (, ), +, functionNode, ., getAbsolutePosition, (, ), ;, lp, ., setCharno, (, position2charno, (]
[., getAbsolutePosition, (, ), ;, lp, ., setCharno, (, position2charno, (, lparenCharno, ), ), ;, for, (, AstNode, param, :]
[., getAbsolutePosition, (, ), ;, lp, ., setCharno, (, position2charno, (, lparenCharno, ), ), ;, for, (, AstNode, param, :]
[(, lparenCharno, ), ), ;, for, (, AstNode, param, :, functionNode, ., getParams, (, ), ), {, Node, paramNode, =]
[), ), ;, for, (, AstNode, param, :, functionNode, ., getParams, (, ), ), {, Node, paramNode, =, transform, (]
[AstNode, param, :, functionNode, ., getParams, (, ), ), {, Node, paramNode, =, transform, (, param, ), ;, if, (]
[AstNode, param, :, functionNode, ., getParams, (, ), ), {, Node, paramNode, =, transform, (, param, ), ;, if, (]
[), ), {, Node, paramNode, =, transform, (, param, ), ;, if, (, paramNode, ., isName, (, ), ), {]
[), ), {, Node, paramNode, =, transform, (, param, ), ;, if, (, paramNode, ., isName, (, ), ), {]
[paramNode, =, transform, (, param, ), ;, if, (, paramNode, ., isName, (, ), ), {, lp, ., addChildToBack, (]
[;, if, (, paramNode, ., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {]
[;, if, (, paramNode, ., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {]
[., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isName, (, ), ), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (]
[), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (, config, ., isIdeMode, ||]
[), {, lp, ., addChildToBack, (, paramNode, ), ;, }, else, {, Preconditions, ., checkState, (, config, ., isIdeMode, ||]
[paramNode, ), ;, }, else, {, Preconditions, ., checkState, (, config, ., isIdeMode, ||, paramNode, ., isObjectLit, (, ), ||]
[paramNode, ), ;, }, else, {, Preconditions, ., checkState, (, config, ., isIdeMode, ||, paramNode, ., isObjectLit, (, ), ||]
[(, config, ., isIdeMode, ||, paramNode, ., isObjectLit, (, ), ||, paramNode, ., isArrayLit, (, ), ), ;, }, }]
[(, config, ., isIdeMode, ||, paramNode, ., isObjectLit, (, ), ||, paramNode, ., isArrayLit, (, ), ), ;, }, }]
[||, paramNode, ., isObjectLit, (, ), ||, paramNode, ., isArrayLit, (, ), ), ;, }, }, node, ., addChildToBack, (]
[||, paramNode, ., isArrayLit, (, ), ), ;, }, }, node, ., addChildToBack, (, lp, ), ;, Node, bodyNode, =]
[., isArrayLit, (, ), ), ;, }, }, node, ., addChildToBack, (, lp, ), ;, Node, bodyNode, =, transform, (]
[., isArrayLit, (, ), ), ;, }, }, node, ., addChildToBack, (, lp, ), ;, Node, bodyNode, =, transform, (]
[., addChildToBack, (, lp, ), ;, Node, bodyNode, =, transform, (, functionNode, ., getBody, (, ), ), ;, if, (]
[addChildToBack, (, lp, ), ;, Node, bodyNode, =, transform, (, functionNode, ., getBody, (, ), ), ;, if, (, !]
[addChildToBack, (, lp, ), ;, Node, bodyNode, =, transform, (, functionNode, ., getBody, (, ), ), ;, if, (, !]
[=, transform, (, functionNode, ., getBody, (, ), ), ;, if, (, !, bodyNode, ., isBlock, (, ), ), {]
[=, transform, (, functionNode, ., getBody, (, ), ), ;, if, (, !, bodyNode, ., isBlock, (, ), ), {]
[., getBody, (, ), ), ;, if, (, !, bodyNode, ., isBlock, (, ), ), {, Preconditions, ., checkState, (]
[., getBody, (, ), ), ;, if, (, !, bodyNode, ., isBlock, (, ), ), {, Preconditions, ., checkState, (]
[;, if, (, !, bodyNode, ., isBlock, (, ), ), {, Preconditions, ., checkState, (, config, ., isIdeMode, ), ;]
[(, !, bodyNode, ., isBlock, (, ), ), {, Preconditions, ., checkState, (, config, ., isIdeMode, ), ;, bodyNode, =]
[(, !, bodyNode, ., isBlock, (, ), ), {, Preconditions, ., checkState, (, config, ., isIdeMode, ), ;, bodyNode, =]
[), {, Preconditions, ., checkState, (, config, ., isIdeMode, ), ;, bodyNode, =, IR, ., block, (, ), ;, }]
[Preconditions, ., checkState, (, config, ., isIdeMode, ), ;, bodyNode, =, IR, ., block, (, ), ;, }, parseDirectives, (]
[(, config, ., isIdeMode, ), ;, bodyNode, =, IR, ., block, (, ), ;, }, parseDirectives, (, bodyNode, ), ;]
[(, config, ., isIdeMode, ), ;, bodyNode, =, IR, ., block, (, ), ;, }, parseDirectives, (, bodyNode, ), ;]
[), ;, bodyNode, =, IR, ., block, (, ), ;, }, parseDirectives, (, bodyNode, ), ;, node, ., addChildToBack, (]
[IR, ., block, (, ), ;, }, parseDirectives, (, bodyNode, ), ;, node, ., addChildToBack, (, bodyNode, ), ;, return]
[(, bodyNode, ), ;, return, node, ;, }, @, Override, Node, processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =]
[), ;, return, node, ;, }, @, Override, Node, processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =, newNode, (]
[), ;, return, node, ;, }, @, Override, Node, processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =, newNode, (]
[}, @, Override, Node, processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., IF, ), ;]
[}, @, Override, Node, processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., IF, ), ;]
[processIfStatement, (, IfStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., IF, ), ;, node, ., addChildToBack, (]
[IfStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., IF, ), ;, node, ., addChildToBack, (, transform, (]
[IfStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., IF, ), ;, node, ., addChildToBack, (, transform, (]
[(, Token, ., IF, ), ;, node, ., addChildToBack, (, transform, (, statementNode, ., getCondition, (, ), ), ), ;]
[(, Token, ., IF, ), ;, node, ., addChildToBack, (, transform, (, statementNode, ., getCondition, (, ), ), ), ;]
[), ;, node, ., addChildToBack, (, transform, (, statementNode, ., getCondition, (, ), ), ), ;, node, ., addChildToBack, (]
[node, ., addChildToBack, (, transform, (, statementNode, ., getCondition, (, ), ), ), ;, node, ., addChildToBack, (, transformBlock, (]
[node, ., addChildToBack, (, transform, (, statementNode, ., getCondition, (, ), ), ), ;, node, ., addChildToBack, (, transformBlock, (]
[), ), ), ;, node, ., addChildToBack, (, transformBlock, (, statementNode, ., getThenPart, (, ), ), ), ;, if, (]
[), ), ), ;, node, ., addChildToBack, (, transformBlock, (, statementNode, ., getThenPart, (, ), ), ), ;, if, (]
[), ), ), ;, node, ., addChildToBack, (, transformBlock, (, statementNode, ., getThenPart, (, ), ), ), ;, if, (]
[addChildToBack, (, transformBlock, (, statementNode, ., getThenPart, (, ), ), ), ;, if, (, statementNode, ., getElsePart, (, ), !=]
[(, statementNode, ., getThenPart, (, ), ), ), ;, if, (, statementNode, ., getElsePart, (, ), !=, null, ), {]
[(, statementNode, ., getThenPart, (, ), ), ), ;, if, (, statementNode, ., getElsePart, (, ), !=, null, ), {]
[(, ), ), ), ;, if, (, statementNode, ., getElsePart, (, ), !=, null, ), {, node, ., addChildToBack, (]
[), ), ;, if, (, statementNode, ., getElsePart, (, ), !=, null, ), {, node, ., addChildToBack, (, transformBlock, (]
[), ), ;, if, (, statementNode, ., getElsePart, (, ), !=, null, ), {, node, ., addChildToBack, (, transformBlock, (]
[!=, null, ), {, node, ., addChildToBack, (, transformBlock, (, statementNode, ., getElsePart, (, ), ), ), ;, }, return]
[), ), ;, }, return, node, ;, }, @, Override, Node, processInfixExpression, (, InfixExpression, exprNode, ), {, Node, n, =]
[;, }, return, node, ;, }, @, Override, Node, processInfixExpression, (, InfixExpression, exprNode, ), {, Node, n, =, newNode, (]
[return, node, ;, }, @, Override, Node, processInfixExpression, (, InfixExpression, exprNode, ), {, Node, n, =, newNode, (, transformTokenType, (]
[return, node, ;, }, @, Override, Node, processInfixExpression, (, InfixExpression, exprNode, ), {, Node, n, =, newNode, (, transformTokenType, (]
[processInfixExpression, (, InfixExpression, exprNode, ), {, Node, n, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,]
[InfixExpression, exprNode, ), {, Node, n, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (]
[InfixExpression, exprNode, ), {, Node, n, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (]
[newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (, exprNode, ., getLeft, (, ), ), ,]
[transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (, exprNode, ., getLeft, (, ), ), ,, transform, (]
[transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (, exprNode, ., getLeft, (, ), ), ,, transform, (]
[,, transform, (, exprNode, ., getLeft, (, ), ), ,, transform, (, exprNode, ., getRight, (, ), ), ), ;]
[,, transform, (, exprNode, ., getLeft, (, ), ), ,, transform, (, exprNode, ., getRight, (, ), ), ), ;]
[., getLeft, (, ), ), ,, transform, (, exprNode, ., getRight, (, ), ), ), ;, n, ., setLineno, (]
[., getLeft, (, ), ), ,, transform, (, exprNode, ., getRight, (, ), ), ), ;, n, ., setLineno, (]
[(, exprNode, ., getRight, (, ), ), ), ;, n, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;]
[(, exprNode, ., getRight, (, ), ), ), ;, n, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;]
[(, ), ), ), ;, n, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, n, ., setCharno, (]
[), ), ;, n, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, n, ., setCharno, (, position2charno, (]
[), ), ;, n, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, n, ., setCharno, (, position2charno, (]
[., getLineno, (, ), ), ;, n, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;]
[(, ), ), ;, n, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (]
[), ;, n, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, n, ,]
[setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, n, ,, exprNode, ), ;, return]
[(, n, ,, exprNode, ), ;, return, n, ;, }, @, Override, Node, processKeywordLiteral, (, KeywordLiteral, literalNode, ), {, return]
[,, exprNode, ), ;, return, n, ;, }, @, Override, Node, processKeywordLiteral, (, KeywordLiteral, literalNode, ), {, return, newNode, (]
[), ;, return, n, ;, }, @, Override, Node, processKeywordLiteral, (, KeywordLiteral, literalNode, ), {, return, newNode, (, transformTokenType, (]
[), ;, return, n, ;, }, @, Override, Node, processKeywordLiteral, (, KeywordLiteral, literalNode, ), {, return, newNode, (, transformTokenType, (]
[(, literalNode, ., getType, (, ), ), ), ;, }, @, Override, Node, processLabel, (, Label, labelNode, ), {, return]
[., getType, (, ), ), ), ;, }, @, Override, Node, processLabel, (, Label, labelNode, ), {, return, newStringNode, (]
[., getType, (, ), ), ), ;, }, @, Override, Node, processLabel, (, Label, labelNode, ), {, return, newStringNode, (]
[), ), ;, }, @, Override, Node, processLabel, (, Label, labelNode, ), {, return, newStringNode, (, Token, ., LABEL_NAME, ,]
[), ), ;, }, @, Override, Node, processLabel, (, Label, labelNode, ), {, return, newStringNode, (, Token, ., LABEL_NAME, ,]
[labelNode, ., getName, (, ), ), ;, }, @, Override, Node, processLabeledStatement, (, LabeledStatement, statementNode, ), {, Node, node, =]
[getName, (, ), ), ;, }, @, Override, Node, processLabeledStatement, (, LabeledStatement, statementNode, ), {, Node, node, =, newNode, (]
[getName, (, ), ), ;, }, @, Override, Node, processLabeledStatement, (, LabeledStatement, statementNode, ), {, Node, node, =, newNode, (]
[Node, processLabeledStatement, (, LabeledStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., LABEL, ), ;, Node, prev, =]
[), {, Node, node, =, newNode, (, Token, ., LABEL, ), ;, Node, prev, =, null, ;, Node, cur, =]
[Token, ., LABEL, ), ;, Node, prev, =, null, ;, Node, cur, =, node, ;, for, (, Label, label, :]
[Token, ., LABEL, ), ;, Node, prev, =, null, ;, Node, cur, =, node, ;, for, (, Label, label, :]
[;, Node, cur, =, node, ;, for, (, Label, label, :, statementNode, ., getLabels, (, ), ), {, if, (]
[;, Node, cur, =, node, ;, for, (, Label, label, :, statementNode, ., getLabels, (, ), ), {, if, (]
[cur, =, node, ;, for, (, Label, label, :, statementNode, ., getLabels, (, ), ), {, if, (, prev, !=]
[;, for, (, Label, label, :, statementNode, ., getLabels, (, ), ), {, if, (, prev, !=, null, ), {]
[;, for, (, Label, label, :, statementNode, ., getLabels, (, ), ), {, if, (, prev, !=, null, ), {]
[label, :, statementNode, ., getLabels, (, ), ), {, if, (, prev, !=, null, ), {, prev, ., addChildToBack, (]
[getLabels, (, ), ), {, if, (, prev, !=, null, ), {, prev, ., addChildToBack, (, cur, ), ;, }]
[getLabels, (, ), ), {, if, (, prev, !=, null, ), {, prev, ., addChildToBack, (, cur, ), ;, }]
[{, if, (, prev, !=, null, ), {, prev, ., addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (]
[(, prev, !=, null, ), {, prev, ., addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (, transform, (]
[), {, prev, ., addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (, transform, (, label, ), ), ;]
[), {, prev, ., addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (, transform, (, label, ), ), ;]
[addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (, transform, (, label, ), ), ;, cur, ., setLineno, (]
[addChildToBack, (, cur, ), ;, }, cur, ., addChildToBack, (, transform, (, label, ), ), ;, cur, ., setLineno, (]
[., addChildToBack, (, transform, (, label, ), ), ;, cur, ., setLineno, (, label, ., getLineno, (, ), ), ;]
[(, transform, (, label, ), ), ;, cur, ., setLineno, (, label, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (]
[(, label, ), ), ;, cur, ., setLineno, (, label, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, cur, ,]
[., setLineno, (, label, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, cur, ,, label, ), ;, int, clauseAbsolutePosition, =]
[(, label, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, cur, ,, label, ), ;, int, clauseAbsolutePosition, =, position2charno, (]
[(, label, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, cur, ,, label, ), ;, int, clauseAbsolutePosition, =, position2charno, (]
[;, maybeSetLengthFrom, (, cur, ,, label, ), ;, int, clauseAbsolutePosition, =, position2charno, (, label, ., getAbsolutePosition, (, ), ), ;]
[;, maybeSetLengthFrom, (, cur, ,, label, ), ;, int, clauseAbsolutePosition, =, position2charno, (, label, ., getAbsolutePosition, (, ), ), ;]
[,, label, ), ;, int, clauseAbsolutePosition, =, position2charno, (, label, ., getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (]
[;, int, clauseAbsolutePosition, =, position2charno, (, label, ., getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;]
[clauseAbsolutePosition, =, position2charno, (, label, ., getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;, prev, =]
[position2charno, (, label, ., getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;]
[label, ., getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;, cur, =]
[getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;, cur, =, newNode, (]
[getAbsolutePosition, (, ), ), ;, cur, ., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;, cur, =, newNode, (]
[., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;, cur, =, newNode, (, Token, ., LABEL, ), ;, }]
[., setCharno, (, clauseAbsolutePosition, ), ;, prev, =, cur, ;, cur, =, newNode, (, Token, ., LABEL, ), ;, }]
[), ;, prev, =, cur, ;, cur, =, newNode, (, Token, ., LABEL, ), ;, }, prev, ., addChildToBack, (]
[prev, =, cur, ;, cur, =, newNode, (, Token, ., LABEL, ), ;, }, prev, ., addChildToBack, (, transform, (]
[prev, =, cur, ;, cur, =, newNode, (, Token, ., LABEL, ), ;, }, prev, ., addChildToBack, (, transform, (]
[., LABEL, ), ;, }, prev, ., addChildToBack, (, transform, (, statementNode, ., getStatement, (, ), ), ), ;, return]
[getStatement, (, ), ), ), ;, return, node, ;, }, @, Override, Node, processName, (, Name, nameNode, ), {, return]
[), ), ), ;, return, node, ;, }, @, Override, Node, processName, (, Name, nameNode, ), {, return, processName, (]
[), ;, return, node, ;, }, @, Override, Node, processName, (, Name, nameNode, ), {, return, processName, (, nameNode, ,]
[processName, (, nameNode, ,, false, ), ;, }, Node, processName, (, Name, nameNode, ,, boolean, asString, ), {, if, (]
[false, ), ;, }, Node, processName, (, Name, nameNode, ,, boolean, asString, ), {, if, (, asString, ), {, return]
[;, }, Node, processName, (, Name, nameNode, ,, boolean, asString, ), {, if, (, asString, ), {, return, newStringNode, (]
[;, }, Node, processName, (, Name, nameNode, ,, boolean, asString, ), {, if, (, asString, ), {, return, newStringNode, (]
[(, Name, nameNode, ,, boolean, asString, ), {, if, (, asString, ), {, return, newStringNode, (, Token, ., STRING, ,]
[(, Name, nameNode, ,, boolean, asString, ), {, if, (, asString, ), {, return, newStringNode, (, Token, ., STRING, ,]
[{, return, newStringNode, (, Token, ., STRING, ,, nameNode, ., getIdentifier, (, ), ), ;, }, else, {, if, (]
[newStringNode, (, Token, ., STRING, ,, nameNode, ., getIdentifier, (, ), ), ;, }, else, {, if, (, isReservedKeyword, (]
[newStringNode, (, Token, ., STRING, ,, nameNode, ., getIdentifier, (, ), ), ;, }, else, {, if, (, isReservedKeyword, (]
[getIdentifier, (, ), ), ;, }, else, {, if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {]
[getIdentifier, (, ), ), ;, }, else, {, if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {]
[;, }, else, {, if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {, errorReporter, ., error, (]
[else, {, if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {, errorReporter, ., error, (, "identifier is a reserved word", ,]
[if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {, errorReporter, ., error, (, "identifier is a reserved word", ,, sourceName, ,]
[if, (, isReservedKeyword, (, nameNode, ., getIdentifier, (, ), ), ), {, errorReporter, ., error, (, "identifier is a reserved word", ,, sourceName, ,]
[getIdentifier, (, ), ), ), {, errorReporter, ., error, (, "identifier is a reserved word", ,, sourceName, ,, nameNode, ., getLineno, (, ), ,]
[), ), ), {, errorReporter, ., error, (, "identifier is a reserved word", ,, sourceName, ,, nameNode, ., getLineno, (, ), ,, "", ,]
[., error, (, "identifier is a reserved word", ,, sourceName, ,, nameNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return]
[(, "identifier is a reserved word", ,, sourceName, ,, nameNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return, newStringNode, (]
[(, "identifier is a reserved word", ,, sourceName, ,, nameNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return, newStringNode, (]
[,, nameNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return, newStringNode, (, Token, ., NAME, ,]
[,, nameNode, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, return, newStringNode, (, Token, ., NAME, ,]
[NAME, ,, nameNode, ., getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return]
[NAME, ,, nameNode, ., getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return]
[NAME, ,, nameNode, ., getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return]
[nameNode, ., getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return, reservedKeywords, !=]
[getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return, reservedKeywords, !=, null, &&]
[getIdentifier, (, ), ), ;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return, reservedKeywords, !=, null, &&]
[;, }, }, private, boolean, isReservedKeyword, (, String, identifier, ), {, return, reservedKeywords, !=, null, &&, reservedKeywords, ., contains, (]
[reservedKeywords, ., contains, (, identifier, ), ;, }, @, Override, Node, processNewExpression, (, NewExpression, exprNode, ), {, Node, node, =]
[contains, (, identifier, ), ;, }, @, Override, Node, processNewExpression, (, NewExpression, exprNode, ), {, Node, node, =, newNode, (]
[identifier, ), ;, }, @, Override, Node, processNewExpression, (, NewExpression, exprNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[identifier, ), ;, }, @, Override, Node, processNewExpression, (, NewExpression, exprNode, ), {, Node, node, =, newNode, (, transformTokenType, (]
[processNewExpression, (, NewExpression, exprNode, ), {, Node, node, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,]
[NewExpression, exprNode, ), {, Node, node, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (]
[NewExpression, exprNode, ), {, Node, node, =, newNode, (, transformTokenType, (, exprNode, ., getType, (, ), ), ,, transform, (]
[getType, (, ), ), ,, transform, (, exprNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :]
[getType, (, ), ), ,, transform, (, exprNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :]
[exprNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :, exprNode, ., getArguments, (, ), ), {]
[exprNode, ., getTarget, (, ), ), ), ;, for, (, AstNode, child, :, exprNode, ., getArguments, (, ), ), {]
[), ), ), ;, for, (, AstNode, child, :, exprNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (]
[), ;, for, (, AstNode, child, :, exprNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (]
[child, :, exprNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }]
[child, :, exprNode, ., getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }]
[getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (]
[getArguments, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (]
[addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;]
[addChildToBack, (, transform, (, child, ), ), ;, }, node, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;]
[child, ), ), ;, }, node, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, node, ., setCharno, (]
[), ;, }, node, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, node, ., setCharno, (, position2charno, (]
[), ;, }, node, ., setLineno, (, exprNode, ., getLineno, (, ), ), ;, node, ., setCharno, (, position2charno, (]
[., getLineno, (, ), ), ;, node, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;]
[(, ), ), ;, node, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (]
[), ;, node, ., setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, node, ,]
[setCharno, (, position2charno, (, exprNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, node, ,, exprNode, ), ;, return]
[(, node, ,, exprNode, ), ;, return, node, ;, }, @, Override, Node, processNumberLiteral, (, NumberLiteral, literalNode, ), {, return]
[,, exprNode, ), ;, return, node, ;, }, @, Override, Node, processNumberLiteral, (, NumberLiteral, literalNode, ), {, return, newNumberNode, (]
[,, exprNode, ), ;, return, node, ;, }, @, Override, Node, processNumberLiteral, (, NumberLiteral, literalNode, ), {, return, newNumberNode, (]
[(, literalNode, ., getNumber, (, ), ), ;, }, @, Override, Node, processObjectLiteral, (, ObjectLiteral, literalNode, ), {, if, (]
[(, literalNode, ., getNumber, (, ), ), ;, }, @, Override, Node, processObjectLiteral, (, ObjectLiteral, literalNode, ), {, if, (]
[;, }, @, Override, Node, processObjectLiteral, (, ObjectLiteral, literalNode, ), {, if, (, literalNode, ., isDestructuring, (, ), ), {]
[@, Override, Node, processObjectLiteral, (, ObjectLiteral, literalNode, ), {, if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (]
[), {, if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =]
[if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =, newNode, (]
[if, (, literalNode, ., isDestructuring, (, ), ), {, reportDestructuringAssign, (, literalNode, ), ;, }, Node, node, =, newNode, (]
[(, literalNode, ), ;, }, Node, node, =, newNode, (, Token, ., OBJECTLIT, ), ;, for, (, ObjectProperty, el, :]
[(, literalNode, ), ;, }, Node, node, =, newNode, (, Token, ., OBJECTLIT, ), ;, for, (, ObjectProperty, el, :]
[(, Token, ., OBJECTLIT, ), ;, for, (, ObjectProperty, el, :, literalNode, ., getElements, (, ), ), {, if, (]
[(, Token, ., OBJECTLIT, ), ;, for, (, ObjectProperty, el, :, literalNode, ., getElements, (, ), ), {, if, (]
[(, Token, ., OBJECTLIT, ), ;, for, (, ObjectProperty, el, :, literalNode, ., getElements, (, ), ), {, if, (]
[), ;, for, (, ObjectProperty, el, :, literalNode, ., getElements, (, ), ), {, if, (, config, ., languageMode, ==]
[), ;, for, (, ObjectProperty, el, :, literalNode, ., getElements, (, ), ), {, if, (, config, ., languageMode, ==]
[literalNode, ., getElements, (, ), ), {, if, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), {, if, (]
[literalNode, ., getElements, (, ), ), {, if, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), {, if, (]
[if, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), {, if, (, el, ., isGetter, (, ), ), {]
[config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), {, if, (, el, ., isGetter, (, ), ), {, reportGetter, (]
[if, (, el, ., isGetter, (, ), ), {, reportGetter, (, el, ), ;, continue, ;, }, else, if, (]
[if, (, el, ., isGetter, (, ), ), {, reportGetter, (, el, ), ;, continue, ;, }, else, if, (]
[), {, reportGetter, (, el, ), ;, continue, ;, }, else, if, (, el, ., isSetter, (, ), ), {]
[reportGetter, (, el, ), ;, continue, ;, }, else, if, (, el, ., isSetter, (, ), ), {, reportSetter, (]
[(, el, ., isSetter, (, ), ), {, reportSetter, (, el, ), ;, continue, ;, }, }, Node, key, =]
[., isSetter, (, ), ), {, reportSetter, (, el, ), ;, continue, ;, }, }, Node, key, =, transformAsString, (]
[., isSetter, (, ), ), {, reportSetter, (, el, ), ;, continue, ;, }, }, Node, key, =, transformAsString, (]
[(, el, ), ;, continue, ;, }, }, Node, key, =, transformAsString, (, el, ., getLeft, (, ), ), ;]
[(, el, ), ;, continue, ;, }, }, Node, key, =, transformAsString, (, el, ., getLeft, (, ), ), ;]
[continue, ;, }, }, Node, key, =, transformAsString, (, el, ., getLeft, (, ), ), ;, key, ., setType, (]
[continue, ;, }, }, Node, key, =, transformAsString, (, el, ., getLeft, (, ), ), ;, key, ., setType, (]
[(, el, ., getLeft, (, ), ), ;, key, ., setType, (, Token, ., STRING_KEY, ), ;, Node, value, =]
[., getLeft, (, ), ), ;, key, ., setType, (, Token, ., STRING_KEY, ), ;, Node, value, =, transform, (]
[., getLeft, (, ), ), ;, key, ., setType, (, Token, ., STRING_KEY, ), ;, Node, value, =, transform, (]
[(, Token, ., STRING_KEY, ), ;, Node, value, =, transform, (, el, ., getRight, (, ), ), ;, if, (]
[(, Token, ., STRING_KEY, ), ;, Node, value, =, transform, (, el, ., getRight, (, ), ), ;, if, (]
[value, =, transform, (, el, ., getRight, (, ), ), ;, if, (, el, ., isGetter, (, ), ), {]
[value, =, transform, (, el, ., getRight, (, ), ), ;, if, (, el, ., isGetter, (, ), ), {]
[el, ., getRight, (, ), ), ;, if, (, el, ., isGetter, (, ), ), {, key, ., setType, (]
[el, ., getRight, (, ), ), ;, if, (, el, ., isGetter, (, ), ), {, key, ., setType, (]
[), ;, if, (, el, ., isGetter, (, ), ), {, key, ., setType, (, Token, ., GETTER_DEF, ), ;]
[), ;, if, (, el, ., isGetter, (, ), ), {, key, ., setType, (, Token, ., GETTER_DEF, ), ;]
[el, ., isGetter, (, ), ), {, key, ., setType, (, Token, ., GETTER_DEF, ), ;, Preconditions, ., checkState, (]
[el, ., isGetter, (, ), ), {, key, ., setType, (, Token, ., GETTER_DEF, ), ;, Preconditions, ., checkState, (]
[setType, (, Token, ., GETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (]
[setType, (, Token, ., GETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (]
[Token, ., GETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (, getFnParamNode, (]
[(, value, ., isFunction, (, ), ), ;, if, (, getFnParamNode, (, value, ), ., hasChildren, (, ), ), {]
[., isFunction, (, ), ), ;, if, (, getFnParamNode, (, value, ), ., hasChildren, (, ), ), {, reportGetterParam, (]
[., isFunction, (, ), ), ;, if, (, getFnParamNode, (, value, ), ., hasChildren, (, ), ), {, reportGetterParam, (]
[., hasChildren, (, ), ), {, reportGetterParam, (, el, ., getLeft, (, ), ), ;, }, }, else, if, (]
[., hasChildren, (, ), ), {, reportGetterParam, (, el, ., getLeft, (, ), ), ;, }, }, else, if, (]
[(, el, ., getLeft, (, ), ), ;, }, }, else, if, (, el, ., isSetter, (, ), ), {]
[(, el, ., getLeft, (, ), ), ;, }, }, else, if, (, el, ., isSetter, (, ), ), {]
[(, ), ), ;, }, }, else, if, (, el, ., isSetter, (, ), ), {, key, ., setType, (]
[(, ), ), ;, }, }, else, if, (, el, ., isSetter, (, ), ), {, key, ., setType, (]
[}, else, if, (, el, ., isSetter, (, ), ), {, key, ., setType, (, Token, ., SETTER_DEF, ), ;]
[}, else, if, (, el, ., isSetter, (, ), ), {, key, ., setType, (, Token, ., SETTER_DEF, ), ;]
[el, ., isSetter, (, ), ), {, key, ., setType, (, Token, ., SETTER_DEF, ), ;, Preconditions, ., checkState, (]
[el, ., isSetter, (, ), ), {, key, ., setType, (, Token, ., SETTER_DEF, ), ;, Preconditions, ., checkState, (]
[setType, (, Token, ., SETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (]
[(, Token, ., SETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (, !]
[(, Token, ., SETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (, !]
[., SETTER_DEF, ), ;, Preconditions, ., checkState, (, value, ., isFunction, (, ), ), ;, if, (, !, getFnParamNode, (]
[value, ., isFunction, (, ), ), ;, if, (, !, getFnParamNode, (, value, ), ., hasOneChild, (, ), ), {]
[isFunction, (, ), ), ;, if, (, !, getFnParamNode, (, value, ), ., hasOneChild, (, ), ), {, reportSetterParam, (]
[isFunction, (, ), ), ;, if, (, !, getFnParamNode, (, value, ), ., hasOneChild, (, ), ), {, reportSetterParam, (]
[(, value, ), ., hasOneChild, (, ), ), {, reportSetterParam, (, el, ., getLeft, (, ), ), ;, }, }]
[(, value, ), ., hasOneChild, (, ), ), {, reportSetterParam, (, el, ., getLeft, (, ), ), ;, }, }]
[hasOneChild, (, ), ), {, reportSetterParam, (, el, ., getLeft, (, ), ), ;, }, }, key, ., addChildToFront, (]
[), {, reportSetterParam, (, el, ., getLeft, (, ), ), ;, }, }, key, ., addChildToFront, (, value, ), ;]
[), {, reportSetterParam, (, el, ., getLeft, (, ), ), ;, }, }, key, ., addChildToFront, (, value, ), ;]
[el, ., getLeft, (, ), ), ;, }, }, key, ., addChildToFront, (, value, ), ;, node, ., addChildToBack, (]
[), ;, }, }, key, ., addChildToFront, (, value, ), ;, node, ., addChildToBack, (, key, ), ;, }, return]
[;, node, ., addChildToBack, (, key, ), ;, }, return, node, ;, }, Node, getFnParamNode, (, Node, fnNode, ), {]
[;, node, ., addChildToBack, (, key, ), ;, }, return, node, ;, }, Node, getFnParamNode, (, Node, fnNode, ), {]
[(, key, ), ;, }, return, node, ;, }, Node, getFnParamNode, (, Node, fnNode, ), {, Preconditions, ., checkArgument, (]
[(, key, ), ;, }, return, node, ;, }, Node, getFnParamNode, (, Node, fnNode, ), {, Preconditions, ., checkArgument, (]
[}, Node, getFnParamNode, (, Node, fnNode, ), {, Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), ), ;, return]
[}, Node, getFnParamNode, (, Node, fnNode, ), {, Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), ), ;, return]
[}, Node, getFnParamNode, (, Node, fnNode, ), {, Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), ), ;, return]
[., getFirstChild, (, ), ., getNext, (, ), ;, }, @, Override, Node, processObjectProperty, (, ObjectProperty, propertyNode, ), {, return]
[(, ), ., getNext, (, ), ;, }, @, Override, Node, processObjectProperty, (, ObjectProperty, propertyNode, ), {, return, processInfixExpression, (]
[{, return, processInfixExpression, (, propertyNode, ), ;, }, @, Override, Node, processParenthesizedExpression, (, ParenthesizedExpression, exprNode, ), {, Node, node, =]
[processInfixExpression, (, propertyNode, ), ;, }, @, Override, Node, processParenthesizedExpression, (, ParenthesizedExpression, exprNode, ), {, Node, node, =, transform, (]
[processInfixExpression, (, propertyNode, ), ;, }, @, Override, Node, processParenthesizedExpression, (, ParenthesizedExpression, exprNode, ), {, Node, node, =, transform, (]
[Node, processParenthesizedExpression, (, ParenthesizedExpression, exprNode, ), {, Node, node, =, transform, (, exprNode, ., getExpression, (, ), ), ;, return]
[(, ), ), ;, return, node, ;, }, @, Override, Node, processPropertyGet, (, PropertyGet, getNode, ), {, Node, leftChild, =]
[), ;, return, node, ;, }, @, Override, Node, processPropertyGet, (, PropertyGet, getNode, ), {, Node, leftChild, =, transform, (]
[), ;, return, node, ;, }, @, Override, Node, processPropertyGet, (, PropertyGet, getNode, ), {, Node, leftChild, =, transform, (]
[(, PropertyGet, getNode, ), {, Node, leftChild, =, transform, (, getNode, ., getTarget, (, ), ), ;, Node, newNode, =]
[getNode, ), {, Node, leftChild, =, transform, (, getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (]
[getNode, ), {, Node, leftChild, =, transform, (, getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (]
[leftChild, =, transform, (, getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (, Token, ., GETPROP, ,]
[transform, (, getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (, Token, ., GETPROP, ,, leftChild, ,]
[getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (, Token, ., GETPROP, ,, leftChild, ,, transformAsString, (]
[getNode, ., getTarget, (, ), ), ;, Node, newNode, =, newNode, (, Token, ., GETPROP, ,, leftChild, ,, transformAsString, (]
[newNode, =, newNode, (, Token, ., GETPROP, ,, leftChild, ,, transformAsString, (, getNode, ., getProperty, (, ), ), ), ;]
[newNode, =, newNode, (, Token, ., GETPROP, ,, leftChild, ,, transformAsString, (, getNode, ., getProperty, (, ), ), ), ;]
[Token, ., GETPROP, ,, leftChild, ,, transformAsString, (, getNode, ., getProperty, (, ), ), ), ;, newNode, ., setLineno, (]
[Token, ., GETPROP, ,, leftChild, ,, transformAsString, (, getNode, ., getProperty, (, ), ), ), ;, newNode, ., setLineno, (]
[(, getNode, ., getProperty, (, ), ), ), ;, newNode, ., setLineno, (, leftChild, ., getLineno, (, ), ), ;]
[(, getNode, ., getProperty, (, ), ), ), ;, newNode, ., setLineno, (, leftChild, ., getLineno, (, ), ), ;]
[(, ), ), ), ;, newNode, ., setLineno, (, leftChild, ., getLineno, (, ), ), ;, newNode, ., setCharno, (]
[(, ), ), ), ;, newNode, ., setLineno, (, leftChild, ., getLineno, (, ), ), ;, newNode, ., setCharno, (]
[setLineno, (, leftChild, ., getLineno, (, ), ), ;, newNode, ., setCharno, (, leftChild, ., getCharno, (, ), ), ;]
[leftChild, ., getLineno, (, ), ), ;, newNode, ., setCharno, (, leftChild, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (]
[getLineno, (, ), ), ;, newNode, ., setCharno, (, leftChild, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newNode, ,]
[;, newNode, ., setCharno, (, leftChild, ., getCharno, (, ), ), ;, maybeSetLengthFrom, (, newNode, ,, getNode, ), ;, return]
[,, getNode, ), ;, return, newNode, ;, }, @, Override, Node, processRegExpLiteral, (, RegExpLiteral, literalNode, ), {, Node, literalStringNode, =]
[), ;, return, newNode, ;, }, @, Override, Node, processRegExpLiteral, (, RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (]
[), ;, return, newNode, ;, }, @, Override, Node, processRegExpLiteral, (, RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (]
[Override, Node, processRegExpLiteral, (, RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (, literalNode, ., getValue, (, ), ), ;]
[Override, Node, processRegExpLiteral, (, RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (, literalNode, ., getValue, (, ), ), ;]
[RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (, literalNode, ., getValue, (, ), ), ;, literalStringNode, ., setLineno, (]
[RegExpLiteral, literalNode, ), {, Node, literalStringNode, =, newStringNode, (, literalNode, ., getValue, (, ), ), ;, literalStringNode, ., setLineno, (]
[newStringNode, (, literalNode, ., getValue, (, ), ), ;, literalStringNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;]
[literalNode, ., getValue, (, ), ), ;, literalStringNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (]
[getValue, (, ), ), ;, literalStringNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, literalStringNode, ,]
[., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, literalStringNode, ,, literalNode, ), ;, Node, node, =]
[(, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, literalStringNode, ,, literalNode, ), ;, Node, node, =, newNode, (]
[(, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, literalStringNode, ,, literalNode, ), ;, Node, node, =, newNode, (]
[(, ), ), ;, maybeSetLengthFrom, (, literalStringNode, ,, literalNode, ), ;, Node, node, =, newNode, (, Token, ., REGEXP, ,]
[literalStringNode, ,, literalNode, ), ;, Node, node, =, newNode, (, Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =]
[literalStringNode, ,, literalNode, ), ;, Node, node, =, newNode, (, Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =]
[newNode, (, Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (]
[newNode, (, Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (]
[newNode, (, Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (]
[Token, ., REGEXP, ,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (, flags, !=]
[REGEXP, ,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (, flags, !=, null, &&]
[,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (, flags, !=, null, &&, !]
[,, literalStringNode, ), ;, String, flags, =, literalNode, ., getFlags, (, ), ;, if, (, flags, !=, null, &&, !]
[(, ), ;, if, (, flags, !=, null, &&, !, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =]
[;, if, (, flags, !=, null, &&, !, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =, newStringNode, (]
[flags, !=, null, &&, !, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =, newStringNode, (, flags, ), ;]
[flags, !=, null, &&, !, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =, newStringNode, (, flags, ), ;]
[!, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =, newStringNode, (, flags, ), ;, flagsNode, ., setLineno, (]
[!, flags, ., isEmpty, (, ), ), {, Node, flagsNode, =, newStringNode, (, flags, ), ;, flagsNode, ., setLineno, (]
[{, Node, flagsNode, =, newStringNode, (, flags, ), ;, flagsNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;]
[flagsNode, =, newStringNode, (, flags, ), ;, flagsNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (]
[newStringNode, (, flags, ), ;, flagsNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, flagsNode, ,]
[), ;, flagsNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, flagsNode, ,, literalNode, ), ;]
[), ;, flagsNode, ., setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, flagsNode, ,, literalNode, ), ;]
[setLineno, (, literalNode, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, flagsNode, ,, literalNode, ), ;, node, ., addChildToBack, (]
[(, ), ), ;, maybeSetLengthFrom, (, flagsNode, ,, literalNode, ), ;, node, ., addChildToBack, (, flagsNode, ), ;, }, return]
[flagsNode, ), ;, }, return, node, ;, }, @, Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =]
[;, }, return, node, ;, }, @, Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =, newNode, (]
[;, }, return, node, ;, }, @, Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =, newNode, (]
[Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., RETURN, ), ;, if, (]
[Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., RETURN, ), ;, if, (]
[Override, Node, processReturnStatement, (, ReturnStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., RETURN, ), ;, if, (]
[), {, Node, node, =, newNode, (, Token, ., RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=]
[node, =, newNode, (, Token, ., RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=, null, ), {]
[node, =, newNode, (, Token, ., RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=, null, ), {]
[Token, ., RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=, null, ), {, node, ., addChildToBack, (]
[RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=, null, ), {, node, ., addChildToBack, (, transform, (]
[RETURN, ), ;, if, (, statementNode, ., getReturnValue, (, ), !=, null, ), {, node, ., addChildToBack, (, transform, (]
[!=, null, ), {, node, ., addChildToBack, (, transform, (, statementNode, ., getReturnValue, (, ), ), ), ;, }, return]
[(, ), ), ), ;, }, return, node, ;, }, @, Override, Node, processScope, (, Scope, scopeNode, ), {, return]
[), ), ;, }, return, node, ;, }, @, Override, Node, processScope, (, Scope, scopeNode, ), {, return, processGeneric, (]
[{, return, processGeneric, (, scopeNode, ), ;, }, @, Override, Node, processStringLiteral, (, StringLiteral, literalNode, ), {, String, value, =]
[{, return, processGeneric, (, scopeNode, ), ;, }, @, Override, Node, processStringLiteral, (, StringLiteral, literalNode, ), {, String, value, =]
[Override, Node, processStringLiteral, (, StringLiteral, literalNode, ), {, String, value, =, literalNode, ., getValue, (, ), ;, Node, n, =]
[processStringLiteral, (, StringLiteral, literalNode, ), {, String, value, =, literalNode, ., getValue, (, ), ;, Node, n, =, newStringNode, (]
[{, String, value, =, literalNode, ., getValue, (, ), ;, Node, n, =, newStringNode, (, value, ), ;, if, (]
[{, String, value, =, literalNode, ., getValue, (, ), ;, Node, n, =, newStringNode, (, value, ), ;, if, (]
[{, String, value, =, literalNode, ., getValue, (, ), ;, Node, n, =, newStringNode, (, value, ), ;, if, (]
[literalNode, ., getValue, (, ), ;, Node, n, =, newStringNode, (, value, ), ;, if, (, value, ., indexOf, (]
[(, ), ;, Node, n, =, newStringNode, (, value, ), ;, if, (, value, ., indexOf, (, '\u000B', ), !=]
[), ;, Node, n, =, newStringNode, (, value, ), ;, if, (, value, ., indexOf, (, '\u000B', ), !=, -]
[(, value, ), ;, if, (, value, ., indexOf, (, '\u000B', ), !=, -, 1, ), {, int, start, =]
[(, value, ), ;, if, (, value, ., indexOf, (, '\u000B', ), !=, -, 1, ), {, int, start, =]
[(, '\u000B', ), !=, -, 1, ), {, int, start, =, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =]
[(, '\u000B', ), !=, -, 1, ), {, int, start, =, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =]
[), !=, -, 1, ), {, int, start, =, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =, start, +]
[), !=, -, 1, ), {, int, start, =, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =, start, +]
[=, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =, start, +, literalNode, ., getLength, (, ), ;, if, (]
[=, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =, start, +, literalNode, ., getLength, (, ), ;, if, (]
[=, literalNode, ., getAbsolutePosition, (, ), ;, int, end, =, start, +, literalNode, ., getLength, (, ), ;, if, (]
[., getAbsolutePosition, (, ), ;, int, end, =, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <]
[., getAbsolutePosition, (, ), ;, int, end, =, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <]
[end, =, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&]
[=, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (]
[=, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (]
[=, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (]
[=, start, +, literalNode, ., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (]
[., getLength, (, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (, sourceString, ., substring, (]
[(, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (, sourceString, ., substring, (, start, ,]
[(, ), ;, if, (, start, <, sourceString, ., length, (, ), &&, (, sourceString, ., substring, (, start, ,]
[(, start, <, sourceString, ., length, (, ), &&, (, sourceString, ., substring, (, start, ,, Math, ., min, (]
[(, start, <, sourceString, ., length, (, ), &&, (, sourceString, ., substring, (, start, ,, Math, ., min, (]
[(, ), &&, (, sourceString, ., substring, (, start, ,, Math, ., min, (, sourceString, ., length, (, ), ,]
[substring, (, start, ,, Math, ., min, (, sourceString, ., length, (, ), ,, end, ), ), ., indexOf, (]
[,, Math, ., min, (, sourceString, ., length, (, ), ,, end, ), ), ., indexOf, (, "\\v", ), !=]
[Math, ., min, (, sourceString, ., length, (, ), ,, end, ), ), ., indexOf, (, "\\v", ), !=, -]
[sourceString, ., length, (, ), ,, end, ), ), ., indexOf, (, "\\v", ), !=, -, 1, ), ), {]
[sourceString, ., length, (, ), ,, end, ), ), ., indexOf, (, "\\v", ), !=, -, 1, ), ), {]
[), ,, end, ), ), ., indexOf, (, "\\v", ), !=, -, 1, ), ), {, n, ., putBooleanProp, (]
[), ,, end, ), ), ., indexOf, (, "\\v", ), !=, -, 1, ), ), {, n, ., putBooleanProp, (]
[), ., indexOf, (, "\\v", ), !=, -, 1, ), ), {, n, ., putBooleanProp, (, Node, ., SLASH_V, ,]
[!=, -, 1, ), ), {, n, ., putBooleanProp, (, Node, ., SLASH_V, ,, true, ), ;, }, }, return]
[}, }, return, n, ;, }, @, Override, Node, processSwitchCase, (, SwitchCase, caseNode, ), {, Node, node, ;, if, (]
[}, }, return, n, ;, }, @, Override, Node, processSwitchCase, (, SwitchCase, caseNode, ), {, Node, node, ;, if, (]
[Override, Node, processSwitchCase, (, SwitchCase, caseNode, ), {, Node, node, ;, if, (, caseNode, ., isDefault, (, ), ), {]
[processSwitchCase, (, SwitchCase, caseNode, ), {, Node, node, ;, if, (, caseNode, ., isDefault, (, ), ), {, node, =]
[SwitchCase, caseNode, ), {, Node, node, ;, if, (, caseNode, ., isDefault, (, ), ), {, node, =, newNode, (]
[SwitchCase, caseNode, ), {, Node, node, ;, if, (, caseNode, ., isDefault, (, ), ), {, node, =, newNode, (]
[isDefault, (, ), ), {, node, =, newNode, (, Token, ., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =]
[isDefault, (, ), ), {, node, =, newNode, (, Token, ., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =]
[=, newNode, (, Token, ., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =, caseNode, ., getExpression, (, ), ;]
[(, Token, ., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =, caseNode, ., getExpression, (, ), ;, node, =]
[., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =, caseNode, ., getExpression, (, ), ;, node, =, newNode, (]
[., DEFAULT_CASE, ), ;, }, else, {, AstNode, expr, =, caseNode, ., getExpression, (, ), ;, node, =, newNode, (]
[}, else, {, AstNode, expr, =, caseNode, ., getExpression, (, ), ;, node, =, newNode, (, Token, ., CASE, ,]
[{, AstNode, expr, =, caseNode, ., getExpression, (, ), ;, node, =, newNode, (, Token, ., CASE, ,, transform, (]
[), ;, node, =, newNode, (, Token, ., CASE, ,, transform, (, expr, ), ), ;, }, Node, block, =]
[node, =, newNode, (, Token, ., CASE, ,, transform, (, expr, ), ), ;, }, Node, block, =, newNode, (]
[node, =, newNode, (, Token, ., CASE, ,, transform, (, expr, ), ), ;, }, Node, block, =, newNode, (]
[., CASE, ,, transform, (, expr, ), ), ;, }, Node, block, =, newNode, (, Token, ., BLOCK, ), ;]
[., CASE, ,, transform, (, expr, ), ), ;, }, Node, block, =, newNode, (, Token, ., BLOCK, ), ;]
[(, expr, ), ), ;, }, Node, block, =, newNode, (, Token, ., BLOCK, ), ;, block, ., putBooleanProp, (]
[(, expr, ), ), ;, }, Node, block, =, newNode, (, Token, ., BLOCK, ), ;, block, ., putBooleanProp, (]
[;, }, Node, block, =, newNode, (, Token, ., BLOCK, ), ;, block, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,]
[block, =, newNode, (, Token, ., BLOCK, ), ;, block, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;]
[block, =, newNode, (, Token, ., BLOCK, ), ;, block, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;]
[Token, ., BLOCK, ), ;, block, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, block, ., setLineno, (]
[Token, ., BLOCK, ), ;, block, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, block, ., setLineno, (]
[putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, block, ., setLineno, (, caseNode, ., getLineno, (, ), ), ;]
[putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, block, ., setLineno, (, caseNode, ., getLineno, (, ), ), ;]
[SYNTHETIC_BLOCK_PROP, ,, true, ), ;, block, ., setLineno, (, caseNode, ., getLineno, (, ), ), ;, block, ., setCharno, (]
[true, ), ;, block, ., setLineno, (, caseNode, ., getLineno, (, ), ), ;, block, ., setCharno, (, position2charno, (]
[true, ), ;, block, ., setLineno, (, caseNode, ., getLineno, (, ), ), ;, block, ., setCharno, (, position2charno, (]
[., getLineno, (, ), ), ;, block, ., setCharno, (, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;]
[(, ), ), ;, block, ., setCharno, (, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (]
[), ;, block, ., setCharno, (, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, block, ,]
[(, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, block, ,, caseNode, ), ;, if, (]
[(, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, block, ,, caseNode, ), ;, if, (]
[(, position2charno, (, caseNode, ., getAbsolutePosition, (, ), ), ), ;, maybeSetLengthFrom, (, block, ,, caseNode, ), ;, if, (]
[(, ), ), ), ;, maybeSetLengthFrom, (, block, ,, caseNode, ), ;, if, (, caseNode, ., getStatements, (, ), !=]
[,, caseNode, ), ;, if, (, caseNode, ., getStatements, (, ), !=, null, ), {, for, (, AstNode, child, :]
[,, caseNode, ), ;, if, (, caseNode, ., getStatements, (, ), !=, null, ), {, for, (, AstNode, child, :]
[., getStatements, (, ), !=, null, ), {, for, (, AstNode, child, :, caseNode, ., getStatements, (, ), ), {]
[., getStatements, (, ), !=, null, ), {, for, (, AstNode, child, :, caseNode, ., getStatements, (, ), ), {]
[!=, null, ), {, for, (, AstNode, child, :, caseNode, ., getStatements, (, ), ), {, block, ., addChildToBack, (]
[), {, for, (, AstNode, child, :, caseNode, ., getStatements, (, ), ), {, block, ., addChildToBack, (, transform, (]
[:, caseNode, ., getStatements, (, ), ), {, block, ., addChildToBack, (, transform, (, child, ), ), ;, }, }]
[:, caseNode, ., getStatements, (, ), ), {, block, ., addChildToBack, (, transform, (, child, ), ), ;, }, }]
[(, ), ), {, block, ., addChildToBack, (, transform, (, child, ), ), ;, }, }, node, ., addChildToBack, (]
[block, ., addChildToBack, (, transform, (, child, ), ), ;, }, }, node, ., addChildToBack, (, block, ), ;, return]
[(, block, ), ;, return, node, ;, }, @, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =]
[), ;, return, node, ;, }, @, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =, newNode, (]
[), ;, return, node, ;, }, @, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =, newNode, (]
[;, }, @, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., SWITCH, ,]
[@, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., SWITCH, ,, transform, (]
[@, Override, Node, processSwitchStatement, (, SwitchStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., SWITCH, ,, transform, (]
[(, Token, ., SWITCH, ,, transform, (, statementNode, ., getExpression, (, ), ), ), ;, for, (, AstNode, child, :]
[(, Token, ., SWITCH, ,, transform, (, statementNode, ., getExpression, (, ), ), ), ;, for, (, AstNode, child, :]
[statementNode, ., getExpression, (, ), ), ), ;, for, (, AstNode, child, :, statementNode, ., getCases, (, ), ), {]
[statementNode, ., getExpression, (, ), ), ), ;, for, (, AstNode, child, :, statementNode, ., getCases, (, ), ), {]
[), ), ), ;, for, (, AstNode, child, :, statementNode, ., getCases, (, ), ), {, node, ., addChildToBack, (]
[), ;, for, (, AstNode, child, :, statementNode, ., getCases, (, ), ), {, node, ., addChildToBack, (, transform, (]
[:, statementNode, ., getCases, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, return]
[(, child, ), ), ;, }, return, node, ;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return]
[), ), ;, }, return, node, ;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return, newNode, (]
[), ), ;, }, return, node, ;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return, newNode, (]
[return, node, ;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return, newNode, (, Token, ., THROW, ,]
[;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return, newNode, (, Token, ., THROW, ,, transform, (]
[;, }, @, Override, Node, processThrowStatement, (, ThrowStatement, statementNode, ), {, return, newNode, (, Token, ., THROW, ,, transform, (]
[., getExpression, (, ), ), ), ;, }, @, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =]
[(, ), ), ), ;, }, @, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =, newNode, (]
[(, ), ), ), ;, }, @, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =, newNode, (]
[;, }, @, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., TRY, ,]
[@, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., TRY, ,, transformBlock, (]
[@, Override, Node, processTryStatement, (, TryStatement, statementNode, ), {, Node, node, =, newNode, (, Token, ., TRY, ,, transformBlock, (]
[=, newNode, (, Token, ., TRY, ,, transformBlock, (, statementNode, ., getTryBlock, (, ), ), ), ;, Node, block, =]
[(, Token, ., TRY, ,, transformBlock, (, statementNode, ., getTryBlock, (, ), ), ), ;, Node, block, =, newNode, (]
[(, Token, ., TRY, ,, transformBlock, (, statementNode, ., getTryBlock, (, ), ), ), ;, Node, block, =, newNode, (]
[., getTryBlock, (, ), ), ), ;, Node, block, =, newNode, (, Token, ., BLOCK, ), ;, boolean, lineSet, =]
[Node, block, =, newNode, (, Token, ., BLOCK, ), ;, boolean, lineSet, =, false, ;, for, (, CatchClause, cc, :]
[Node, block, =, newNode, (, Token, ., BLOCK, ), ;, boolean, lineSet, =, false, ;, for, (, CatchClause, cc, :]
[;, boolean, lineSet, =, false, ;, for, (, CatchClause, cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (]
[;, boolean, lineSet, =, false, ;, for, (, CatchClause, cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (]
[lineSet, =, false, ;, for, (, CatchClause, cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (, lineSet, ==]
[;, for, (, CatchClause, cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (, lineSet, ==, false, ), {]
[;, for, (, CatchClause, cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (, lineSet, ==, false, ), {]
[cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (, lineSet, ==, false, ), {, block, ., setLineno, (]
[cc, :, statementNode, ., getCatchClauses, (, ), ), {, if, (, lineSet, ==, false, ), {, block, ., setLineno, (]
[), {, if, (, lineSet, ==, false, ), {, block, ., setLineno, (, cc, ., getLineno, (, ), ), ;]
[if, (, lineSet, ==, false, ), {, block, ., setLineno, (, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (]
[lineSet, ==, false, ), {, block, ., setLineno, (, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,]
[), {, block, ., setLineno, (, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;]
[block, ., setLineno, (, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;, lineSet, =]
[(, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;, lineSet, =, true, ;, }]
[(, cc, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;, lineSet, =, true, ;, }]
[(, ), ), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;, lineSet, =, true, ;, }, block, ., addChildToBack, (]
[), ;, maybeSetLengthFrom, (, block, ,, cc, ), ;, lineSet, =, true, ;, }, block, ., addChildToBack, (, transform, (]
[,, cc, ), ;, lineSet, =, true, ;, }, block, ., addChildToBack, (, transform, (, cc, ), ), ;, }]
[,, cc, ), ;, lineSet, =, true, ;, }, block, ., addChildToBack, (, transform, (, cc, ), ), ;, }]
[lineSet, =, true, ;, }, block, ., addChildToBack, (, transform, (, cc, ), ), ;, }, node, ., addChildToBack, (]
[., addChildToBack, (, transform, (, cc, ), ), ;, }, node, ., addChildToBack, (, block, ), ;, AstNode, finallyBlock, =]
[., addChildToBack, (, transform, (, cc, ), ), ;, }, node, ., addChildToBack, (, block, ), ;, AstNode, finallyBlock, =]
[;, }, node, ., addChildToBack, (, block, ), ;, AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (]
[;, }, node, ., addChildToBack, (, block, ), ;, AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (]
[node, ., addChildToBack, (, block, ), ;, AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (, finallyBlock, !=]
[(, block, ), ;, AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (, finallyBlock, !=, null, ), {]
[(, block, ), ;, AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (, finallyBlock, !=, null, ), {]
[AstNode, finallyBlock, =, statementNode, ., getFinallyBlock, (, ), ;, if, (, finallyBlock, !=, null, ), {, node, ., addChildToBack, (]
[=, statementNode, ., getFinallyBlock, (, ), ;, if, (, finallyBlock, !=, null, ), {, node, ., addChildToBack, (, transformBlock, (]
[if, (, finallyBlock, !=, null, ), {, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (]
[if, (, finallyBlock, !=, null, ), {, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (]
[(, finallyBlock, !=, null, ), {, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (]
[(, finallyBlock, !=, null, ), {, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (]
[!=, null, ), {, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (, lineSet, ==]
[{, node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&]
[node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&, (]
[node, ., addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&, (]
[addChildToBack, (, transformBlock, (, finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&, (, finallyBlock, !=]
[finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&, (, finallyBlock, !=, null, ), ), {]
[finallyBlock, ), ), ;, }, if, (, (, lineSet, ==, false, ), &&, (, finallyBlock, !=, null, ), ), {]
[}, if, (, (, lineSet, ==, false, ), &&, (, finallyBlock, !=, null, ), ), {, block, ., setLineno, (]
[}, if, (, (, lineSet, ==, false, ), &&, (, finallyBlock, !=, null, ), ), {, block, ., setLineno, (]
[), &&, (, finallyBlock, !=, null, ), ), {, block, ., setLineno, (, finallyBlock, ., getLineno, (, ), ), ;]
[(, finallyBlock, !=, null, ), ), {, block, ., setLineno, (, finallyBlock, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (]
[!=, null, ), ), {, block, ., setLineno, (, finallyBlock, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,]
[block, ., setLineno, (, finallyBlock, ., getLineno, (, ), ), ;, maybeSetLengthFrom, (, block, ,, finallyBlock, ), ;, }, return]
[finallyBlock, ), ;, }, return, node, ;, }, @, Override, Node, processUnaryExpression, (, UnaryExpression, exprNode, ), {, int, type, =]
[;, }, return, node, ;, }, @, Override, Node, processUnaryExpression, (, UnaryExpression, exprNode, ), {, int, type, =, transformTokenType, (]
[;, }, return, node, ;, }, @, Override, Node, processUnaryExpression, (, UnaryExpression, exprNode, ), {, int, type, =, transformTokenType, (]
[(, UnaryExpression, exprNode, ), {, int, type, =, transformTokenType, (, exprNode, ., getType, (, ), ), ;, Node, operand, =]
[exprNode, ), {, int, type, =, transformTokenType, (, exprNode, ., getType, (, ), ), ;, Node, operand, =, transform, (]
[exprNode, ), {, int, type, =, transformTokenType, (, exprNode, ., getType, (, ), ), ;, Node, operand, =, transform, (]
[., getType, (, ), ), ;, Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (]
[., getType, (, ), ), ;, Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (]
[., getType, (, ), ), ;, Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (]
[(, ), ), ;, Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (, type, ==]
[(, ), ), ;, Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (, type, ==]
[Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (, type, ==, Token, ., NEG, &&]
[Node, operand, =, transform, (, exprNode, ., getOperand, (, ), ), ;, if, (, type, ==, Token, ., NEG, &&]
[getOperand, (, ), ), ;, if, (, type, ==, Token, ., NEG, &&, operand, ., isNumber, (, ), ), {]
[getOperand, (, ), ), ;, if, (, type, ==, Token, ., NEG, &&, operand, ., isNumber, (, ), ), {]
[;, if, (, type, ==, Token, ., NEG, &&, operand, ., isNumber, (, ), ), {, operand, ., setDouble, (]
[if, (, type, ==, Token, ., NEG, &&, operand, ., isNumber, (, ), ), {, operand, ., setDouble, (, -]
[if, (, type, ==, Token, ., NEG, &&, operand, ., isNumber, (, ), ), {, operand, ., setDouble, (, -]
[operand, ., isNumber, (, ), ), {, operand, ., setDouble, (, -, operand, ., getDouble, (, ), ), ;, return]
[operand, ., setDouble, (, -, operand, ., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (]
[operand, ., setDouble, (, -, operand, ., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (]
[operand, ., setDouble, (, -, operand, ., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (]
[setDouble, (, -, operand, ., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==]
[setDouble, (, -, operand, ., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==]
[., getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&]
[getDouble, (, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !]
[(, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (]
[(, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (]
[(, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (]
[(, ), ), ;, return, operand, ;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (]
[;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (, operand, ., isGetProp, (, ), ||]
[;, }, else, {, if, (, type, ==, Token, ., DELPROP, &&, !, (, operand, ., isGetProp, (, ), ||]
[type, ==, Token, ., DELPROP, &&, !, (, operand, ., isGetProp, (, ), ||, operand, ., isGetElem, (, ), ||]
[type, ==, Token, ., DELPROP, &&, !, (, operand, ., isGetProp, (, ), ||, operand, ., isGetElem, (, ), ||]
[(, ), ||, operand, ., isGetElem, (, ), ||, operand, ., isName, (, ), ), ), {, String, msg, =]
[||, operand, ., isGetElem, (, ), ||, operand, ., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;]
[||, operand, ., isGetElem, (, ), ||, operand, ., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;]
[(, ), ||, operand, ., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (]
[||, operand, ., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (, msg, ,]
[., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (, msg, ,, sourceName, ,]
[., isName, (, ), ), ), {, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (, msg, ,, sourceName, ,]
[{, String, msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,]
[msg, =, "Invalid delete operand. Only properties can be deleted.", ;, errorReporter, ., error, (, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,]
[(, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (]
[(, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (]
[(, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (]
[,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==]
[,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==]
[., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==, Token, ., INC, ||]
[., getLineno, (, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==, Token, ., INC, ||]
[(, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==, Token, ., INC, ||, type, ==]
[(, ), ,, "", ,, 0, ), ;, }, else, if, (, type, ==, Token, ., INC, ||, type, ==]
[;, }, else, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, if, (]
[}, else, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, if, (, !]
[if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (]
[||, type, ==, Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =]
[||, type, ==, Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =]
[type, ==, Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (]
[type, ==, Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (]
[Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (, type, ==]
[Token, ., DEC, ), {, if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (, type, ==]
[if, (, !, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (, type, ==, Token, ., INC, ), ?]
[!, validAssignmentTarget, (, operand, ), ), {, String, msg, =, (, type, ==, Token, ., INC, ), ?, "invalid increment target", :]
[(, operand, ), ), {, String, msg, =, (, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;]
[(, operand, ), ), {, String, msg, =, (, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;]
[{, String, msg, =, (, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (]
[msg, =, (, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (, msg, ,]
[(, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (, msg, ,, sourceName, ,]
[(, type, ==, Token, ., INC, ), ?, "invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (, msg, ,, sourceName, ,]
[), ?, "invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,]
["invalid increment target", :, "invalid decrement target", ;, errorReporter, ., error, (, msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,]
[msg, ,, sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, }, Node, node, =]
[sourceName, ,, operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, }, Node, node, =, newNode, (]
[operand, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, }, Node, node, =, newNode, (, type, ,]
[,, "", ,, 0, ), ;, }, }, Node, node, =, newNode, (, type, ,, operand, ), ;, if, (]
[,, "", ,, 0, ), ;, }, }, Node, node, =, newNode, (, type, ,, operand, ), ;, if, (]
[}, Node, node, =, newNode, (, type, ,, operand, ), ;, if, (, exprNode, ., isPostfix, (, ), ), {]
[}, Node, node, =, newNode, (, type, ,, operand, ), ;, if, (, exprNode, ., isPostfix, (, ), ), {]
[newNode, (, type, ,, operand, ), ;, if, (, exprNode, ., isPostfix, (, ), ), {, node, ., putBooleanProp, (]
[newNode, (, type, ,, operand, ), ;, if, (, exprNode, ., isPostfix, (, ), ), {, node, ., putBooleanProp, (]
[operand, ), ;, if, (, exprNode, ., isPostfix, (, ), ), {, node, ., putBooleanProp, (, Node, ., INCRDECR_PROP, ,]
[exprNode, ., isPostfix, (, ), ), {, node, ., putBooleanProp, (, Node, ., INCRDECR_PROP, ,, true, ), ;, }, return]
[,, true, ), ;, }, return, node, ;, }, }, private, boolean, validAssignmentTarget, (, Node, target, ), {, switch, (]
[,, true, ), ;, }, return, node, ;, }, }, private, boolean, validAssignmentTarget, (, Node, target, ), {, switch, (]
[}, }, private, boolean, validAssignmentTarget, (, Node, target, ), {, switch, (, target, ., getType, (, ), ), {, case]
[}, }, private, boolean, validAssignmentTarget, (, Node, target, ), {, switch, (, target, ., getType, (, ), ), {, case]
[(, Node, target, ), {, switch, (, target, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[(, Node, target, ), {, switch, (, target, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[switch, (, target, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, case]
[switch, (, target, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, case]
[(, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, return]
[case, Token, ., NAME, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, return, true, ;, }, return]
[:, return, true, ;, }, return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (]
[:, return, true, ;, }, return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (]
[return, true, ;, }, return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !]
[return, true, ;, }, return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !]
[return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&]
[return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&]
[return, false, ;, }, @, Override, Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[Node, processVariableDeclaration, (, VariableDeclaration, declarationNode, ), {, if, (, !, config, ., acceptConstKeyword, &&, declarationNode, ., getType, (, ), ==]
[., getType, (, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, ), {]
[(, ), ==, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, ), {, processIllegalToken, (]
[javascript, ., rhino, ., head, ., Token, ., CONST, ), {, processIllegalToken, (, declarationNode, ), ;, }, Node, node, =]
[rhino, ., head, ., Token, ., CONST, ), {, processIllegalToken, (, declarationNode, ), ;, }, Node, node, =, newNode, (]
[rhino, ., head, ., Token, ., CONST, ), {, processIllegalToken, (, declarationNode, ), ;, }, Node, node, =, newNode, (]
[(, declarationNode, ), ;, }, Node, node, =, newNode, (, Token, ., VAR, ), ;, for, (, VariableInitializer, child, :]
[(, declarationNode, ), ;, }, Node, node, =, newNode, (, Token, ., VAR, ), ;, for, (, VariableInitializer, child, :]
[=, newNode, (, Token, ., VAR, ), ;, for, (, VariableInitializer, child, :, declarationNode, ., getVariables, (, ), ), {]
[=, newNode, (, Token, ., VAR, ), ;, for, (, VariableInitializer, child, :, declarationNode, ., getVariables, (, ), ), {]
[., VAR, ), ;, for, (, VariableInitializer, child, :, declarationNode, ., getVariables, (, ), ), {, node, ., addChildToBack, (]
[), ;, for, (, VariableInitializer, child, :, declarationNode, ., getVariables, (, ), ), {, node, ., addChildToBack, (, transform, (]
[:, declarationNode, ., getVariables, (, ), ), {, node, ., addChildToBack, (, transform, (, child, ), ), ;, }, return]
[), ), ;, }, return, node, ;, }, @, Override, Node, processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =]
[;, }, return, node, ;, }, @, Override, Node, processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =, transform, (]
[;, }, return, node, ;, }, @, Override, Node, processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =, transform, (]
[processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =, transform, (, initializerNode, ., getTarget, (, ), ), ;, if, (]
[processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =, transform, (, initializerNode, ., getTarget, (, ), ), ;, if, (]
[processVariableInitializer, (, VariableInitializer, initializerNode, ), {, Node, node, =, transform, (, initializerNode, ., getTarget, (, ), ), ;, if, (]
[Node, node, =, transform, (, initializerNode, ., getTarget, (, ), ), ;, if, (, initializerNode, ., getInitializer, (, ), !=]
[., getTarget, (, ), ), ;, if, (, initializerNode, ., getInitializer, (, ), !=, null, ), {, Node, initalizer, =]
[(, ), ), ;, if, (, initializerNode, ., getInitializer, (, ), !=, null, ), {, Node, initalizer, =, transform, (]
[(, ), ), ;, if, (, initializerNode, ., getInitializer, (, ), !=, null, ), {, Node, initalizer, =, transform, (]
[., getInitializer, (, ), !=, null, ), {, Node, initalizer, =, transform, (, initializerNode, ., getInitializer, (, ), ), ;]
[., getInitializer, (, ), !=, null, ), {, Node, initalizer, =, transform, (, initializerNode, ., getInitializer, (, ), ), ;]
[!=, null, ), {, Node, initalizer, =, transform, (, initializerNode, ., getInitializer, (, ), ), ;, node, ., addChildToBack, (]
[initalizer, =, transform, (, initializerNode, ., getInitializer, (, ), ), ;, node, ., addChildToBack, (, initalizer, ), ;, }, return]
[addChildToBack, (, initalizer, ), ;, }, return, node, ;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return]
[initalizer, ), ;, }, return, node, ;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return, newNode, (]
[initalizer, ), ;, }, return, node, ;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return, newNode, (]
[return, node, ;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return, newNode, (, Token, ., WHILE, ,]
[;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return, newNode, (, Token, ., WHILE, ,, transform, (]
[;, }, @, Override, Node, processWhileLoop, (, WhileLoop, loopNode, ), {, return, newNode, (, Token, ., WHILE, ,, transform, (]
[WhileLoop, loopNode, ), {, return, newNode, (, Token, ., WHILE, ,, transform, (, loopNode, ., getCondition, (, ), ), ,]
[), {, return, newNode, (, Token, ., WHILE, ,, transform, (, loopNode, ., getCondition, (, ), ), ,, transformBlock, (]
[), {, return, newNode, (, Token, ., WHILE, ,, transform, (, loopNode, ., getCondition, (, ), ), ,, transformBlock, (]
[(, loopNode, ., getBody, (, ), ), ), ;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return]
[., getBody, (, ), ), ), ;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return, newNode, (]
[., getBody, (, ), ), ), ;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return, newNode, (]
[), ), ;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return, newNode, (, Token, ., WITH, ,]
[;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return, newNode, (, Token, ., WITH, ,, transform, (]
[;, }, @, Override, Node, processWithStatement, (, WithStatement, statementNode, ), {, return, newNode, (, Token, ., WITH, ,, transform, (]
[WithStatement, statementNode, ), {, return, newNode, (, Token, ., WITH, ,, transform, (, statementNode, ., getExpression, (, ), ), ,]
[), {, return, newNode, (, Token, ., WITH, ,, transform, (, statementNode, ., getExpression, (, ), ), ,, transformBlock, (]
[), {, return, newNode, (, Token, ., WITH, ,, transform, (, statementNode, ., getExpression, (, ), ), ,, transformBlock, (]
[transformBlock, (, statementNode, ., getStatement, (, ), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {]
[transformBlock, (, statementNode, ., getStatement, (, ), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {]
[getStatement, (, ), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (]
[getStatement, (, ), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[), ), ), ;, }, @, Override, Node, processIllegalToken, (, AstNode, node, ), {, errorReporter, ., error, (, "Unsupported syntax: ", +]
[errorReporter, ., error, (, "Unsupported syntax: ", +, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., typeToName, (]
[errorReporter, ., error, (, "Unsupported syntax: ", +, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., typeToName, (]
[., google, ., javascript, ., rhino, ., head, ., Token, ., typeToName, (, node, ., getType, (, ), ), ,]
[., javascript, ., rhino, ., head, ., Token, ., typeToName, (, node, ., getType, (, ), ), ,, sourceName, ,]
[., javascript, ., rhino, ., head, ., Token, ., typeToName, (, node, ., getType, (, ), ), ,, sourceName, ,]
[., Token, ., typeToName, (, node, ., getType, (, ), ), ,, sourceName, ,, node, ., getLineno, (, ), ,]
[., typeToName, (, node, ., getType, (, ), ), ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[., getType, (, ), ), ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, return]
[(, ), ), ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[(, ), ), ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, return, newNode, (]
[,, 0, ), ;, return, newNode, (, Token, ., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {]
[,, 0, ), ;, return, newNode, (, Token, ., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {]
[return, newNode, (, Token, ., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {, errorReporter, ., error, (]
[(, Token, ., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {, errorReporter, ., error, (, "destructuring assignment forbidden", ,]
[., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {, errorReporter, ., error, (, "destructuring assignment forbidden", ,, sourceName, ,]
[., EMPTY, ), ;, }, void, reportDestructuringAssign, (, AstNode, node, ), {, errorReporter, ., error, (, "destructuring assignment forbidden", ,, sourceName, ,]
[reportDestructuringAssign, (, AstNode, node, ), {, errorReporter, ., error, (, "destructuring assignment forbidden", ,, sourceName, ,, node, ., getLineno, (, ), ,]
[AstNode, node, ), {, errorReporter, ., error, (, "destructuring assignment forbidden", ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {]
[(, ), ,, "", ,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {, errorReporter, ., error, (]
[,, "", ,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {, errorReporter, ., error, (, GETTER_ERROR_MESSAGE, ,]
[,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {, errorReporter, ., error, (, GETTER_ERROR_MESSAGE, ,, sourceName, ,]
[,, 0, ), ;, }, void, reportGetter, (, AstNode, node, ), {, errorReporter, ., error, (, GETTER_ERROR_MESSAGE, ,, sourceName, ,]
[reportGetter, (, AstNode, node, ), {, errorReporter, ., error, (, GETTER_ERROR_MESSAGE, ,, sourceName, ,, node, ., getLineno, (, ), ,]
[AstNode, node, ), {, errorReporter, ., error, (, GETTER_ERROR_MESSAGE, ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {]
[(, ), ,, "", ,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {, errorReporter, ., error, (]
[,, "", ,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {, errorReporter, ., error, (, SETTER_ERROR_MESSAGE, ,]
[,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {, errorReporter, ., error, (, SETTER_ERROR_MESSAGE, ,, sourceName, ,]
[,, 0, ), ;, }, void, reportSetter, (, AstNode, node, ), {, errorReporter, ., error, (, SETTER_ERROR_MESSAGE, ,, sourceName, ,]
[reportSetter, (, AstNode, node, ), {, errorReporter, ., error, (, SETTER_ERROR_MESSAGE, ,, sourceName, ,, node, ., getLineno, (, ), ,]
[AstNode, node, ), {, errorReporter, ., error, (, SETTER_ERROR_MESSAGE, ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {]
[(, ), ,, "", ,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {, errorReporter, ., error, (]
[,, "", ,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "getters may not have parameters", ,]
[,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "getters may not have parameters", ,, sourceName, ,]
[,, 0, ), ;, }, void, reportGetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "getters may not have parameters", ,, sourceName, ,]
[reportGetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "getters may not have parameters", ,, sourceName, ,, node, ., getLineno, (, ), ,]
[AstNode, node, ), {, errorReporter, ., error, (, "getters may not have parameters", ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {]
[,, node, ., getLineno, (, ), ,, "", ,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {]
[(, ), ,, "", ,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {, errorReporter, ., error, (]
[,, "", ,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "setters must have exactly one parameter", ,]
[,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "setters must have exactly one parameter", ,, sourceName, ,]
[,, 0, ), ;, }, void, reportSetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "setters must have exactly one parameter", ,, sourceName, ,]
[reportSetterParam, (, AstNode, node, ), {, errorReporter, ., error, (, "setters must have exactly one parameter", ,, sourceName, ,, node, ., getLineno, (, ), ,]
[AstNode, node, ), {, errorReporter, ., error, (, "setters must have exactly one parameter", ,, sourceName, ,, node, ., getLineno, (, ), ,, "", ,]
[), ,, "", ,, 0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[0, ), ;, }, }, private, static, int, transformTokenType, (, int, token, ), {, switch, (, token, ), {, case]
[(, token, ), {, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return]
[(, token, ), {, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RETURN, :, return, Token, ., RETURN, ;, case]
[Token, ., RETURN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return]
[Token, ., RETURN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITOR, :, return, Token, ., BITOR, ;, case]
[Token, ., BITOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return]
[Token, ., BITOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITXOR, :, return, Token, ., BITXOR, ;, case]
[Token, ., BITXOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return]
[Token, ., BITXOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITAND, :, return, Token, ., BITAND, ;, case]
[Token, ., BITAND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return]
[Token, ., BITAND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EQ, :, return, Token, ., EQ, ;, case]
[Token, ., EQ, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return]
[Token, ., EQ, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NE, :, return, Token, ., NE, ;, case]
[Token, ., NE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return]
[Token, ., NE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LT, :, return, Token, ., LT, ;, case]
[Token, ., LT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return]
[Token, ., LT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LE, :, return, Token, ., LE, ;, case]
[Token, ., LE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return]
[Token, ., LE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GT, :, return, Token, ., GT, ;, case]
[Token, ., GT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return]
[Token, ., GT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GE, :, return, Token, ., GE, ;, case]
[Token, ., GE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return]
[Token, ., GE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LSH, :, return, Token, ., LSH, ;, case]
[Token, ., LSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return]
[Token, ., LSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., RSH, :, return, Token, ., RSH, ;, case]
[Token, ., RSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return]
[Token, ., RSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., URSH, :, return, Token, ., URSH, ;, case]
[Token, ., URSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return]
[Token, ., URSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ADD, :, return, Token, ., ADD, ;, case]
[Token, ., ADD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return]
[Token, ., ADD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SUB, :, return, Token, ., SUB, ;, case]
[Token, ., SUB, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return]
[Token, ., SUB, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MUL, :, return, Token, ., MUL, ;, case]
[Token, ., MUL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return]
[Token, ., MUL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DIV, :, return, Token, ., DIV, ;, case]
[Token, ., DIV, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return]
[Token, ., DIV, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., MOD, :, return, Token, ., MOD, ;, case]
[Token, ., MOD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return]
[Token, ., MOD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NOT, :, return, Token, ., NOT, ;, case]
[Token, ., NOT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return]
[Token, ., NOT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BITNOT, :, return, Token, ., BITNOT, ;, case]
[Token, ., BITNOT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return]
[Token, ., BITNOT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., POS, :, return, Token, ., POS, ;, case]
[Token, ., POS, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return]
[Token, ., POS, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEG, :, return, Token, ., NEG, ;, case]
[Token, ., NEG, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return]
[Token, ., NEG, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NEW, :, return, Token, ., NEW, ;, case]
[Token, ., NEW, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return]
[Token, ., NEW, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DELPROP, :, return, Token, ., DELPROP, ;, case]
[Token, ., DELPROP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return]
[Token, ., DELPROP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TYPEOF, :, return, Token, ., TYPEOF, ;, case]
[Token, ., TYPEOF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return]
[Token, ., TYPEOF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETPROP, :, return, Token, ., GETPROP, ;, case]
[Token, ., GETPROP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return]
[Token, ., GETPROP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GETELEM, :, return, Token, ., GETELEM, ;, case]
[Token, ., GETELEM, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return]
[Token, ., GETELEM, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CALL, :, return, Token, ., CALL, ;, case]
[Token, ., CALL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return]
[Token, ., CALL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NAME, :, return, Token, ., NAME, ;, case]
[Token, ., NAME, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return]
[Token, ., NAME, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NUMBER, :, return, Token, ., NUMBER, ;, case]
[Token, ., NUMBER, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return]
[Token, ., NUMBER, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., STRING, :, return, Token, ., STRING, ;, case]
[Token, ., STRING, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return]
[Token, ., STRING, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., NULL, :, return, Token, ., NULL, ;, case]
[Token, ., NULL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return]
[Token, ., NULL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THIS, :, return, Token, ., THIS, ;, case]
[Token, ., THIS, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return]
[Token, ., THIS, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FALSE, :, return, Token, ., FALSE, ;, case]
[Token, ., FALSE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return]
[Token, ., FALSE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRUE, :, return, Token, ., TRUE, ;, case]
[Token, ., TRUE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return]
[Token, ., TRUE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHEQ, :, return, Token, ., SHEQ, ;, case]
[Token, ., SHEQ, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return]
[Token, ., SHEQ, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SHNE, :, return, Token, ., SHNE, ;, case]
[Token, ., SHNE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return]
[Token, ., SHNE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., REGEXP, :, return, Token, ., REGEXP, ;, case]
[Token, ., REGEXP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return]
[Token, ., REGEXP, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., THROW, :, return, Token, ., THROW, ;, case]
[Token, ., THROW, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return]
[Token, ., THROW, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IN, :, return, Token, ., IN, ;, case]
[Token, ., IN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return]
[Token, ., IN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INSTANCEOF, :, return, Token, ., INSTANCEOF, ;, case]
[Token, ., INSTANCEOF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return]
[Token, ., INSTANCEOF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ARRAYLIT, :, return, Token, ., ARRAYLIT, ;, case]
[Token, ., ARRAYLIT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return]
[Token, ., ARRAYLIT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OBJECTLIT, :, return, Token, ., OBJECTLIT, ;, case]
[Token, ., OBJECTLIT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return]
[Token, ., OBJECTLIT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., TRY, :, return, Token, ., TRY, ;, case]
[Token, ., TRY, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return]
[Token, ., TRY, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LP, :, return, Token, ., PARAM_LIST, ;, case]
[Token, ., PARAM_LIST, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return]
[Token, ., PARAM_LIST, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., COMMA, :, return, Token, ., COMMA, ;, case]
[Token, ., COMMA, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return]
[Token, ., COMMA, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN, :, return, Token, ., ASSIGN, ;, case]
[Token, ., ASSIGN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return]
[Token, ., ASSIGN, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITOR, :, return, Token, ., ASSIGN_BITOR, ;, case]
[Token, ., ASSIGN_BITOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return]
[Token, ., ASSIGN_BITOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITXOR, :, return, Token, ., ASSIGN_BITXOR, ;, case]
[Token, ., ASSIGN_BITXOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return]
[Token, ., ASSIGN_BITXOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_BITAND, :, return, Token, ., ASSIGN_BITAND, ;, case]
[Token, ., ASSIGN_BITAND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return]
[Token, ., ASSIGN_BITAND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_LSH, :, return, Token, ., ASSIGN_LSH, ;, case]
[Token, ., ASSIGN_LSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return]
[Token, ., ASSIGN_LSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_RSH, :, return, Token, ., ASSIGN_RSH, ;, case]
[Token, ., ASSIGN_RSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return]
[Token, ., ASSIGN_RSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_URSH, :, return, Token, ., ASSIGN_URSH, ;, case]
[Token, ., ASSIGN_URSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return]
[Token, ., ASSIGN_URSH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_ADD, :, return, Token, ., ASSIGN_ADD, ;, case]
[Token, ., ASSIGN_ADD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return]
[Token, ., ASSIGN_ADD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_SUB, :, return, Token, ., ASSIGN_SUB, ;, case]
[Token, ., ASSIGN_SUB, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return]
[Token, ., ASSIGN_SUB, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MUL, :, return, Token, ., ASSIGN_MUL, ;, case]
[Token, ., ASSIGN_MUL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return]
[Token, ., ASSIGN_MUL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_DIV, :, return, Token, ., ASSIGN_DIV, ;, case]
[Token, ., ASSIGN_DIV, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return]
[Token, ., ASSIGN_DIV, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., ASSIGN_MOD, :, return, Token, ., ASSIGN_MOD, ;, case]
[Token, ., ASSIGN_MOD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return]
[Token, ., ASSIGN_MOD, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., HOOK, :, return, Token, ., HOOK, ;, case]
[Token, ., HOOK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return]
[Token, ., HOOK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., OR, :, return, Token, ., OR, ;, case]
[Token, ., OR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return]
[Token, ., OR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., AND, :, return, Token, ., AND, ;, case]
[Token, ., AND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return]
[Token, ., AND, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., INC, :, return, Token, ., INC, ;, case]
[Token, ., INC, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return]
[Token, ., INC, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEC, :, return, Token, ., DEC, ;, case]
[Token, ., DEC, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return]
[Token, ., DEC, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FUNCTION, :, return, Token, ., FUNCTION, ;, case]
[Token, ., FUNCTION, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return]
[Token, ., FUNCTION, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., IF, :, return, Token, ., IF, ;, case]
[Token, ., IF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return]
[Token, ., IF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SWITCH, :, return, Token, ., SWITCH, ;, case]
[Token, ., SWITCH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return]
[Token, ., SWITCH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CASE, :, return, Token, ., CASE, ;, case]
[Token, ., CASE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return]
[Token, ., CASE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEFAULT, :, return, Token, ., DEFAULT_CASE, ;, case]
[Token, ., DEFAULT_CASE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return]
[Token, ., DEFAULT_CASE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WHILE, :, return, Token, ., WHILE, ;, case]
[Token, ., WHILE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return]
[Token, ., WHILE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DO, :, return, Token, ., DO, ;, case]
[Token, ., DO, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return]
[Token, ., DO, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., FOR, :, return, Token, ., FOR, ;, case]
[Token, ., FOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return]
[Token, ., FOR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BREAK, :, return, Token, ., BREAK, ;, case]
[Token, ., BREAK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return]
[Token, ., BREAK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONTINUE, :, return, Token, ., CONTINUE, ;, case]
[Token, ., CONTINUE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return]
[Token, ., CONTINUE, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VAR, :, return, Token, ., VAR, ;, case]
[Token, ., VAR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return]
[Token, ., VAR, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., WITH, :, return, Token, ., WITH, ;, case]
[Token, ., WITH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return]
[Token, ., WITH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CATCH, :, return, Token, ., CATCH, ;, case]
[Token, ., CATCH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return]
[Token, ., CATCH, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., VOID, :, return, Token, ., VOID, ;, case]
[Token, ., VOID, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return]
[Token, ., VOID, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EMPTY, :, return, Token, ., EMPTY, ;, case]
[Token, ., EMPTY, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return]
[Token, ., EMPTY, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., BLOCK, :, return, Token, ., BLOCK, ;, case]
[Token, ., BLOCK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return]
[Token, ., BLOCK, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., LABEL, :, return, Token, ., LABEL, ;, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., LABEL, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_VOID, :, case]
[Token, ., EXPR_VOID, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return]
[Token, ., EXPR_VOID, :, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., EXPR_RESULT, :, return, Token, ., EXPR_RESULT, ;, case]
[Token, ., EXPR_RESULT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return]
[Token, ., EXPR_RESULT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SCRIPT, :, return, Token, ., SCRIPT, ;, case]
[Token, ., SCRIPT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return]
[Token, ., SCRIPT, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., GET, :, return, Token, ., GETTER_DEF, ;, case]
[Token, ., GETTER_DEF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return]
[Token, ., GETTER_DEF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., SET, :, return, Token, ., SETTER_DEF, ;, case]
[Token, ., SETTER_DEF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return]
[Token, ., SETTER_DEF, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[com, ., google, ., javascript, ., rhino, ., head, ., Token, ., CONST, :, return, Token, ., CONST, ;, case]
[Token, ., CONST, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEBUGGER, :, return]
[Token, ., CONST, ;, case, com, ., google, ., javascript, ., rhino, ., head, ., Token, ., DEBUGGER, :, return]
[., google, ., javascript, ., rhino, ., head, ., Token, ., DEBUGGER, :, return, Token, ., DEBUGGER, ;, }, throw]
[javascript, ., rhino, ., head, ., Token, ., DEBUGGER, :, return, Token, ., DEBUGGER, ;, }, throw, new, IllegalStateException, (]
[javascript, ., rhino, ., head, ., Token, ., DEBUGGER, :, return, Token, ., DEBUGGER, ;, }, throw, new, IllegalStateException, (]
[head, ., Token, ., DEBUGGER, :, return, Token, ., DEBUGGER, ;, }, throw, new, IllegalStateException, (, String, ., valueOf, (]
[IllegalStateException, (, String, ., valueOf, (, token, ), ), ;, }, private, Node, newNode, (, int, type, ), {, return]
[IllegalStateException, (, String, ., valueOf, (, token, ), ), ;, }, private, Node, newNode, (, int, type, ), {, return]
[., valueOf, (, token, ), ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (]
[), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ), ., clonePropsFrom, (]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ), {, return]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ), {, return]
[(, templateNode, ), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ), {, return, new, Node, (]
[), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ), {, return, new, Node, (, type, ,]
[newNode, (, int, type, ,, Node, child1, ), {, return, new, Node, (, type, ,, child1, ), ., clonePropsFrom, (]
[(, templateNode, ), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ), {, return]
[(, templateNode, ), ;, }, private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ), {, return]
[;, }, private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ), {, return, new, Node, (]
[private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ), {, return, new, Node, (, type, ,]
[newNode, (, int, type, ,, Node, child1, ,, Node, child2, ), {, return, new, Node, (, type, ,, child1, ,]
[Node, child1, ,, Node, child2, ), {, return, new, Node, (, type, ,, child1, ,, child2, ), ., clonePropsFrom, (]
[;, }, private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ,, Node, child3, ), {, return]
[;, }, private, Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ,, Node, child3, ), {, return]
[Node, newNode, (, int, type, ,, Node, child1, ,, Node, child2, ,, Node, child3, ), {, return, new, Node, (]
[(, int, type, ,, Node, child1, ,, Node, child2, ,, Node, child3, ), {, return, new, Node, (, type, ,]
[type, ,, Node, child1, ,, Node, child2, ,, Node, child3, ), {, return, new, Node, (, type, ,, child1, ,]
[Node, child1, ,, Node, child2, ,, Node, child3, ), {, return, new, Node, (, type, ,, child1, ,, child2, ,]
[,, Node, child3, ), {, return, new, Node, (, type, ,, child1, ,, child2, ,, child3, ), ., clonePropsFrom, (]
[child2, ,, child3, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, value, ), {, return]
[child2, ,, child3, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, value, ), {, return]
[child2, ,, child3, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, value, ), {, return]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, value, ), {, return, IR, ., string, (]
[;, }, private, Node, newStringNode, (, String, value, ), {, return, IR, ., string, (, value, ), ., clonePropsFrom, (]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, int, type, ,, String, value, ), {, return]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, int, type, ,, String, value, ), {, return]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, int, type, ,, String, value, ), {, return]
[templateNode, ), ;, }, private, Node, newStringNode, (, int, type, ,, String, value, ), {, return, Node, ., newString, (]
[;, }, private, Node, newStringNode, (, int, type, ,, String, value, ), {, return, Node, ., newString, (, type, ,]
[(, int, type, ,, String, value, ), {, return, Node, ., newString, (, type, ,, value, ), ., clonePropsFrom, (]
[type, ,, value, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNumberNode, (, Double, value, ), {, return]
[type, ,, value, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNumberNode, (, Double, value, ), {, return]
[type, ,, value, ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNumberNode, (, Double, value, ), {, return]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNumberNode, (, Double, value, ), {, return, IR, ., number, (]
[;, }, private, Node, newNumberNode, (, Double, value, ), {, return, IR, ., number, (, value, ), ., clonePropsFrom, (]
