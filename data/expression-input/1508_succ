[;, Collection, <, JSType, >, alternates, ;, private, final, int, hashcode, ;, UnionType, (, JSTypeRegistry, registry, ,, Collection, <, JSType]
[), ;, this, ., alternates, =, alternates, ;, this, ., hashcode, =, this, ., alternates, ., hashCode, (, ), ;]
[=, alternates, ;, this, ., hashcode, =, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType]
[., alternates, =, alternates, ;, this, ., hashcode, =, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable]
[;, this, ., hashcode, =, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates]
[=, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates, (, ), {, return]
[., hashcode, =, this, ., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates, (, )]
[;, }, public, Iterable, <, JSType, >, getAlternates, (, ), {, return, alternates, ;, }, @, Override, public, boolean, matchesNumberContext]
[., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates, (, ), {, return, alternates, ;, }, @]
[., alternates, ., hashCode, (, ), ;, }, public, Iterable, <, JSType, >, getAlternates, (, ), {, return, alternates, ;]
[;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, t, ., matchesNumberContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for]
[., matchesNumberContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, matchesStringContext]
[;, }, }, return, false, ;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, matchesStringContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, t, ., matchesStringContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for]
[., matchesStringContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, matchesObjectContext]
[;, }, }, return, false, ;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, t, ., matchesObjectContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, JSType, findPropertyType, (, String, propertyName, )]
[., matchesObjectContext, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, JSType, findPropertyType]
[;, }, }, return, false, ;, }, @, Override, public, JSType, findPropertyType, (, String, propertyName, ), {, JSType, propertyType, =]
[;, }, @, Override, public, JSType, findPropertyType, (, String, propertyName, ), {, JSType, propertyType, =, null, ;, for, (, JSType]
[;, for, (, JSType, alternate, :, getAlternates, (, ), ), {, if, (, alternate, ., isNullType, (, ), ||, alternate]
[), {, if, (, alternate, ., isNullType, (, ), ||, alternate, ., isVoidType, (, ), ), {, continue, ;, }]
[), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null]
[||, alternate, ., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, )]
[., isNullType, (, ), ||, alternate, ., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, .]
[), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null]
[., isVoidType, (, ), ), {, continue, ;, }, JSType, altPropertyType, =, alternate, ., findPropertyType, (, propertyName, ), ;, if]
[;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =]
[., findPropertyType, (, propertyName, ), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==]
[), ;, if, (, altPropertyType, ==, null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType]
[), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType]
[==, null, ), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else]
[), {, continue, ;, }, if, (, propertyType, ==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType]
[), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }]
[==, null, ), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;]
[), {, propertyType, =, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }]
[=, altPropertyType, ;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }, return, propertyType, ;]
[;, }, else, {, propertyType, =, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }, return, propertyType, ;, }, @]
[=, propertyType, ., getLeastSupertype, (, altPropertyType, ), ;, }, }, return, propertyType, ;, }, @, Override, public, boolean, canBeCalled, (]
[;, }, }, return, propertyType, ;, }, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :]
[., getLeastSupertype, (, altPropertyType, ), ;, }, }, return, propertyType, ;, }, @, Override, public, boolean, canBeCalled, (, ), {]
[), ;, }, }, return, propertyType, ;, }, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t]
[;, }, @, Override, public, boolean, canBeCalled, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, !, t, ., canBeCalled, (, ), ), {, return, false, ;, }, }, return, true, ;]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder]
[., canBeCalled, (, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, autobox]
[;, }, }, return, true, ;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder]
[;, }, @, Override, public, JSType, autobox, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for]
[;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., autobox, (, ), ), ;]
[), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., autobox, (, ), )]
[), {, restricted, ., addAlternate, (, t, ., autobox, (, ), ), ;, }, return, restricted, ., build, (, )]
[;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted]
[., addAlternate, (, t, ., autobox, (, ), ), ;, }, return, restricted, ., build, (, ), ;, }, @]
[), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder]
[., autobox, (, ), ), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined]
[;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for]
[., build, (, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (]
[;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), ), ;]
[), ;, for, (, JSType, t, :, alternates, ), {, restricted, ., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), )]
[), {, restricted, ., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, restricted, ., build, (, )]
[;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {]
[., addAlternate, (, t, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, restricted, ., build, (, ), ;, }, @]
[), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, )]
[., restrictByNotNullOrUndefined, (, ), ), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, TernaryValue, testForEquality]
[;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, TernaryValue, result, =, null, ;, for, (, JSType]
[., build, (, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, TernaryValue, result, =, null]
[;, for, (, JSType, t, :, alternates, ), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if]
[), {, TernaryValue, test, =, t, ., testForEquality, (, that, ), ;, if, (, result, ==, null, ), {, result]
[;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (, !, result, ., equals]
[., testForEquality, (, that, ), ;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if]
[), ;, if, (, result, ==, null, ), {, result, =, test, ;, }, else, if, (, !, result, .]
[), {, result, =, test, ;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return]
[==, null, ), {, result, =, test, ;, }, else, if, (, !, result, ., equals, (, test, ), )]
[), {, result, =, test, ;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return]
[=, test, ;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return, UNKNOWN, ;, }]
[;, }, else, if, (, !, result, ., equals, (, test, ), ), {, return, UNKNOWN, ;, }, }, return]
[), {, return, UNKNOWN, ;, }, }, return, result, ;, }, @, Override, public, boolean, isNullable, (, ), {, for]
[), {, return, UNKNOWN, ;, }, }, return, result, ;, }, @, Override, public, boolean, isNullable, (, ), {, for]
[., equals, (, test, ), ), {, return, UNKNOWN, ;, }, }, return, result, ;, }, @, Override, public, boolean]
[), ), {, return, UNKNOWN, ;, }, }, return, result, ;, }, @, Override, public, boolean, isNullable, (, ), {]
[;, }, }, return, result, ;, }, @, Override, public, boolean, isNullable, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, isNullable, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, t, ., isNullable, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, for]
[., isNullable, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isUnknownType]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, for, (, JSType, t, :]
[;, }, @, Override, public, boolean, isUnknownType, (, ), {, for, (, JSType, t, :, alternates, ), {, if, (]
[), {, if, (, t, ., isUnknownType, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isStruct, (, ), {, for]
[., isUnknownType, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isStruct]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isStruct, (, ), {, for, (, JSType, typ, :]
[;, }, @, Override, public, boolean, isStruct, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {]
[), {, if, (, typ, ., isStruct, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isDict, (, ), {, for]
[., isStruct, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isDict]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isDict, (, ), {, for, (, JSType, typ, :]
[;, }, @, Override, public, boolean, isDict, (, ), {, for, (, JSType, typ, :, getAlternates, (, ), ), {]
[), {, if, (, typ, ., isDict, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, )]
[., isDict, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype]
[;, }, }, return, false, ;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !]
[;, }, @, Override, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, !, that, ., isUnknownType, (, )]
[), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that]
[&&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[&&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !]
[., isUnknownType, (, ), &&, !, that, ., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, )]
[), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that]
[), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that]
[., isUnionType, (, ), ), {, for, (, JSType, alternate, :, alternates, ), {, if, (, !, alternate, ., isUnknownType]
[), {, if, (, !, alternate, ., isUnknownType, (, ), &&, that, ., isSubtype, (, alternate, ), ), {, return]
[), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, JSType, meet, (]
[&&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,]
[&&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,]
[., isUnknownType, (, ), &&, that, ., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return]
[), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, JSType, meet, (]
[., isSubtype, (, alternate, ), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,, that, )]
[), ), {, return, this, ;, }, }, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, JSType, meet]
[;, }, }, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, JSType, meet, (, JSType, that, ), {]
[;, }, JSType, meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (]
[,, that, ), ;, }, JSType, meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, )]
[), ;, }, JSType, meet, (, JSType, that, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for]
[;, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (, that, ), ), {, builder]
[), ;, for, (, JSType, alternate, :, alternates, ), {, if, (, alternate, ., isSubtype, (, that, ), ), {]
[), {, if, (, alternate, ., isSubtype, (, that, ), ), {, builder, ., addAlternate, (, alternate, ), ;, }]
[), {, builder, ., addAlternate, (, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), ), {]
[., isSubtype, (, that, ), ), {, builder, ., addAlternate, (, alternate, ), ;, }, }, if, (, that, .]
[), ), {, builder, ., addAlternate, (, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), )]
[;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType]
[., addAlternate, (, alternate, ), ;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType]
[), ;, }, }, if, (, that, ., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :, that, .]
[), {, for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType, (, ), ., alternates, ), {, if, (, otherAlternate, .]
[., isUnionType, (, ), ), {, for, (, JSType, otherAlternate, :, that, ., toMaybeUnionType, (, ), ., alternates, ), {]
[), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }]
[., alternates, ), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, otherAlternate, )]
[., toMaybeUnionType, (, ), ., alternates, ), {, if, (, otherAlternate, ., isSubtype, (, this, ), ), {, builder, .]
[), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (, this]
[., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (]
[), ), {, builder, ., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (]
[;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, that]
[., addAlternate, (, otherAlternate, ), ;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {]
[), ;, }, }, }, else, if, (, that, ., isSubtype, (, this, ), ), {, builder, ., addAlternate, (]
[), {, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;, if]
[., isSubtype, (, this, ), ), {, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, .]
[), ), {, builder, ., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;]
[;, }, JSType, result, =, builder, ., build, (, ), ;, if, (, !, result, ., isNoType, (, ), )]
[., addAlternate, (, that, ), ;, }, JSType, result, =, builder, ., build, (, ), ;, if, (, !, result]
[), ;, }, JSType, result, =, builder, ., build, (, ), ;, if, (, !, result, ., isNoType, (, )]
[;, if, (, !, result, ., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, .]
[., build, (, ), ;, if, (, !, result, ., isNoType, (, ), ), {, return, result, ;, }, else]
[), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (]
[), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (]
[., isNoType, (, ), ), {, return, result, ;, }, else, if, (, this, ., isObject, (, ), &&, (]
[;, }, else, if, (, this, ., isObject, (, ), &&, (, that, ., isObject, (, ), &&, !, that]
[), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[&&, (, that, ., isObject, (, ), &&, !, that, ., isNoType, (, ), ), ), {, return, getNativeType, (]
[., isObject, (, ), &&, (, that, ., isObject, (, ), &&, !, that, ., isNoType, (, ), ), )]
[), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE]
[&&, !, that, ., isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else]
[., isObject, (, ), &&, !, that, ., isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE]
[), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE]
[), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE]
[., isNoType, (, ), ), ), {, return, getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType]
[;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,]
[), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that]
[., NO_OBJECT_TYPE, ), ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (]
[;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY]
[), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==, EquivalenceMethod, .]
[., NO_TYPE, ), ;, }, }, boolean, checkUnionEquivalenceHelper, (, UnionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, eqMethod, ==]
[), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate]
[&&, alternates, ., size, (, ), !=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }]
[==, EquivalenceMethod, ., IDENTITY, &&, alternates, ., size, (, ), !=, that, ., alternates, ., size, (, ), ), {]
[&&, alternates, ., size, (, ), !=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }]
[., IDENTITY, &&, alternates, ., size, (, ), !=, that, ., alternates, ., size, (, ), ), {, return, false]
[), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate]
[!=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }, for, (, JSType, alternate, :, that]
[., size, (, ), !=, that, ., alternates, ., size, (, ), ), {, return, false, ;, }, for, (]
[), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate]
[., size, (, ), ), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates, ), {]
[., alternates, ., size, (, ), ), {, return, false, ;, }, for, (, JSType, alternate, :, that, ., alternates]
[;, }, for, (, JSType, alternate, :, that, ., alternates, ), {, if, (, !, hasAlternate, (, alternate, ,, eqMethod]
[), {, if, (, !, hasAlternate, (, alternate, ,, eqMethod, ), ), {, return, false, ;, }, }, return, true]
[., alternates, ), {, if, (, !, hasAlternate, (, alternate, ,, eqMethod, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod]
[,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, hasAlternate, (, JSType, type]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod]
[;, }, }, return, true, ;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod, ), {, for, (]
[;, }, private, boolean, hasAlternate, (, JSType, type, ,, EquivalenceMethod, eqMethod, ), {, for, (, JSType, alternate, :, alternates, )]
[), {, if, (, alternate, ., checkEquivalenceHelper, (, type, ,, eqMethod, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, hasProperty, (, String, pname, )]
[., checkEquivalenceHelper, (, type, ,, eqMethod, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override]
[,, eqMethod, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, hasProperty, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, hasProperty, (, String, pname]
[;, }, }, return, false, ;, }, @, Override, public, boolean, hasProperty, (, String, pname, ), {, for, (, JSType]
[;, }, @, Override, public, boolean, hasProperty, (, String, pname, ), {, for, (, JSType, alternate, :, alternates, ), {]
[), {, if, (, alternate, ., hasProperty, (, pname, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., hasProperty, (, pname, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, this, ., hashcode, ;]
[;, }, @, Override, public, int, hashCode, (, ), {, return, this, ., hashcode, ;, }, @, Override, public, UnionType]
[;, }, @, Override, public, UnionType, toMaybeUnionType, (, ), {, return, this, ;, }, @, Override, public, boolean, isObject, (]
[., hashcode, ;, }, @, Override, public, UnionType, toMaybeUnionType, (, ), {, return, this, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, isObject, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if, (]
[), {, if, (, !, alternate, ., isObject, (, ), ), {, return, false, ;, }, }, return, true, ;]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, contains, (, JSType, type, ), {, for]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, contains, (, JSType, type, ), {, for]
[., isObject, (, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, contains, (, JSType]
[;, }, }, return, true, ;, }, public, boolean, contains, (, JSType, type, ), {, for, (, JSType, alt, :]
[;, }, public, boolean, contains, (, JSType, type, ), {, for, (, JSType, alt, :, alternates, ), {, if, (]
[), {, if, (, alt, ., isEquivalentTo, (, type, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder]
[., isEquivalentTo, (, type, ), ), {, return, true, ;, }, }, return, false, ;, }, public, JSType, getRestrictedUnion, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {]
[;, }, }, return, false, ;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder]
[;, }, public, JSType, getRestrictedUnion, (, JSType, type, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, ), ;, for]
[;, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType]
[), ;, for, (, JSType, t, :, alternates, ), {, if, (, t, ., isUnknownType, (, ), ||, t, .]
[), {, if, (, t, ., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype]
[), {, restricted, ., addAlternate, (, t, ), ;, }, }, return, restricted, ., build, (, ), ;, }, @]
[||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return]
[||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (]
[., isUnknownType, (, ), ||, t, ., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {]
[||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return]
[., isNoResolvedType, (, ), ||, !, t, ., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, )]
[), {, restricted, ., addAlternate, (, t, ), ;, }, }, return, restricted, ., build, (, ), ;, }, @]
[), {, restricted, ., addAlternate, (, t, ), ;, }, }, return, restricted, ., build, (, ), ;, }, @]
[., isSubtype, (, type, ), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return, restricted, ., build]
[), ), {, restricted, ., addAlternate, (, t, ), ;, }, }, return, restricted, ., build, (, ), ;, }]
[;, }, }, return, restricted, ., build, (, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {]
[., addAlternate, (, t, ), ;, }, }, return, restricted, ., build, (, ), ;, }, @, Override, String, toStringHelper]
[), ;, }, }, return, restricted, ., build, (, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, )]
[;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean]
[., build, (, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, StringBuilder, result, =, new, StringBuilder]
[;, boolean, firstAlternate, =, true, ;, result, ., append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new]
[;, result, ., append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (]
[;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, ), ;, sorted, ., addAll, (]
[., append, (, "(", ), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, )]
[), ;, SortedSet, <, JSType, >, sorted, =, new, TreeSet, <, JSType, >, (, ALPHA, ), ;, sorted, ., addAll]
[;, sorted, ., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate]
[), ;, sorted, ., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !]
[;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|"]
[., addAll, (, alternates, ), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {]
[), ;, for, (, JSType, t, :, sorted, ), {, if, (, !, firstAlternate, ), {, result, ., append, (]
[), {, if, (, !, firstAlternate, ), {, result, ., append, (, "|", ), ;, }, result, ., append, (]
[), {, result, ., append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, )]
[), {, result, ., append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, )]
[;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result]
[., append, (, "|", ), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate]
[), ;, }, result, ., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }]
[;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return, result, ., toString, (, ), ;]
[., append, (, t, ., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result, ., append, (]
[), ;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return, result, ., toString, (, )]
[., toStringHelper, (, forAnnotations, ), ), ;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return]
[), ), ;, firstAlternate, =, false, ;, }, result, ., append, (, ")", ), ;, return, result, ., toString, (]
[=, false, ;, }, result, ., append, (, ")", ), ;, return, result, ., toString, (, ), ;, }, @]
[;, }, result, ., append, (, ")", ), ;, return, result, ., toString, (, ), ;, }, @, Override, public]
[;, return, result, ., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if]
[., append, (, ")", ), ;, return, result, ., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (]
[), ;, return, result, ., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {]
[;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, that, ., isUnknownType, (, ), )]
[., toString, (, ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, that, .]
[), {, return, true, ;, }, if, (, that, ., isAllType, (, ), ), {, return, true, ;, }, for]
[., isUnknownType, (, ), ), {, return, true, ;, }, if, (, that, ., isAllType, (, ), ), {, return]
[;, }, if, (, that, ., isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :]
[), {, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (, !, element, ., isSubtype]
[., isAllType, (, ), ), {, return, true, ;, }, for, (, JSType, element, :, alternates, ), {, if, (]
[;, }, for, (, JSType, element, :, alternates, ), {, if, (, !, element, ., isSubtype, (, that, ), )]
[), {, if, (, !, element, ., isSubtype, (, that, ), ), {, return, false, ;, }, }, return, true]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, )]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, )]
[., isSubtype, (, that, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType]
[), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome]
[;, }, }, return, true, ;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, UnionTypeBuilder, restricted, =]
[;, }, @, Override, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, UnionTypeBuilder, restricted, =, new, UnionTypeBuilder, (, registry, )]
[;, for, (, JSType, element, :, alternates, ), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), )]
[), ;, for, (, JSType, element, :, alternates, ), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, )]
[), {, restricted, ., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, restricted, ., build, (]
[;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals]
[., addAlternate, (, element, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, restricted, ., build, (, ), ;, }]
[), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet]
[., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet]
[), ), ;, }, return, restricted, ., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {]
[;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY, ;, for, (, JSType]
[., build, (, ), ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, BooleanLiteralSet, literals, =, BooleanLiteralSet, ., EMPTY]
[;, for, (, JSType, element, :, alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, )]
[., EMPTY, ;, for, (, JSType, element, :, alternates, ), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes]
[), {, literals, =, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==, BooleanLiteralSet]
[=, literals, ., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, )]
[;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, ), {, break, ;, }, }, return, literals, ;, }, @, Override]
[., union, (, element, ., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, ), {, break]
[), ;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, ), {, break, ;, }, }, return, literals, ;, }, @]
[., getPossibleToBooleanOutcomes, (, ), ), ;, if, (, literals, ==, BooleanLiteralSet, ., BOTH, ), {, break, ;, }, }, return]
[), {, break, ;, }, }, return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {]
[==, BooleanLiteralSet, ., BOTH, ), {, break, ;, }, }, return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (]
[), {, break, ;, }, }, return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {]
[., BOTH, ), {, break, ;, }, }, return, literals, ;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that]
[;, }, @, Override, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, )]
[;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p]
[), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair]
[;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if]
[), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;]
[), {, TypePair, p, =, element, ., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, )]
[;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }]
[., getTypesUnderEquality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p]
[), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, .]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;]
[., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, .]
[), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, )]
[., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, .]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[!=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted]
[., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), ), ;]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), )]
[., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (]
[;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, )]
[,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder]
[., build, (, ), ,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType]
[), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry]
[., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =]
[;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p]
[), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair]
[;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if]
[), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;]
[), {, TypePair, p, =, element, ., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, )]
[;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }]
[., getTypesUnderInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p]
[), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, .]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;]
[., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, .]
[), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, )]
[., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, .]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[!=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted]
[., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), ), ;]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), )]
[., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (]
[;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry, )]
[,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder]
[., build, (, ), ,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType]
[), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =, new, UnionTypeBuilder, (, registry]
[., build, (, ), ), ;, }, @, Override, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, UnionTypeBuilder, thisRestricted, =]
[;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p]
[), ;, UnionTypeBuilder, thatRestricted, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, JSType, element, :, alternates, ), {, TypePair]
[;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if]
[), ;, for, (, JSType, element, :, alternates, ), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;]
[), {, TypePair, p, =, element, ., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, )]
[;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }]
[., getTypesUnderShallowInequality, (, that, ), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p]
[), ;, if, (, p, ., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[!=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=]
[., typeA, !=, null, ), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, .]
[), {, thisRestricted, ., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, )]
[;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;]
[., addAlternate, (, p, ., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, .]
[), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, )]
[., typeA, ), ;, }, if, (, p, ., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, .]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[!=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted]
[., typeB, !=, null, ), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair]
[), {, thatRestricted, ., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build]
[;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), ), ;]
[., addAlternate, (, p, ., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,]
[), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (, ), )]
[., typeB, ), ;, }, }, return, new, TypePair, (, thisRestricted, ., build, (, ), ,, thatRestricted, ., build, (]
[;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return, visitor]
[,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <]
[., build, (, ), ,, thatRestricted, ., build, (, ), ), ;, }, @, Override, public, <, T, >, T]
[), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[., build, (, ), ), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >]
[;, }, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {]
[., caseUnionType, (, this, ), ;, }, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor]
[), ;, }, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, )]
[;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this]
[., caseUnionType, (, this, ,, that, ), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType]
[,, that, ), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {]
[), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (]
[;, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =, ImmutableList, ., builder, (, ), ;]
[), ;, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =, ImmutableList, ., builder, (, )]
[;, ImmutableList, ., Builder, <, JSType, >, resolvedTypes, =, ImmutableList, ., builder, (, ), ;, for, (, JSType, alternate, :]
[;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, )]
[., builder, (, ), ;, for, (, JSType, alternate, :, alternates, ), {, JSType, newAlternate, =, alternate, ., resolve, (]
[), {, JSType, newAlternate, =, alternate, ., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate]
[;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed]
[., resolve, (, t, ,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (]
[,, scope, ), ;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }]
[), ;, changed, |=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (]
[|=, (, alternate, !=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {]
[;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =]
[), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates]
[!=, newAlternate, ), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType]
[), ;, resolvedTypes, ., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates]
[;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions]
[., add, (, alternate, ), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, .]
[), ;, }, if, (, changed, ), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;]
[), {, Collection, <, JSType, >, newAlternates, =, resolvedTypes, ., build, (, ), ;, Preconditions, ., checkState, (, newAlternates, .]
[;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;, alternates, =, newAlternates, ;]
[., build, (, ), ;, Preconditions, ., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;]
[;, alternates, =, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <]
[., checkState, (, newAlternates, ., hashCode, (, ), ==, this, ., hashcode, ), ;, alternates, =, newAlternates, ;, }, return]
[), ;, alternates, =, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List]
[==, this, ., hashcode, ), ;, alternates, =, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString]
[., hashCode, (, ), ==, this, ., hashcode, ), ;, alternates, =, newAlternates, ;, }, return, this, ;, }, @]
[), ;, alternates, =, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List]
[., hashcode, ), ;, alternates, =, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, )]
[=, newAlternates, ;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <, String, >]
[;, }, return, this, ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <, String, >, hashCodes, =]
[;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, List, <, String, >, hashCodes, =, Lists, ., newArrayList, (]
[;, for, (, JSType, a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;]
[., newArrayList, (, ), ;, for, (, JSType, a, :, alternates, ), {, hashCodes, ., add, (, a, ., toDebugHashCodeString]
[), {, hashCodes, ., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +, Joiner, ., on]
[;, }, return, "{(", +, Joiner, ., on, (, ",", ), ., join, (, hashCodes, ), +, ")}", ;, }]
[., add, (, a, ., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +, Joiner, ., on, (, ",", )]
[), ;, }, return, "{(", +, Joiner, ., on, (, ",", ), ., join, (, hashCodes, ), +, ")}", ;]
[., toDebugHashCodeString, (, ), ), ;, }, return, "{(", +, Joiner, ., on, (, ",", ), ., join, (, hashCodes]
[;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :]
[+, ")}", ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType]
[+, Joiner, ., on, (, ",", ), ., join, (, hashCodes, ), +, ")}", ;, }, @, Override, public, boolean]
[+, ")}", ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType]
[., join, (, hashCodes, ), +, ")}", ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator]
[., on, (, ",", ), ., join, (, hashCodes, ), +, ")}", ;, }, @, Override, public, boolean, setValidator, (]
[), ., join, (, hashCodes, ), +, ")}", ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >]
[), +, ")}", ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (]
[;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, for, (, JSType, a, :]
[), {, a, ., setValidator, (, validator, ), ;, }, return, true, ;, }, @, Override, public, JSType, collapseUnion, (]
[;, }, return, true, ;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType, currentValue, =, null, ;, ObjectType]
[., setValidator, (, validator, ), ;, }, return, true, ;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType]
[), ;, }, return, true, ;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType, currentValue, =, null, ;]
[;, }, @, Override, public, JSType, collapseUnion, (, ), {, JSType, currentValue, =, null, ;, ObjectType, currentCommonSuper, =, null, ;]
[;, ObjectType, currentCommonSuper, =, null, ;, for, (, JSType, a, :, alternates, ), {, if, (, a, ., isUnknownType, (]
[;, for, (, JSType, a, :, alternates, ), {, if, (, a, ., isUnknownType, (, ), ), {, return, getNativeType]
[), {, if, (, a, ., isUnknownType, (, ), ), {, return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[), {, return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;]
[., isUnknownType, (, ), ), {, return, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, .]
[;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (]
[), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if]
[., UNKNOWN_TYPE, ), ;, }, ObjectType, obj, =, a, ., toObjectType, (, ), ;, if, (, obj, ==, null, )]
[;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue]
[., toObjectType, (, ), ;, if, (, obj, ==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==]
[), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {]
[==, null, ), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }]
[), {, if, (, currentValue, ==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {]
[), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else]
[&&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, )]
[==, null, &&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, .]
[&&, currentCommonSuper, ==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, )]
[), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else]
[==, null, ), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }]
[), {, currentValue, =, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else]
[=, a, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue]
[;, }, else, {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=, null]
[;, }, }, else, if, (, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }]
[), ;, }, }, else, if, (, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;]
[., ALL_TYPE, ), ;, }, }, else, if, (, currentValue, !=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE]
[), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper]
[!=, null, ), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, )]
[), {, return, getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper]
[;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry]
[), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =]
[., ALL_TYPE, ), ;, }, else, if, (, currentCommonSuper, ==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {]
[), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;]
[==, null, ), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj]
[), {, currentCommonSuper, =, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;]
[=, obj, ;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;, }, }, return]
[;, }, else, {, currentCommonSuper, =, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;, }, }, return, currentCommonSuper, ;]
[=, registry, ., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;, }, }, return, currentCommonSuper, ;, }, @, Override, public, void]
[;, }, }, return, currentCommonSuper, ;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType]
[., findCommonSuperObject, (, currentCommonSuper, ,, obj, ), ;, }, }, return, currentCommonSuper, ;, }, @, Override, public, void, matchConstraint, (]
[,, obj, ), ;, }, }, return, currentCommonSuper, ;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {]
[), ;, }, }, return, currentCommonSuper, ;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (]
[;, }, @, Override, public, void, matchConstraint, (, JSType, constraint, ), {, for, (, JSType, alternate, :, alternates, ), {]
[), {, alternate, ., matchConstraint, (, constraint, ), ;, }, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for]
[;, }, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate, :, alternates, ), {, if]
[., matchConstraint, (, constraint, ), ;, }, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate]
[), ;, }, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, for, (, JSType, alternate, :, alternates, ), {]
[), {, if, (, alternate, ., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
