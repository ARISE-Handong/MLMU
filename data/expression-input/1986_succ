[;, private, final, AbstractCompiler, compiler, ;, private, final, Supplier, <, String, >, safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier]
[=, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[., safeNameIdSupplier, =, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback]
[;, callback, ., process, (, externs, ,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set]
[,, new, InliningBehavior, (, ), ), ;, callback, ., process, (, externs, ,, root, ), ;, }, private, class, InliningBehavior]
[), ;, callback, ., process, (, externs, ,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final]
[;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =, Sets, ., newHashSet, (]
[., process, (, externs, ,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var]
[,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =, Sets]
[), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =, Sets, ., newHashSet]
[;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >]
[., newHashSet, (, ), ;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, ), {, Var, v, =, it, ., next, (, ), ;, if, (, isVarInlineForbidden, (, v, ), ), {]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, if, (, isVarInlineForbidden, (]
[;, if, (, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v]
[., next, (, ), ;, if, (, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap]
[), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (, referenceInfo]
[), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (]
[;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration]
[., getReferences, (, v, ), ;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (]
[), ;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference]
[), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, )]
[), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0]
[., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get]
[;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (]
[., add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init]
[), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference]
[;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration, ,, init, ,, referenceInfo, )]
[., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration]
[., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v]
[), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration, ,, init, ,, referenceInfo]
[;, splitObject, (, v, ,, declaration, ,, init, ,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node]
[., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration, ,, init, ,, referenceInfo, ), ;, }, }, }, private]
[;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {, NodeUtil, ., visitPreOrder, (]
[,, declaration, ,, init, ,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope]
[,, init, ,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, )]
[,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {, NodeUtil]
[), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {, NodeUtil, ., visitPreOrder]
[;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||, var, ., isExtern]
[., visitPreOrder, (, root, ,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (]
[), {, staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }]
[., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), )]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }, ,, NodeUtil]
[), ;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {]
[., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;]
[), ), ;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, )]
[., getString, (, ), ), ), ;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden]
[), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||, var, .]
[., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||]
[;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =, false, ;, Set, <]
[||, staleVars, ., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {]
[||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, .]
[||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }]
[., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars]
[., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, .]
[), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;]
[., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var]
[||, staleVars, ., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {]
[., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (]
[., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, boolean]
[), ||, staleVars, ., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, )]
[., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >]
[;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =, false, ;, Set, <]
[., contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret]
[), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =, false, ;, Set]
[;, Set, <, String, >, validProperties, =, Sets, ., newHashSet, (, ), ;, for, (, Reference, ref, :, refs, )]
[;, for, (, Reference, ref, :, refs, ), {, Node, name, =, ref, ., getNode, (, ), ;, Node, parent]
[., newHashSet, (, ), ;, for, (, Reference, ref, :, refs, ), {, Node, name, =, ref, ., getNode, (]
[), {, Node, name, =, ref, ., getNode, (, ), ;, Node, parent, =, ref, ., getParent, (, ), ;]
[;, Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if]
[., getNode, (, ), ;, Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =, ref, ., getGrandparent]
[;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions]
[., getParent, (, ), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (]
[;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==]
[., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, .]
[), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall]
[., isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if]
[;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, false]
[., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&]
[), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return]
[==, name, ), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, )]
[., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (]
[), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return]
[), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String]
[&&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, false, ;, }, if, (, gramps, ., isDelProp, (]
[., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, false, ;, }, if, (]
[), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String]
[==, parent, ), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;]
[., getFirstChild, (, ), ==, parent, ), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), )]
[), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String]
[;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String, propName, =, parent, .]
[), {, return, false, ;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if]
[., isDelProp, (, ), ), {, return, false, ;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString]
[;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !, validProperties, .]
[;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,]
[., getString, (, ), ;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, .]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, !, validProperties, ., contains, (, propName, ), ), {]
[), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (, propName, )]
[), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (, propName, )]
[., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties]
[), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (, propName]
[), {, validProperties, ., add, (, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;, }]
[., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (, propName, ), ;, }, else, {, return]
[,, gramps, ), ), {, validProperties, ., add, (, propName, ), ;, }, else, {, return, false, ;, }, }]
[), ), {, validProperties, ., add, (, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;]
[;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, ), )]
[., add, (, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (, !]
[), ;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, )]
[;, }, }, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, ), ), {, return, false, ;, }, Node]
[), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null]
[), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null]
[), ), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==]
[;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null, ), {, continue, ;]
[;, if, (, val, ==, null, ), {, continue, ;, }, if, (, !, val, ., isObjectLit, (, ), )]
[., getAssignedValue, (, ), ;, if, (, val, ==, null, ), {, continue, ;, }, if, (, !, val, .]
[), {, continue, ;, }, if, (, !, val, ., isObjectLit, (, ), ), {, return, false, ;, }, for]
[==, null, ), {, continue, ;, }, if, (, !, val, ., isObjectLit, (, ), ), {, return, false, ;]
[), {, continue, ;, }, if, (, !, val, ., isObjectLit, (, ), ), {, return, false, ;, }, for]
[), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null]
[), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null]
[., isObjectLit, (, ), ), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, )]
[;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||, child, .]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||, child, .]
[=, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (]
[), {, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;]
[., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), )]
[), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (, ), ), ;, Node, childVal, =]
[||, child, ., isSetterDef, (, ), ), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (]
[., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;, }, validProperties, ., add, (]
[), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (, ), ), ;, Node, childVal, =]
[., isSetterDef, (, ), ), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (, ), )]
[;, }, validProperties, ., add, (, child, ., getString, (, ), ), ;, Node, childVal, =, child, ., getFirstChild, (]
[;, Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :, refs, ), {, Node, refNode]
[., add, (, child, ., getString, (, ), ), ;, Node, childVal, =, child, ., getFirstChild, (, ), ;, for]
[), ;, Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :, refs, ), {, Node]
[., getString, (, ), ), ;, Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :]
[;, for, (, Reference, t, :, refs, ), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (]
[., getFirstChild, (, ), ;, for, (, Reference, t, :, refs, ), {, Node, refNode, =, t, ., getParent, (]
[), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, )]
[;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return]
[., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==]
[), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, )]
[), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, )]
[., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =]
[), ), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (]
[), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret, =, true]
[==, childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret]
[), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret, =, true]
[;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret, =, true, ;, }, return, ret]
[=, refNode, ., getParent, (, ), ;, }, }, }, ret, =, true, ;, }, return, ret, ;, }, private]
[;, }, }, }, ret, =, true, ;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, )]
[., getParent, (, ), ;, }, }, }, ret, =, true, ;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs]
[=, true, ;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n]
[;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n, ., getParent]
[;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[;, return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, )]
[., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent]
[;, }, private, Map, <, String, ,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map, <]
[||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (]
[., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[;, }, private, Map, <, String, ,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map, <]
[), ;, }, private, Map, <, String, ,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map]
[&&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;, }, private, Map, <, String, ,, String, >]
[&&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult]
[&&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;, }, private, Map, <, String, ,, String, >]
[==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;, }, private, Map, <, String, ,]
[., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;, }, private]
[&&, parent, ., getParent, (, ), ., isExprResult, (, ), ), ;, }, private, Map, <, String, ,, String, >]
[), ;, }, private, Map, <, String, ,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map]
[., isExprResult, (, ), ), ;, }, private, Map, <, String, ,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection]
[., getParent, (, ), ., isExprResult, (, ), ), ;, }, private, Map, <, String, ,, String, >, computeVarList, (]
[;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, ref, ., isLvalue, (, ), ||, ref]
[., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, ref, ., isLvalue]
[), {, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =]
[., references, ), {, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node]
[), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {, Preconditions, .]
[||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val]
[., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, )]
[), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {, Preconditions, .]
[., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null]
[;, if, (, val, !=, null, ), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for]
[., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {, Preconditions, ., checkState, (, val, ., isObjectLit, (]
[), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, .]
[!=, null, ), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =]
[), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, .]
[;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, )]
[), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, String, varname]
[;, child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, )]
[;, child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if]
[=, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if, (, varmap]
[), {, String, varname, =, child, ., getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), )]
[., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if, (, varmap, ., containsKey]
[;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname]
[., getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier]
[), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, )]
[;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (, ref, ., getParent, (]
[+, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }]
[+, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }]
[+, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else]
[;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (, ref, ., getParent, (]
[., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (]
[;, }, }, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, }, else]
[., put, (, varname, ,, var, ), ;, }, }, }, else, if, (, ref, ., getParent, (, ), .]
[,, var, ), ;, }, }, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), )]
[), ;, }, }, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, }]
[), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, .]
[., isVar, (, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, .]
[., getParent, (, ), ., isVar, (, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (]
[;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =, getprop, ., getLastChild, (, )]
[., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =, getprop]
[;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if, (, varmap, ., containsKey, (]
[., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =, getprop, ., getLastChild, (, ), ., getString]
[), ;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if, (, varmap, ., containsKey]
[., isGetProp, (, ), ), ;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if]
[;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname]
[., getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier]
[), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, )]
[;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (]
[+, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return, varmap]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }]
[+, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;]
[+, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }]
[+, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return, varmap]
[;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (]
[., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return, varmap, ;, }]
[;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String, ,, Node, >]
[., put, (, varname, ,, var, ), ;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (, Reference, init]
[,, var, ), ;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String]
[), ;, }, }, return, varmap, ;, }, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String, ,, Node]
[;, }, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String, ,, Node, >, initvals, ), {, Node, object]
[;, Preconditions, ., checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild]
[., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key]
[;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, )]
[), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, .]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, initvals, .]
[;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (]
[;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,]
[=, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,, key, .]
[), {, initvals, ., put, (, key, ., getString, (, ), ,, key, ., removeFirstChild, (, ), ), ;, }]
[., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,, key, ., removeFirstChild, (]
[;, }, }, private, void, replaceAssignmentExpression, (, Var, v, ,, Reference, ref, ,, Map, <, String, ,, String, >, varmap]
[., put, (, key, ., getString, (, ), ,, key, ., removeFirstChild, (, ), ), ;, }, }, private, void]
[,, key, ., removeFirstChild, (, ), ), ;, }, }, private, void, replaceAssignmentExpression, (, Var, v, ,, Reference, ref, ,]
[., getString, (, ), ,, key, ., removeFirstChild, (, ), ), ;, }, }, private, void, replaceAssignmentExpression, (, Var, v]
[), ;, }, }, private, void, replaceAssignmentExpression, (, Var, v, ,, Reference, ref, ,, Map, <, String, ,, String, >]
[., removeFirstChild, (, ), ), ;, }, }, private, void, replaceAssignmentExpression, (, Var, v, ,, Reference, ref, ,, Map, <]
[;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, Preconditions]
[., newArrayList, (, ), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, .]
[;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), )]
[., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, Preconditions, ., checkState, (, val, .]
[;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets, .]
[,, v, ., scope, ), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String]
[), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets]
[., scope, ), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all]
[;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (]
[., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (]
[), ;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for]
[., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (, varmap, ., keySet, (]
[;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, )]
[), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[., keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, var, =, key, ., getString]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, var]
[;, key, =, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, )]
[;, key, =, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node]
[=, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node, value, =]
[), {, String, var, =, key, ., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;]
[., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node, value, =, key, .]
[;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (, IR, .]
[., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, .]
[;, nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), )]
[., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get]
[;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add]
[., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value]
[), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes, .]
[., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, ), ), ;, all]
[,, value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, )]
[., name, (, varmap, ., get, (, var, ), ), ,, value, ), ), ;, all, ., remove, (, var]
[), ,, value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all]
[., get, (, var, ), ), ,, value, ), ), ;, all, ., remove, (, var, ), ;, }, for]
[), ), ,, value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :]
[), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes]
[;, }, for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (, IR, .]
[., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (, IR]
[), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (, IR]
[), {, nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, )]
[;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (]
[., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil]
[), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR, ., trueNode]
[., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null]
[,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (]
[., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;]
[), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty]
[., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;]
[), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, .]
[), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR, .]
[., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), )]
[), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR]
[), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode]
[., isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add]
[=, IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), )]
[;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse]
[., trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes]
[;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (, Token, ., COMMA, ), ;]
[., add, (, IR, ., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement]
[), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (, Token, ., COMMA, )]
[., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (]
[=, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur]
[;, replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for]
[., reverse, (, nodes, ), ;, replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement]
[), ;, replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;]
[=, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i]
[;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, ., size]
[), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, .]
[., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <]
[;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;]
[=, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront]
[;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (, nodes]
[;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =]
[<, nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get]
[;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =]
[-, 2, ;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node]
[., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i]
[;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =]
[), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (]
[++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node]
[;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur]
[., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (, Token, ., COMMA]
[), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;]
[., get, (, i, ), ), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, .]
[), ), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, )]
[;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get]
[), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, .]
[., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (]
[;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, .]
[., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i]
[), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur]
[=, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (]
[;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, .]
[;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =, ref]
[., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, ., get, (, i]
[), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =]
[., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), )]
[), ), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace]
[;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (]
[., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =, ref, ., getParent]
[), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if]
[., get, (, i, +, 1, ), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement]
[), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;]
[+, 1, ), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace]
[), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;]
[;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent]
[., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), )]
[;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,]
[., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, )]
[), ;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace]
[), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;]
[., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (]
[;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, replacement, ), ;, }, }, private]
[., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, replace, ., getParent, (]
[., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {]
[,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (]
[), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, replacement, ), ;, }, }]
[., newExpr, (, replacement, ), ), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,]
[), ), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, replacement, ), ;, }]
[;, }, }, private, void, splitObject, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, ReferenceCollection, referenceInfo, ), {]
[., replaceChild, (, replace, ,, replacement, ), ;, }, }, private, void, splitObject, (, Var, v, ,, Reference, declaration, ,]
[., getParent, (, ), ., replaceChild, (, replace, ,, replacement, ), ;, }, }, private, void, splitObject, (, Var, v]
[,, replacement, ), ;, }, }, private, void, splitObject, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, ReferenceCollection]
[), ;, }, }, private, void, splitObject, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, ReferenceCollection, referenceInfo, )]
[;, Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined]
[,, referenceInfo, ), ;, Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode]
[), ;, Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean]
[;, Node, vnode, ;, boolean, defined, =, referenceInfo, ., isWellDefined, (, ), &&, init, ., getParent, (, ), ., isVar]
[., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =, referenceInfo, ., isWellDefined, (, ), &&, init, ., getParent]
[;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, )]
[&&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {, vnode, =, init, .]
[., isWellDefined, (, ), &&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {]
[;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, )]
[., isVar, (, ), ;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (]
[., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {, vnode, =, init, ., getParent, (]
[), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {]
[=, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =, v]
[;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =, v, ., getScope, (, ), ., getRootNode]
[., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =, v, ., getScope]
[;, }, else, {, vnode, =, v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, ), .]
[,, initvals, ), ;, }, else, {, vnode, =, v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild]
[), ;, }, else, {, vnode, =, v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, )]
[=, v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, }]
[;, }, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, varmap, ., entrySet, (, ), )]
[., getFirstChild, (, ), ;, }, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, varmap, .]
[., getLastChild, (, ), ., getFirstChild, (, ), ;, }, for, (, Map, ., Entry, <, String, ,, String, >]
[., getRootNode, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, }, for, (, Map, ., Entry, <]
[., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, }, for, (]
[), {, Node, val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =, NodeUtil]
[., entrySet, (, ), ), {, Node, val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;]
[;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (, val]
[., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue]
[), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (]
[., getKey, (, ), ), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val]
[;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (]
[., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (, val, ==, null, ), {, varnode]
[,, val, ), ;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else]
[., getValue, (, ), ,, val, ), ;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode]
[), ;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree]
[), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, )]
[==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, .]
[), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, )]
[;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }, vnode, ., getParent, (, ), .]
[., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }, vnode]
[), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }, vnode, ., getParent, (, )]
[;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, )]
[,, v, ., scope, ), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;]
[), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined]
[., scope, ), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if]
[;, }, if, (, defined, ), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, ), ;, }, for]
[., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, ), {, vnode, ., getParent, (, ), .]
[., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, ), {, vnode, .]
[,, vnode, ), ;, }, if, (, defined, ), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, )]
[), ;, }, if, (, defined, ), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, ), ;, }]
[), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo]
[;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&, ref, ==, init, )]
[., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined]
[., getParent, (, ), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, )]
[), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&, ref, ==, init]
[), {, if, (, defined, &&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), )]
[., references, ), {, if, (, defined, &&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (]
[), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, )]
[&&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,]
[), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, )]
[==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,]
[), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, )]
[), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, )]
[., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, ), ;, }, else, if, (, ref]
[;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, ref, ., getGrandparent, (]
[,, ref, ,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), )]
[,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, ref]
[), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, ref, ., getGrandparent]
[), {, ref, ., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), ), ;, }, else, {]
[., isVar, (, ), ), {, ref, ., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), )]
[., getParent, (, ), ., isVar, (, ), ), {, ref, ., getGrandparent, (, ), ., removeChild, (, ref, .]
[;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp]
[., removeChild, (, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (]
[., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =]
[), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, .]
[., getParent, (, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (, 1]
[., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =, getprop]
[;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (, varmap]
[., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), .]
[), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;]
[;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (]
[., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =]
[., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, )]
[), ., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement]
[;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (]
[., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (, varmap, .]
[), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom]
[., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, )]
[), ), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, .]
[;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (]
[., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, .]
[), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent]
[., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), .]
[), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, .]
[;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }, }]
[., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }]
[;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;]
[., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }, }, compiler, .]
[,, replacement, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., getParent, (, ), ,, replacement, ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[;, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }]
