[;, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, ), {, if, (]
[?, null, :, cs, ., subSequence, (, start, ,, cs, ., length, (, ), ), ;, }, static, int, indexOf]
[==, null, ?, null, :, cs, ., subSequence, (, start, ,, cs, ., length, (, ), ), ;, }, static]
[?, null, :, cs, ., subSequence, (, start, ,, cs, ., length, (, ), ), ;, }, static, int, indexOf]
[:, cs, ., subSequence, (, start, ,, cs, ., length, (, ), ), ;, }, static, int, indexOf, (, final]
[;, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, ), {, if, (]
[., subSequence, (, start, ,, cs, ., length, (, ), ), ;, }, static, int, indexOf, (, final, CharSequence, cs]
[,, cs, ., length, (, ), ), ;, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, int, searchChar]
[), ;, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, ), {, if]
[., length, (, ), ), ;, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int]
[), {, return, (, (, String, ), cs, ), ., indexOf, (, searchChar, ,, start, ), ;, }, else, {]
[instanceof, String, ), {, return, (, (, String, ), cs, ), ., indexOf, (, searchChar, ,, start, ), ;, }]
[;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start, <, 0, )]
[., indexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, )]
[), ., indexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (]
[), ., indexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (]
[,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start]
[), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start, <, 0]
[;, if, (, start, <, 0, ), {, start, =, 0, ;, }, for, (, int, i, =, start, ;]
[., length, (, ), ;, if, (, start, <, 0, ), {, start, =, 0, ;, }, for, (, int]
[), {, start, =, 0, ;, }, for, (, int, i, =, start, ;, i, <, sz, ;, i, ++]
[<, 0, ), {, start, =, 0, ;, }, for, (, int, i, =, start, ;, i, <, sz, ;]
[), {, start, =, 0, ;, }, for, (, int, i, =, start, ;, i, <, sz, ;, i, ++]
[=, 0, ;, }, for, (, int, i, =, start, ;, i, <, sz, ;, i, ++, ), {, if]
[;, }, for, (, int, i, =, start, ;, i, <, sz, ;, i, ++, ), {, if, (, cs]
[;, i, <, sz, ;, i, ++, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, )]
[;, i, ++, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;]
[<, sz, ;, i, ++, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return]
[;, i, ++, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;]
[), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }, return]
[++, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }]
[), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, indexOf, (, final, CharSequence, cs]
[==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, indexOf, (, final]
[., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }]
[), ==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, indexOf, (]
[), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, indexOf, (, final, CharSequence, cs]
[;, }, }, return, -, 1, ;, }, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar]
[;, }, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar, ,, final, int, start, ), {]
[;, }, }, static, int, indexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar, ,, final, int, start, ), {]
[;, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, ), {, if, (]
[., indexOf, (, searchChar, ., toString, (, ), ,, start, ), ;, }, static, int, lastIndexOf, (, final, CharSequence, cs]
[., toString, (, ), ., indexOf, (, searchChar, ., toString, (, ), ,, start, ), ;, }, static, int, lastIndexOf]
[,, start, ), ;, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, )]
[., toString, (, ), ,, start, ), ;, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, int, searchChar]
[), ;, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, int, searchChar, ,, int, start, ), {, if]
[), {, return, (, (, String, ), cs, ), ., lastIndexOf, (, searchChar, ,, start, ), ;, }, else, {]
[instanceof, String, ), {, return, (, (, String, ), cs, ), ., lastIndexOf, (, searchChar, ,, start, ), ;, }]
[;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start, <, 0, )]
[., lastIndexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, )]
[), ., lastIndexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (]
[), ., lastIndexOf, (, searchChar, ,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (]
[,, start, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start]
[), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, if, (, start, <, 0]
[;, if, (, start, <, 0, ), {, return, -, 1, ;, }, if, (, start, >=, sz, ), {]
[., length, (, ), ;, if, (, start, <, 0, ), {, return, -, 1, ;, }, if, (, start]
[), {, return, -, 1, ;, }, if, (, start, >=, sz, ), {, start, =, sz, -, 1, ;]
[<, 0, ), {, return, -, 1, ;, }, if, (, start, >=, sz, ), {, start, =, sz, -]
[), {, return, -, 1, ;, }, if, (, start, >=, sz, ), {, start, =, sz, -, 1, ;]
[;, }, if, (, start, >=, sz, ), {, start, =, sz, -, 1, ;, }, for, (, int, i]
[;, }, if, (, start, >=, sz, ), {, start, =, sz, -, 1, ;, }, for, (, int, i]
[), {, start, =, sz, -, 1, ;, }, for, (, int, i, =, start, ;, i, >=, 0, ;]
[>=, sz, ), {, start, =, sz, -, 1, ;, }, for, (, int, i, =, start, ;, i, >=]
[), {, start, =, sz, -, 1, ;, }, for, (, int, i, =, start, ;, i, >=, 0, ;]
[=, sz, -, 1, ;, }, for, (, int, i, =, start, ;, i, >=, 0, ;, --, i, )]
[;, }, for, (, int, i, =, start, ;, i, >=, 0, ;, --, i, ), {, if, (, cs]
[-, 1, ;, }, for, (, int, i, =, start, ;, i, >=, 0, ;, --, i, ), {, if]
[;, }, for, (, int, i, =, start, ;, i, >=, 0, ;, --, i, ), {, if, (, cs]
[;, i, >=, 0, ;, --, i, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, )]
[;, --, i, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;]
[>=, 0, ;, --, i, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return]
[;, --, i, ), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;]
[), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }, return]
[), {, if, (, cs, ., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }, return]
[), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, lastIndexOf, (, final, CharSequence, cs]
[==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, lastIndexOf, (, final]
[., charAt, (, i, ), ==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }]
[), ==, searchChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, lastIndexOf, (]
[), {, return, i, ;, }, }, return, -, 1, ;, }, }, static, int, lastIndexOf, (, final, CharSequence, cs]
[;, }, }, return, -, 1, ;, }, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar]
[;, }, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar, ,, final, int, start, ), {]
[;, }, }, static, int, lastIndexOf, (, final, CharSequence, cs, ,, final, CharSequence, searchChar, ,, final, int, start, ), {]
[;, }, static, char, [, ], toCharArray, (, final, CharSequence, cs, ), {, if, (, cs, instanceof, String, ), {]
[., lastIndexOf, (, searchChar, ., toString, (, ), ,, start, ), ;, }, static, char, [, ], toCharArray, (, final]
[., toString, (, ), ., lastIndexOf, (, searchChar, ., toString, (, ), ,, start, ), ;, }, static, char, []
[,, start, ), ;, }, static, char, [, ], toCharArray, (, final, CharSequence, cs, ), {, if, (, cs, instanceof]
[., toString, (, ), ,, start, ), ;, }, static, char, [, ], toCharArray, (, final, CharSequence, cs, ), {]
[), ;, }, static, char, [, ], toCharArray, (, final, CharSequence, cs, ), {, if, (, cs, instanceof, String, )]
[), {, return, (, (, String, ), cs, ), ., toCharArray, (, ), ;, }, else, {, final, int, sz]
[instanceof, String, ), {, return, (, (, String, ), cs, ), ., toCharArray, (, ), ;, }, else, {, final]
[;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, final, char, [, ], array, =]
[., toCharArray, (, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, final, char]
[), ., toCharArray, (, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, final]
[), ., toCharArray, (, ), ;, }, else, {, final, int, sz, =, cs, ., length, (, ), ;, final]
[;, final, char, [, ], array, =, new, char, [, cs, ., length, (, ), ], ;, for, (, int]
[., length, (, ), ;, final, char, [, ], array, =, new, char, [, cs, ., length, (, ), ]]
[;, for, (, int, i, =, 0, ;, i, <, sz, ;, i, ++, ), {, array, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, sz, ;, i, ++, ), {, array, [, i]
[., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, sz, ;, i, ++, )]
[;, i, <, sz, ;, i, ++, ), {, array, [, i, ], =, cs, ., charAt, (, i, )]
[;, i, ++, ), {, array, [, i, ], =, cs, ., charAt, (, i, ), ;, }, return, array]
[<, sz, ;, i, ++, ), {, array, [, i, ], =, cs, ., charAt, (, i, ), ;, }]
[;, i, ++, ), {, array, [, i, ], =, cs, ., charAt, (, i, ), ;, }, return, array]
[), {, array, [, i, ], =, cs, ., charAt, (, i, ), ;, }, return, array, ;, }, }]
[++, ), {, array, [, i, ], =, cs, ., charAt, (, i, ), ;, }, return, array, ;, }]
[=, cs, ., charAt, (, i, ), ;, }, return, array, ;, }, }, static, boolean, regionMatches, (, final, CharSequence]
[[, i, ], =, cs, ., charAt, (, i, ), ;, }, return, array, ;, }, }, static, boolean, regionMatches]
[], =, cs, ., charAt, (, i, ), ;, }, return, array, ;, }, }, static, boolean, regionMatches, (, final]
[;, }, return, array, ;, }, }, static, boolean, regionMatches, (, final, CharSequence, cs, ,, final, boolean, ignoreCase, ,, final]
[., charAt, (, i, ), ;, }, return, array, ;, }, }, static, boolean, regionMatches, (, final, CharSequence, cs, ,]
[), ;, }, return, array, ;, }, }, static, boolean, regionMatches, (, final, CharSequence, cs, ,, final, boolean, ignoreCase, ,]
[;, }, }, static, boolean, regionMatches, (, final, CharSequence, cs, ,, final, boolean, ignoreCase, ,, final, int, thisStart, ,, final]
[), {, return, (, (, String, ), cs, ), ., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String, ), substring]
[&&, substring, instanceof, String, ), {, return, (, (, String, ), cs, ), ., regionMatches, (, ignoreCase, ,, thisStart, ,]
[instanceof, String, &&, substring, instanceof, String, ), {, return, (, (, String, ), cs, ), ., regionMatches, (, ignoreCase, ,]
[), {, return, (, (, String, ), cs, ), ., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String, ), substring]
[instanceof, String, ), {, return, (, (, String, ), cs, ), ., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String]
[;, }, else, {, int, index1, =, thisStart, ;, int, index2, =, start, ;, int, tmpLen, =, length, ;, while]
[., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String, ), substring, ,, start, ,, length, ), ;, }, else, {]
[), ., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String, ), substring, ,, start, ,, length, ), ;, }, else]
[), ., regionMatches, (, ignoreCase, ,, thisStart, ,, (, String, ), substring, ,, start, ,, length, ), ;, }, else]
[,, thisStart, ,, (, String, ), substring, ,, start, ,, length, ), ;, }, else, {, int, index1, =, thisStart]
[,, (, String, ), substring, ,, start, ,, length, ), ;, }, else, {, int, index1, =, thisStart, ;, int]
[,, start, ,, length, ), ;, }, else, {, int, index1, =, thisStart, ;, int, index2, =, start, ;, int]
[,, start, ,, length, ), ;, }, else, {, int, index1, =, thisStart, ;, int, index2, =, start, ;, int]
[,, length, ), ;, }, else, {, int, index1, =, thisStart, ;, int, index2, =, start, ;, int, tmpLen, =]
[), ;, }, else, {, int, index1, =, thisStart, ;, int, index2, =, start, ;, int, tmpLen, =, length, ;]
[;, int, index2, =, start, ;, int, tmpLen, =, length, ;, while, (, tmpLen, --, >, 0, ), {, char]
[;, int, tmpLen, =, length, ;, while, (, tmpLen, --, >, 0, ), {, char, c1, =, cs, ., charAt]
[;, while, (, tmpLen, --, >, 0, ), {, char, c1, =, cs, ., charAt, (, index1, ++, ), ;]
[), {, char, c1, =, cs, ., charAt, (, index1, ++, ), ;, char, c2, =, substring, ., charAt, (]
[>, 0, ), {, char, c1, =, cs, ., charAt, (, index1, ++, ), ;, char, c2, =, substring, .]
[--, >, 0, ), {, char, c1, =, cs, ., charAt, (, index1, ++, ), ;, char, c2, =, substring]
[), {, char, c1, =, cs, ., charAt, (, index1, ++, ), ;, char, c2, =, substring, ., charAt, (]
[;, char, c2, =, substring, ., charAt, (, index2, ++, ), ;, if, (, c1, ==, c2, ), {, continue]
[., charAt, (, index1, ++, ), ;, char, c2, =, substring, ., charAt, (, index2, ++, ), ;, if, (]
[), ;, char, c2, =, substring, ., charAt, (, index2, ++, ), ;, if, (, c1, ==, c2, ), {]
[++, ), ;, char, c2, =, substring, ., charAt, (, index2, ++, ), ;, if, (, c1, ==, c2, )]
[;, if, (, c1, ==, c2, ), {, continue, ;, }, if, (, !, ignoreCase, ), {, return, false, ;]
[., charAt, (, index2, ++, ), ;, if, (, c1, ==, c2, ), {, continue, ;, }, if, (, !]
[), ;, if, (, c1, ==, c2, ), {, continue, ;, }, if, (, !, ignoreCase, ), {, return, false]
[++, ), ;, if, (, c1, ==, c2, ), {, continue, ;, }, if, (, !, ignoreCase, ), {, return]
[), {, continue, ;, }, if, (, !, ignoreCase, ), {, return, false, ;, }, if, (, Character, ., toUpperCase]
[==, c2, ), {, continue, ;, }, if, (, !, ignoreCase, ), {, return, false, ;, }, if, (, Character]
[), {, continue, ;, }, if, (, !, ignoreCase, ), {, return, false, ;, }, if, (, Character, ., toUpperCase]
[), {, return, false, ;, }, if, (, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2]
[), {, return, false, ;, }, if, (, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2]
[;, }, if, (, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), &&, Character, .]
[), {, return, false, ;, }, }, return, true, ;, }, }, }]
[&&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;, }]
[!=, Character, ., toUpperCase, (, c2, ), &&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2]
[., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), &&, Character, ., toLowerCase, (, c1, ), !=]
[), !=, Character, ., toUpperCase, (, c2, ), &&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (]
[&&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;, }]
[., toUpperCase, (, c2, ), &&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2, ), )]
[), &&, Character, ., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, }, }]
[!=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, }, }]
[., toLowerCase, (, c1, ), !=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;, }, }, return]
[), !=, Character, ., toLowerCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, }, }]
[., toLowerCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, }, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, }, }]
[;, }, }, return, true, ;, }, }, }]
[;, }, }, }]
