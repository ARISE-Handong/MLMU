[;, private, FormatUtils, (, ), {, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size]
[., log, (, 10, ), ;, private, FormatUtils, (, ), {, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,]
[), ;, private, FormatUtils, (, ), {, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (]
[., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, )]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size]
[=, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, buf, .]
[;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, buf, ., append, (, '0']
[;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, buf, ., append, (, '0']
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -]
[>, 10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, ""]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -, (, long, )]
[--, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -, (, long]
[;, }, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }]
[., append, (, '0', ), ;, }, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE]
[), ;, }, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;]
[;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[+, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >]
[), {, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[<, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (, '0']
[), {, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, )]
[>, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, )]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (, value, +]
[--, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (, value]
[;, }, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (, value, +, '0', ), )]
[), ;, }, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if]
[;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, )]
[., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100]
[), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --]
[), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --]
[), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size]
[+, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2]
[), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size]
[), {, for, (, ;, size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[<, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {, buf, ., append, (, '0']
[), {, for, (, ;, size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +]
[>, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +]
[), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *]
[--, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, )]
[;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, .]
[., append, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >]
[), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf]
[;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (]
[>, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, .]
[), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf]
[*, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), )]
[), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', )]
[+, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +]
[), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', )]
[), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf]
[;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (]
[;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<]
[., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, )]
[), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d]
[), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[+, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, )]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else]
[., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }]
[), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }]
[), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;]
[+, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[-, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {]
[-, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (]
[+, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits]
[<<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, )]
[), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits]
[), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;]
[), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }]
[<, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4]
[), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }]
[=, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits]
[;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (]
[), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value]
[<, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log]
[), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value]
[=, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10]
[;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (]
[;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[+, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0']
[+, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0']
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (]
[/, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, .]
[., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size]
[), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf]
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (]
[;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString]
[>, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString, (, value, )]
[--, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString, (, value]
[;, }, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, appendPaddedInteger]
[., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }]
[), ;, }, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void]
[;, }, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,, int, size, ), {, int, intValue]
[., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf]
[), ;, }, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,, int, size, ), {, int]
[., toString, (, value, ), ), ;, }, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,]
[), ), ;, }, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,, int, size, ), {]
[;, if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if]
[;, if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if]
[), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19]
[), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (, Long, ., toString, (, value, )]
[,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (, Long]
[,, size, ), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (, Long, ., toString]
[), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (, Long, ., toString, (, value]
[), {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value]
[<=, 19, ), {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if]
[), {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value]
[;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, )]
[), ;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if]
[., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {, buf, ., append]
[), ), ;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (]
[., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, )]
[!=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size]
[=, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, buf, .]
[;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, buf, ., append, (, '0']
[;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, buf, ., append, (, '0']
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;]
[>, 19, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808"]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }]
[--, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;]
[;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[., append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits]
[), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, )]
[;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10]
[., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log]
[), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[+, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', )]
[+, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', )]
[), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0']
[/, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append]
[., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --]
[), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, .]
[), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0']
[;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString]
[>, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString, (, value, )]
[--, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString, (, value]
[;, }, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger]
[., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }]
[), ;, }, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void]
[;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {]
[., append, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out]
[), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws, IOException]
[., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,]
[), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (]
[., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, )]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size]
[=, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, out, .]
[;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, out, ., write, (, '0']
[;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, out, ., write, (, '0']
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -]
[>, 10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, ""]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -, (, long, )]
[--, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -, (, long]
[;, }, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }]
[., write, (, '0', ), ;, }, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE]
[), ;, }, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;]
[;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[+, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >]
[), {, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[<, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (, '0']
[), {, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value, +, '0']
[>, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value, +, '0']
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;, }]
[--, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;]
[;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {]
[., write, (, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (]
[), ;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, )]
[;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, )]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;]
[), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --]
[+, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;]
[), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --]
[), {, for, (, ;, size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[<, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {, out, ., write, (, '0']
[), {, for, (, ;, size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +]
[>, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +]
[), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *]
[--, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, )]
[;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, .]
[., write, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >]
[), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out]
[;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write]
[+, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out]
[), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3]
[;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[+, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else]
[., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;]
[), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }]
[+, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3]
[-, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int]
[-, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <]
[), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if]
[), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value]
[+, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3]
[), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[<<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {]
[), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }]
[), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }]
[<, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4]
[), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }]
[=, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits]
[;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (]
[), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value]
[<, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log]
[), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value]
[=, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10]
[;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (]
[;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[+, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0']
[+, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0']
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (]
[/, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, .]
[., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size]
[), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out]
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (]
[;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString]
[>, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString, (, value, )]
[--, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString, (, value]
[;, }, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger]
[., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }]
[), ;, }, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void]
[;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, long, value, ,, int, size, ), throws, IOException, {]
[., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out]
[), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, long, value, ,, int, size, ), throws, IOException]
[., toString, (, value, ), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, long, value, ,]
[), ), ;, }, }, public, static, void, writePaddedInteger, (, Writer, out, ,, long, value, ,, int, size, ), throws]
[;, if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if]
[;, if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if]
[), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19]
[), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[;, }, else, if, (, size, <=, 19, ), {, out, ., write, (, Long, ., toString, (, value, )]
[,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (, Long]
[,, size, ), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (, Long, ., toString]
[), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (, Long, ., toString, (, value]
[), {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value]
[<=, 19, ), {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if]
[), {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value]
[;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, )]
[), ;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if]
[., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {, out, ., write]
[), ), ;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (]
[., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, )]
[!=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19]
[), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size]
[=, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, out, .]
[;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, out, ., write, (, '0']
[;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, out, ., write, (, '0']
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;]
[>, 19, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808"]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }]
[--, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;]
[;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[., write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits]
[), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, )]
[;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10]
[., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log]
[), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[+, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', )]
[+, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', )]
[), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0']
[/, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write]
[., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --]
[), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, .]
[), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0']
[;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString]
[>, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString, (, value, )]
[--, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString, (, value]
[;, }, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger]
[., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString, (, value, ), ), ;, }]
[), ;, }, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void]
[;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <, 0]
[., write, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf]
[), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <]
[., toString, (, value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, )]
[), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, .]
[., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf]
[), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (, long, )]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +]
[), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (, long, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (]
[=, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE]
[;, }, else, {, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return]
[;, }, else, {, buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return]
[;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, ), (]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, )]
[+, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, )]
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (]
[), {, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[<, 10, ), {, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else]
[), {, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *]
[., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100]
[), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, )]
[), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, )]
[), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1]
[+, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value]
[), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1]
[), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, .]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, .]
[;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (]
[>, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, .]
[), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf]
[*, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), )]
[), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', )]
[+, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +]
[), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', )]
[), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf]
[;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (]
[;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<]
[., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, )]
[), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d]
[), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[+, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, )]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static]
[., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public]
[), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public]
[), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }]
[+, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;]
[-, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, .]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {]
[-, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, .]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer]
[+, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;]
[), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), )]
[<<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value]
[), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), )]
[), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (, value, ), ), ;, }, }]
[;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (, int]
[., append, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf]
[), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (]
[., toString, (, value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, )]
[), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =]
[;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, .]
[;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, .]
[), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (, Long, ., toString, (]
[==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (, Long, .]
[), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (, Long, ., toString, (]
[;, }, else, {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, }, public, static]
[,, intValue, ), ;, }, else, {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }]
[), ;, }, else, {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, }, public]
[;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (, value]
[., append, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out]
[), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (]
[., toString, (, value, ), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, )]
[), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, .]
[., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;]
[), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out]
[), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -, (, long, )]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +]
[), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -, (, long, )]
[., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -, (]
[=, -, value, ;, }, else, {, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE]
[;, }, else, {, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return]
[;, }, else, {, out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return]
[;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +, '0', )]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +, '0']
[+, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, )]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +, '0']
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +, '0']
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +, '0']
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value]
[), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {]
[<, 10, ), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100]
[), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {]
[;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =]
[), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, )]
[+, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +]
[), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, )]
[), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, .]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, .]
[;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write]
[+, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out]
[), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3]
[;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[+, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static]
[., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;]
[), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public]
[+, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }]
[-, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out]
[-, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString]
[), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, .]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (]
[), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, .]
[+, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }]
[), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;]
[<<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, )]
[), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;]
[), ;, }, else, {, out, ., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public]
[;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue, =]
[., write, (, Integer, ., toString, (, value, ), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out]
[), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue]
[., toString, (, value, ), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, )]
[), ), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, ), throws, IOException, {, int]
[;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, .]
[;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, .]
[), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (, Long, ., toString, (]
[==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (, Long, .]
[), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (, Long, ., toString, (]
[;, }, else, {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, }, public, static]
[,, intValue, ), ;, }, else, {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }]
[), ;, }, else, {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, }, public]
[;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {, if]
[., write, (, Long, ., toString, (, value, ), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value]
[), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {]
[., toString, (, value, ), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (]
[), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, )]
[), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +, 1, ;]
[<, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +]
[), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +, 1, ;]
[), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return]
[!=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20]
[), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return]
[., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }]
[;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <]
[+, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (]
[), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :]
[), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :]
[;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <]
[;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value]
[;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (]
[), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, ., charAt]
[?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <]
[<, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (]
[?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <]
[:, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?]
[), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, ., charAt]
[), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, .]
[?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int]
[<, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (]
[?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int]
[:, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (]
[), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, .]
[), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text]
[?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value]
[<, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log]
[?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value]
[:, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /]
[), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text]
[), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =]
[?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, )]
[<, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, )]
[:, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), )]
[), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =]
[), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value]
[+, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {]
[+, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {]
[), +, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, )]
[/, LOG_10, ), +, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int]
[., log, (, value, ), /, LOG_10, ), +, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits]
[), /, LOG_10, ), +, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,]
[), +, 1, ), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, )]
[), ), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value]
[;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (]
[-, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, .]
[., charAt, (, position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<, 1]
[), -, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text]
[;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (]
[;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +]
[-, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =]
[+, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final, String, text]
[), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final, String]
[+, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }]
[), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;]
[<<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -]
[), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;]
[), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final, String]
[), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final]
[<<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage]
[), ), +, text, ., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final]
[-, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =]
[., charAt, (, position, +, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final]
[), -, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen]
[+, 1, ), -, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {]
[), -, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen]
[;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +]
[;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text]
[+, 32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText]
[;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text]
[), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), .]
[<=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0]
[., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =, text]
[), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), .]
[+, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen]
[), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), .]
[=, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "..."]
[;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;]
[=, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=]
[;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos]
[., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"']
[., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, )]
[,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +]
[), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +]
[), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (]
[), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), )]
[<=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (]
[), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), )]
[;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;]
[+, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +]
[+, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +]
[+, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +]
[;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;]
[), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring]
[>=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText]
[), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring]
[., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \""]
[;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;]
[+, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +]
[+, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;]
[;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[;, }, }]
[+, '"', ;, }, }]
[+, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, sampleText, ., substring, (, errorPos, ), +, '"', ;, }, }]
[+, '"', ;, }, }]
[., substring, (, errorPos, ), +, '"', ;, }, }]
[), +, '"', ;, }, }]
[;, }, }]
