[., rhino, ., Token, ;, class, ControlStructureCheck, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, static, final, DiagnosticType, USE_OF_WITH, =]
[., rhino, ., Token, ;, class, ControlStructureCheck, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, static, final, DiagnosticType, USE_OF_WITH, =]
[;, class, ControlStructureCheck, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, static, final, DiagnosticType, USE_OF_WITH, =, DiagnosticType, ., warning, (]
[ControlStructureCheck, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, static, final, DiagnosticType, USE_OF_WITH, =, DiagnosticType, ., warning, (, "JSC_USE_OF_WITH", ,]
[static, final, DiagnosticType, USE_OF_WITH, =, DiagnosticType, ., warning, (, "JSC_USE_OF_WITH", ,, "The use of the 'with' structure should be avoided.", ), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {]
[static, final, DiagnosticType, USE_OF_WITH, =, DiagnosticType, ., warning, (, "JSC_USE_OF_WITH", ,, "The use of the 'with' structure should be avoided.", ), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {]
[=, DiagnosticType, ., warning, (, "JSC_USE_OF_WITH", ,, "The use of the 'with' structure should be avoided.", ), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, check, (]
[{, check, (, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[(, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, check, (]
[Node, originalRoot, ), {, check, (, scriptRoot, ), ;, }, private, void, check, (, Node, node, ), {, switch, (]
[Node, originalRoot, ), {, check, (, scriptRoot, ), ;, }, private, void, check, (, Node, node, ), {, switch, (]
[;, }, private, void, check, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[;, }, private, void, check, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., WITH, :, JSDocInfo, info, =]
[node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., WITH, :, JSDocInfo, info, =]
[), ), {, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =]
[), ), {, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =]
[), ), {, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =]
[{, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=]
[Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&]
[Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&]
[Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[boolean, allowWith, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (]
[allowWith, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !]
[!=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {]
[&&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (]
[., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (, node, ,]
[!, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =]
[!, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =]
[node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;]
[node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;]
[USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild, !=]
[for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild, !=, null, ;, ), {, Node, next, =]
[for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild, !=, null, ;, ), {, Node, next, =]
[., getFirstChild, (, ), ;, bChild, !=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;]
[(, ), ;, bChild, !=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (]
[bChild, !=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, ), ;]
[null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, ), ;, bChild, =]
[bChild, ), ;, bChild, =, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {]
[bChild, ), ;, bChild, =, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {]
[=, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (]
[=, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (]
[}, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (, JSError, ., make, (]
[n, ,, DiagnosticType, error, ), {, compiler, ., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,]
[DiagnosticType, error, ), {, compiler, ., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,]
