[;, public, LogFormat, (, ), {, this, (, 10.0, ,, "10", ,, true, ), ;, }, public, LogFormat, (, double]
[), ;, public, LogFormat, (, ), {, this, (, 10.0, ,, "10", ,, true, ), ;, }, public, LogFormat, (]
[,, "10", ,, true, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {]
[,, true, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (]
[), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (, base, ,]
[,, baseLabel, ,, "^", ,, showBase, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel]
[,, "^", ,, showBase, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean]
[,, showBase, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, )]
[), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if]
[), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base]
[), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, )]
[), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base]
[=, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =]
[., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, .]
[;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;]
[=, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =]
[., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, .]
[;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }]
[., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;]
[), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;]
[., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =]
[=, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (]
[., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat]
[;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {]
[=, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, )]
[., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (]
[;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, ), this, .]
[=, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, ), this, ., formatter, ., clone, (]
[., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, ), this, ., formatter, .]
[;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;]
[;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException]
[., clone, (, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, )]
[., formatter, ., clone, (, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==]
[), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private]
[), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog]
[;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, .]
[), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math]
[=, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value]
[;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /, this, .]
[;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new]
[/, this, ., baseLog, ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {]
[., log, (, value, ), /, this, ., baseLog, ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo]
[), /, this, ., baseLog, ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, )]
[;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new]
[., baseLog, ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result]
[;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append]
[), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;]
[., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel]
[;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, ., format]
[., append, (, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, .]
[), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, .]
[., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, .]
[;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return]
[., append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog]
[), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;]
[., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), )]
[;, return, result, ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer]
[., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }]
[), ;, return, result, ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {]
[., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }, public, StringBuffer, format, (, long, number]
[., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }, public, StringBuffer, format, (]
[), ), ;, return, result, ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, )]
[), ), ), ;, return, result, ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos]
[;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new]
[;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append]
[), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result]
[., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;]
[;, result, ., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog]
[., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result, ., append, (]
[), ;, result, ., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, ., format, (]
[., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, .]
[;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return]
[., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number]
[), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;]
[;, return, result, ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return, null, ;, }]
[., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }]
[), ;, return, result, ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return, null, ;]
[., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }, public, Number, parse, (, String, source]
[., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return, result, ;, }, public, Number, parse, (]
[), ), ;, return, result, ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return, null]
[), ), ), ;, return, result, ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return]
[;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return, null, ;, }, public, boolean, equals]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (]
[), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=]
[), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=]
[), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base]
[instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this]
[;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=, that, ., base, )]
[;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !, this]
[;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !, this]
[), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), )]
[!=, that, ., base, ), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (, that]
[., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals]
[), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), )]
[., base, ), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (, that, ., baseLabel]
[;, }, if, (, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;]
[., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog, !=, that]
[., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog]
[), ), {, return, false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false]
[., baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {]
[;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;]
[!=, that, ., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, )]
[., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;]
[., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return]
[;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), )]
[!=, that, ., showBase, ), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (, that]
[., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals]
[), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), )]
[., showBase, ), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (, that, ., formatter]
[;, }, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, )]
[., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return, super, ., equals, (]
[), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (]
[., formatter, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =]
[;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;]
[., equals, (, obj, ), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super]
[), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, )]
[;, clone, ., formatter, =, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;, return, clone, ;, }]
[;, clone, ., formatter, =, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;, return, clone, ;, }]
[., clone, (, ), ;, clone, ., formatter, =, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;]
[=, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;, return, clone, ;, }, }]
[., formatter, =, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;, return, clone, ;, }, }]
[;, return, clone, ;, }, }]
[;, return, clone, ;, }, }]
[., clone, (, ), ;, return, clone, ;, }, }]
[., formatter, ., clone, (, ), ;, return, clone, ;, }, }]
[;, }, }]
