[., time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, RemainderDateTimeField, extends, DecoratedDateTimeField, {]
[DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, RemainderDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[., DurationField, ;, public, class, RemainderDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[;, final, DurationField, iRangeField, ;, public, RemainderDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (]
[DurationField, iRangeField, ;, public, RemainderDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,]
[(, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[(, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <]
[,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw]
[), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =]
[{, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (]
[{, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (]
[new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (, rangeField, ==]
["The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {]
[;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField, =]
[field, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {]
[getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =]
[;, if, (, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (]
[(, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,]
[(, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,]
[iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,]
[}, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }]
[{, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =]
[{, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =]
[rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;]
[type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =]
[;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (]
[public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,]
[,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <]
[,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw]
[), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (]
[field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }]
[type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =]
[;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;]
[(, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =]
[(, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =]
[throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (, ), ;]
[IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =]
[field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (]
[getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField, ,]
[getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField, ,]
[dividedField, ., getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (]
[getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField, ,]
[getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField, ,]
[getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField, ,]
[dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField, ,, dividedField, ., getWrappedField, (, ), ., getDurationField, (, ), ,]
[,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (]
[,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (]
[RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (, dividedField, ., getWrappedField, (, ), ,]
[dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (, dividedField, ., getWrappedField, (, ), ,, type, ), ;]
[DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (, dividedField, ., getWrappedField, (, ), ,, type, ), ;, iDivisor, =]
[DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (, dividedField, ., getWrappedField, (, ), ,, type, ), ;, iDivisor, =]
[type, ), {, super, (, dividedField, ., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;]
[{, super, (, dividedField, ., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =]
[(, dividedField, ., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;]
[., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =]
[., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =]
[durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =]
[durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =]
[iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=]
[int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return]
[int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return]
[=, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return, value, %]
[(, instant, ), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return]
[(, instant, ), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return]
[instant, ), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (]
[instant, ), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (]
[;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -]
[value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (]
[0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (]
[{, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +]
[%, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %]
[1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return]
[%, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (]
[addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (]
[instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,]
[int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,]
[), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, 0, ,]
[), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, 0, ,]
[return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, 0, ,, iDivisor, -]
[0, ,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[0, ,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,]
[long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,]
[(, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,, iDivisor, -]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (]
[value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (]
[-, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[-, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[=, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *]
[., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *, iDivisor, +]
[(, instant, ,, divided, *, iDivisor, +, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return]
[}, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[iDurationField, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMinimumValue, (, ), {, return]
[iRangeField, ;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return]
[iRangeField, ;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return]
[}, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return, iDivisor, -]
[int, getMaximumValue, (, ), {, return, iDivisor, -, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[int, getMaximumValue, (, ), {, return, iDivisor, -, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[iDivisor, -, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfFloor, (]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfCeiling, (]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfEven, (]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (]
[), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;, }, public, int, getDivisor, (, ), {, return]
[public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {, if, (]
[public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {, if, (]
[getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {, if, (, value, >=]
[return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {, if, (, value, >=, 0, ), {, return]
[return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {, if, (, value, >=, 0, ), {, return]
[;, }, private, int, getDivided, (, int, value, ), {, if, (, value, >=, 0, ), {, return, value, /]
[int, value, ), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return]
[int, value, ), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return]
[value, ), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (]
[value, ), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (]
[), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (]
[), {, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (]
[if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +]
[>=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /]
[{, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -]
