[private, PaintUtilities, (, ), {, }, public, static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (]
[private, PaintUtilities, (, ), {, }, public, static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (]
[(, ), {, }, public, static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (, p1, ==]
[public, static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (, p1, ==, null, ), {, return]
[static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[static, boolean, equal, (, Paint, p1, ,, Paint, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[equal, (, Paint, p1, ,, Paint, p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[{, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==]
[==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return]
[p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, boolean, result, =]
[;, }, if, (, p2, ==, null, ), {, return, false, ;, }, boolean, result, =, false, ;, if, (]
[;, }, if, (, p2, ==, null, ), {, return, false, ;, }, boolean, result, =, false, ;, if, (]
[;, }, if, (, p2, ==, null, ), {, return, false, ;, }, boolean, result, =, false, ;, if, (]
[p2, ==, null, ), {, return, false, ;, }, boolean, result, =, false, ;, if, (, p1, instanceof, GradientPaint, &&]
[p2, ==, null, ), {, return, false, ;, }, boolean, result, =, false, ;, if, (, p1, instanceof, GradientPaint, &&]
[}, boolean, result, =, false, ;, if, (, p1, instanceof, GradientPaint, &&, p2, instanceof, GradientPaint, ), {, GradientPaint, gp1, =]
[=, false, ;, if, (, p1, instanceof, GradientPaint, &&, p2, instanceof, GradientPaint, ), {, GradientPaint, gp1, =, (, GradientPaint, )]
[p1, instanceof, GradientPaint, &&, p2, instanceof, GradientPaint, ), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =]
[&&, p2, instanceof, GradientPaint, ), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, )]
[instanceof, GradientPaint, ), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[), {, GradientPaint, gp1, =, (, GradientPaint, ), p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =]
[p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =, gp1, ., getColor1, (, ), ., equals, (]
[p1, ;, GradientPaint, gp2, =, (, GradientPaint, ), p2, ;, result, =, gp1, ., getColor1, (, ), ., equals, (]
[), p2, ;, result, =, gp1, ., getColor1, (, ), ., equals, (, gp2, ., getColor1, (, ), ), &&]
[), p2, ;, result, =, gp1, ., getColor1, (, ), ., equals, (, gp2, ., getColor1, (, ), ), &&]
[), p2, ;, result, =, gp1, ., getColor1, (, ), ., equals, (, gp2, ., getColor1, (, ), ), &&]
[(, ), ., equals, (, gp2, ., getColor1, (, ), ), &&, gp1, ., getColor2, (, ), ., equals, (]
[(, ), ., equals, (, gp2, ., getColor1, (, ), ), &&, gp1, ., getColor2, (, ), ., equals, (]
[getColor1, (, ), ), &&, gp1, ., getColor2, (, ), ., equals, (, gp2, ., getColor2, (, ), ), &&]
[getColor1, (, ), ), &&, gp1, ., getColor2, (, ), ., equals, (, gp2, ., getColor2, (, ), ), &&]
[getColor1, (, ), ), &&, gp1, ., getColor2, (, ), ., equals, (, gp2, ., getColor2, (, ), ), &&]
[(, ), ., equals, (, gp2, ., getColor2, (, ), ), &&, gp1, ., getPoint1, (, ), ., equals, (]
[(, ), ., equals, (, gp2, ., getColor2, (, ), ), &&, gp1, ., getPoint1, (, ), ., equals, (]
[getColor2, (, ), ), &&, gp1, ., getPoint1, (, ), ., equals, (, gp2, ., getPoint1, (, ), ), &&]
[getColor2, (, ), ), &&, gp1, ., getPoint1, (, ), ., equals, (, gp2, ., getPoint1, (, ), ), &&]
[getColor2, (, ), ), &&, gp1, ., getPoint1, (, ), ., equals, (, gp2, ., getPoint1, (, ), ), &&]
[(, ), ., equals, (, gp2, ., getPoint1, (, ), ), &&, gp1, ., getPoint2, (, ), ., equals, (]
[(, ), ., equals, (, gp2, ., getPoint1, (, ), ), &&, gp1, ., getPoint2, (, ), ., equals, (]
[getPoint1, (, ), ), &&, gp1, ., getPoint2, (, ), ., equals, (, gp2, ., getPoint2, (, ), ), &&]
[getPoint1, (, ), ), &&, gp1, ., getPoint2, (, ), ., equals, (, gp2, ., getPoint2, (, ), ), &&]
[getPoint1, (, ), ), &&, gp1, ., getPoint2, (, ), ., equals, (, gp2, ., getPoint2, (, ), ), &&]
[., getPoint2, (, ), ., equals, (, gp2, ., getPoint2, (, ), ), &&, gp1, ., isCyclic, (, ), ==]
[., getPoint2, (, ), ., equals, (, gp2, ., getPoint2, (, ), ), &&, gp1, ., isCyclic, (, ), ==]
[(, gp2, ., getPoint2, (, ), ), &&, gp1, ., isCyclic, (, ), ==, gp2, ., isCyclic, (, ), &&]
[(, gp2, ., getPoint2, (, ), ), &&, gp1, ., isCyclic, (, ), ==, gp2, ., isCyclic, (, ), &&]
[(, gp2, ., getPoint2, (, ), ), &&, gp1, ., isCyclic, (, ), ==, gp2, ., isCyclic, (, ), &&]
[), &&, gp1, ., isCyclic, (, ), ==, gp2, ., isCyclic, (, ), &&, gp1, ., getTransparency, (, ), ==]
[), &&, gp1, ., isCyclic, (, ), ==, gp2, ., isCyclic, (, ), &&, gp1, ., getTransparency, (, ), ==]
[., isCyclic, (, ), &&, gp1, ., getTransparency, (, ), ==, gp1, ., getTransparency, (, ), ;, }, else, {]
[(, ), &&, gp1, ., getTransparency, (, ), ==, gp1, ., getTransparency, (, ), ;, }, else, {, result, =]
[(, ), &&, gp1, ., getTransparency, (, ), ==, gp1, ., getTransparency, (, ), ;, }, else, {, result, =]
[., getTransparency, (, ), ==, gp1, ., getTransparency, (, ), ;, }, else, {, result, =, p1, ., equals, (]
[gp1, ., getTransparency, (, ), ;, }, else, {, result, =, p1, ., equals, (, p2, ), ;, }, return]
[return, result, ;, }, public, static, String, colorToString, (, Color, c, ), {, try, {, Field, [, ], fields, =]
[return, result, ;, }, public, static, String, colorToString, (, Color, c, ), {, try, {, Field, [, ], fields, =]
[try, {, Field, [, ], fields, =, Color, ., class, ., getFields, (, ), ;, for, (, int, i, =]
[Field, [, ], fields, =, Color, ., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;]
[Field, [, ], fields, =, Color, ., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;]
[], fields, =, Color, ., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], fields, =, Color, ., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;, i, <, fields, ., length, ;]
[., class, ., getFields, (, ), ;, for, (, int, i, =, 0, ;, i, <, fields, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, fields, ., length, ;, i, ++, ), {, Field, f, =]
[for, (, int, i, =, 0, ;, i, <, fields, ., length, ;, i, ++, ), {, Field, f, =]
[int, i, =, 0, ;, i, <, fields, ., length, ;, i, ++, ), {, Field, f, =, fields, []
[i, <, fields, ., length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (]
[i, <, fields, ., length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (]
[i, <, fields, ., length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (]
[i, <, fields, ., length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (]
[length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (, Modifier, ., isPublic, (]
[length, ;, i, ++, ), {, Field, f, =, fields, [, i, ], ;, if, (, Modifier, ., isPublic, (]
[f, =, fields, [, i, ], ;, if, (, Modifier, ., isPublic, (, f, ., getModifiers, (, ), ), &&]
[f, =, fields, [, i, ], ;, if, (, Modifier, ., isPublic, (, f, ., getModifiers, (, ), ), &&]
[i, ], ;, if, (, Modifier, ., isPublic, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isFinal, (]
[i, ], ;, if, (, Modifier, ., isPublic, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isFinal, (]
[isPublic, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isFinal, (, f, ., getModifiers, (, ), ), &&]
[isPublic, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isFinal, (, f, ., getModifiers, (, ), ), &&]
[getModifiers, (, ), ), &&, Modifier, ., isFinal, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isStatic, (]
[getModifiers, (, ), ), &&, Modifier, ., isFinal, (, f, ., getModifiers, (, ), ), &&, Modifier, ., isStatic, (]
[getModifiers, (, ), ), &&, Modifier, ., isStatic, (, f, ., getModifiers, (, ), ), ), {, String, name, =]
[getModifiers, (, ), ), &&, Modifier, ., isStatic, (, f, ., getModifiers, (, ), ), ), {, String, name, =]
[f, ., getModifiers, (, ), ), ), {, String, name, =, f, ., getName, (, ), ;, Object, oColor, =]
[f, ., getModifiers, (, ), ), ), {, String, name, =, f, ., getName, (, ), ;, Object, oColor, =]
[), ), ), {, String, name, =, f, ., getName, (, ), ;, Object, oColor, =, f, ., get, (]
[name, =, f, ., getName, (, ), ;, Object, oColor, =, f, ., get, (, null, ), ;, if, (]
[name, =, f, ., getName, (, ), ;, Object, oColor, =, f, ., get, (, null, ), ;, if, (]
[;, Object, oColor, =, f, ., get, (, null, ), ;, if, (, oColor, instanceof, Color, ), {, if, (]
[;, Object, oColor, =, f, ., get, (, null, ), ;, if, (, oColor, instanceof, Color, ), {, if, (]
[f, ., get, (, null, ), ;, if, (, oColor, instanceof, Color, ), {, if, (, c, ., equals, (]
[), ;, if, (, oColor, instanceof, Color, ), {, if, (, c, ., equals, (, oColor, ), ), {, return]
[), {, return, name, ;, }, }, }, }, }, catch, (, Exception, e, ), {, }, String, color, =]
[), {, return, name, ;, }, }, }, }, }, catch, (, Exception, e, ), {, }, String, color, =]
[;, }, }, }, }, }, catch, (, Exception, e, ), {, }, String, color, =, Integer, ., toHexString, (]
[;, }, }, }, }, }, catch, (, Exception, e, ), {, }, String, color, =, Integer, ., toHexString, (]
[;, }, }, }, }, }, catch, (, Exception, e, ), {, }, String, color, =, Integer, ., toHexString, (]
[catch, (, Exception, e, ), {, }, String, color, =, Integer, ., toHexString, (, c, ., getRGB, (, ), &]
[}, String, color, =, Integer, ., toHexString, (, c, ., getRGB, (, ), &, 0x00ffffff, ), ;, StringBuffer, retval, =]
[=, Integer, ., toHexString, (, c, ., getRGB, (, ), &, 0x00ffffff, ), ;, StringBuffer, retval, =, new, StringBuffer, (]
[toHexString, (, c, ., getRGB, (, ), &, 0x00ffffff, ), ;, StringBuffer, retval, =, new, StringBuffer, (, 7, ), ;]
[toHexString, (, c, ., getRGB, (, ), &, 0x00ffffff, ), ;, StringBuffer, retval, =, new, StringBuffer, (, 7, ), ;]
[getRGB, (, ), &, 0x00ffffff, ), ;, StringBuffer, retval, =, new, StringBuffer, (, 7, ), ;, retval, ., append, (]
[;, StringBuffer, retval, =, new, StringBuffer, (, 7, ), ;, retval, ., append, (, "#", ), ;, int, fillUp, =]
[;, StringBuffer, retval, =, new, StringBuffer, (, 7, ), ;, retval, ., append, (, "#", ), ;, int, fillUp, =]
[retval, =, new, StringBuffer, (, 7, ), ;, retval, ., append, (, "#", ), ;, int, fillUp, =, 6, -]
[retval, =, new, StringBuffer, (, 7, ), ;, retval, ., append, (, "#", ), ;, int, fillUp, =, 6, -]
[(, "#", ), ;, int, fillUp, =, 6, -, color, ., length, (, ), ;, for, (, int, i, =]
[), ;, int, fillUp, =, 6, -, color, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, int, fillUp, =, 6, -, color, ., length, (, ), ;, for, (, int, i, =, 0, ;]
[int, fillUp, =, 6, -, color, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, 6, -, color, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, fillUp, ;]
[=, 6, -, color, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, fillUp, ;]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, fillUp, ;, i, ++, ), {]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, fillUp, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, fillUp, ;, i, ++, ), {, retval, ., append, (]
[i, =, 0, ;, i, <, fillUp, ;, i, ++, ), {, retval, ., append, (, "0", ), ;, }]
[i, =, 0, ;, i, <, fillUp, ;, i, ++, ), {, retval, ., append, (, "0", ), ;, }]
[i, <, fillUp, ;, i, ++, ), {, retval, ., append, (, "0", ), ;, }, retval, ., append, (]
[i, ++, ), {, retval, ., append, (, "0", ), ;, }, retval, ., append, (, color, ), ;, return]
[i, ++, ), {, retval, ., append, (, "0", ), ;, }, retval, ., append, (, color, ), ;, return]
[;, return, retval, ., toString, (, ), ;, }, public, static, Color, stringToColor, (, String, value, ), {, if, (]
[;, return, retval, ., toString, (, ), ;, }, public, static, Color, stringToColor, (, String, value, ), {, if, (]
[retval, ., toString, (, ), ;, }, public, static, Color, stringToColor, (, String, value, ), {, if, (, value, ==]
[), ;, }, public, static, Color, stringToColor, (, String, value, ), {, if, (, value, ==, null, ), {, return]
[), ;, }, public, static, Color, stringToColor, (, String, value, ), {, if, (, value, ==, null, ), {, return]
[String, value, ), {, if, (, value, ==, null, ), {, return, Color, ., black, ;, }, try, {, return]
[String, value, ), {, if, (, value, ==, null, ), {, return, Color, ., black, ;, }, try, {, return]
[if, (, value, ==, null, ), {, return, Color, ., black, ;, }, try, {, return, Color, ., decode, (]
[Color, ., decode, (, value, ), ;, }, catch, (, NumberFormatException, nfe, ), {, try, {, final, Field, f, =]
[Color, ., decode, (, value, ), ;, }, catch, (, NumberFormatException, nfe, ), {, try, {, final, Field, f, =]
[;, }, catch, (, NumberFormatException, nfe, ), {, try, {, final, Field, f, =, Color, ., class, ., getField, (]
[NumberFormatException, nfe, ), {, try, {, final, Field, f, =, Color, ., class, ., getField, (, value, ), ;, return]
[{, try, {, final, Field, f, =, Color, ., class, ., getField, (, value, ), ;, return, (, Color, )]
[{, try, {, final, Field, f, =, Color, ., class, ., getField, (, value, ), ;, return, (, Color, )]
[Field, f, =, Color, ., class, ., getField, (, value, ), ;, return, (, Color, ), f, ., get, (]
[;, return, (, Color, ), f, ., get, (, null, ), ;, }, catch, (, Exception, ce, ), {, return]
[;, return, (, Color, ), f, ., get, (, null, ), ;, }, catch, (, Exception, ce, ), {, return]
