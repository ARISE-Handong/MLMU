[;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double, []
[,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {]
[/, FastMath, ., sqrt, (, 3.0, ), ,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static]
[/, FastMath, ., sqrt, (, 3.0, ), ,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static]
[,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {]
[., sqrt, (, 3.0, ), ,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double]
[), ,, 1.0, /, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =]
[}, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double]
[/, FastMath, ., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,]
[}, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final, double]
[., sqrt, (, 3.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }]
[), }, ;, private, static, final, double, [, ], WEIGHTS_2, =, {, 1.0, ,, 1.0, }, ;, private, static, final]
[;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,, 0.0, ,]
[,, 1.0, }, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, )]
[}, ;, private, static, final, double, [, ], ABSCISSAS_3, =, {, -, FastMath, ., sqrt, (, 0.6, ), ,, 0.0]
[;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,, 5.0, /]
[,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {]
[,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {]
[., sqrt, (, 0.6, ), ,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double]
[), ,, 0.0, ,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =]
[,, FastMath, ., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /]
[}, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,, 5.0]
[., sqrt, (, 0.6, ), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,]
[), }, ;, private, static, final, double, [, ], WEIGHTS_3, =, {, 5.0, /, 9.0, ,, 8.0, /, 9.0, ,]
[;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *]
[,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -]
[/, 9.0, ,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =]
[,, 8.0, /, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -]
[,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (]
[/, 9.0, ,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, .]
[,, 5.0, /, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (]
[}, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0]
[/, 9.0, }, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0]
[}, ;, private, static, final, double, [, ], ABSCISSAS_4, =, {, -, FastMath, ., sqrt, (, (, 15.0, +, 2.0]
[;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0]
[,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -]
[), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[/, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0]
[+, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (]
[), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -]
[), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0]
[., sqrt, (, 30.0, ), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *]
[), ), /, 35.0, ), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (]
[), ,, -, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /]
[,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, )]
[,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, )]
[., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath]
[), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[/, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), )]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[-, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath]
[), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0]
[), ,, FastMath, ., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, )]
[., sqrt, (, (, 15.0, -, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath]
[), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[/, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), )]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[-, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0]
[), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, )]
[., sqrt, (, 30.0, ), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath]
[), ), /, 35.0, ), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0]
[), ,, FastMath, ., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0]
[}, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (]
[., sqrt, (, (, 15.0, +, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;]
[), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt]
[/, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath]
[), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *]
[+, 2.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, []
[), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4]
[), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *]
[., sqrt, (, 30.0, ), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {]
[), ), /, 35.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0]
[), }, ;, private, static, final, double, [, ], WEIGHTS_4, =, {, (, 90.0, -, 5.0, *, FastMath, ., sqrt]
[;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *]
[,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0]
[/, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[-, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, .]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, )]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0]
[,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0]
[/, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[+, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, .]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (]
[), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (]
[., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, )]
[), ), /, 180.0, ,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,]
[,, (, 90.0, +, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0]
[,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final]
[/, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private]
[), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;]
[+, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, .]
[), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (]
[), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;]
[., sqrt, (, 30.0, ), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, )]
[), ), /, 180.0, ,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }]
[,, (, 90.0, -, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final]
[}, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0]
[/, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0]
[), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (]
[-, 5.0, *, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ]]
[), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (]
[*, FastMath, ., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =]
[), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (]
[., sqrt, (, 30.0, ), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -]
[), ), /, 180.0, }, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (]
[}, ;, private, static, final, double, [, ], ABSCISSAS_5, =, {, -, FastMath, ., sqrt, (, (, 35.0, +, 2.0]
[;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0]
[,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0]
[,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0]
[., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -]
[), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[/, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, )]
[), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0]
[+, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (]
[), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -]
[), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0]
[., sqrt, (, 70.0, ), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *]
[), ), /, 63.0, ), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[), ,, -, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0]
[), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[/, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0]
[), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[-, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (]
[), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0]
[), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (]
[., sqrt, (, 70.0, ), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0]
[), ), /, 63.0, ), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt]
[), ,, 0.0, ,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[,, FastMath, ., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, )]
[,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, )]
[., sqrt, (, (, 35.0, -, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath]
[), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0]
[/, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, )]
[-, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0]
[), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, )]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0]
[), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, )]
[., sqrt, (, 70.0, ), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath]
[), ), /, 63.0, ), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0]
[), ,, FastMath, ., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0]
[}, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (]
[., sqrt, (, (, 35.0, +, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;]
[), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt]
[/, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath]
[), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *]
[+, 2.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, []
[), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5]
[), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *]
[., sqrt, (, 70.0, ), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {]
[), ), /, 63.0, ), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0]
[), }, ;, private, static, final, double, [, ], WEIGHTS_5, =, {, (, 322.0, -, 13.0, *, FastMath, ., sqrt]
[;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public, LegendreGaussIntegrator, (, final, int]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,]
[/, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /]
[), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0]
[-, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, .]
[), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (]
[), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0]
[., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, )]
[), ), /, 900.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,]
[,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[/, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /]
[), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[+, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +]
[), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *]
[), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), )]
[., sqrt, (, 70.0, ), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, .]
[), ), /, 900.0, ,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, )]
[,, 128.0, /, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0]
[/, 225.0, ,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0]
[,, (, 322.0, +, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0]
[,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private, final, double]
[/, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private]
[), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;]
[+, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, .]
[), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (]
[), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;]
[., sqrt, (, 70.0, ), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, )]
[), ), /, 900.0, ,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }]
[,, (, 322.0, -, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private, final, double]
[}, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public, LegendreGaussIntegrator, (, final]
[/, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public, LegendreGaussIntegrator]
[), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public]
[-, 13.0, *, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private, final, double, [, ], abscissas]
[), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public]
[*, FastMath, ., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private]
[), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public]
[., sqrt, (, 70.0, ), ), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double]
[), ), /, 900.0, }, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;]
[}, ;, private, final, double, [, ], abscissas, ;, private, final, double, [, ], weights, ;, public, LegendreGaussIntegrator, (, final]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =]
[,, maximalIterationCount, ), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;]
[), ;, switch, (, n, ), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;]
[), {, case, 2, :, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =]
[:, abscissas, =, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =]
[=, ABSCISSAS_2, ;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;]
[;, weights, =, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;]
[=, WEIGHTS_2, ;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4]
[;, break, ;, case, 3, :, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas]
[:, abscissas, =, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =]
[=, ABSCISSAS_3, ;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;]
[;, weights, =, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;]
[=, WEIGHTS_3, ;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5]
[;, break, ;, case, 4, :, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas]
[:, abscissas, =, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =]
[=, ABSCISSAS_4, ;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;]
[;, weights, =, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;]
[=, WEIGHTS_4, ;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :]
[;, break, ;, case, 5, :, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new]
[:, abscissas, =, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED]
[=, ABSCISSAS_5, ;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n]
[;, weights, =, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,, 2]
[=, WEIGHTS_5, ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,, 2, ,, 5]
[;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,, 2, ,, 5, ), ;]
[;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, MathIllegalArgumentException]
[,, n, ,, 2, ,, 5, ), ;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy]
[., N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, ,, n, ,, 2, ,, 5, ), ;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final]
[,, 2, ,, 5, ), ;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final]
[,, 5, ), ;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[), ;, }, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws]
[,, relativeAccuracy, ,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, int]
[,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,]
[,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int]
[,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[), ;, }, public, LegendreGaussIntegrator, (, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, MathIllegalArgumentException]
[,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException]
[,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[,, maximalIterationCount, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;]
[), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, )]
[;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath]
[), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (, t]
[;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, .]
[), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath]
[;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, .]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath]
[-, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *]
[), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath]
[;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta, <=]
[., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath]
[,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), )]
[), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta]
[*, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&]
[*, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;]
[*, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&]
[), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), )]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, )]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (]
[), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), )]
[., abs, (, t, ), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1]
[), ), *, 0.5, ), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, )]
[), ;, if, (, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta]
[), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta]
[&&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4]
[), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (]
[>=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =]
[+, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double]
[., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return]
[>=, getMinimalIterationCount, (, ), ), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =]
[), &&, (, delta, <=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (]
[), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta]
[), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[<=, limit, ), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, .]
[), ), {, return, t, ;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[;, }, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5]
[;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, )]
[., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), )]
[,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath]
[), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1]
[., pow, (, delta, /, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max]
[,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio]
[/, limit, ,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, )]
[,, 0.5, /, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[/, abscissas, ., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[., length, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[=, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt]
[;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n]
[., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t]
[,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double]
[,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double]
[), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private]
[*, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }]
[), ,, n, +, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private]
[), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int]
[+, 1, ), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (]
[), ;, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int]
[=, t, ;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws]
[;, iterations, ., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {]
[;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double, step, =, (, getMax]
[., incrementCount, (, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, double]
[;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum]
[/, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep, ;]
[), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep]
[-, getMin, (, ), ), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin]
[), /, n, ;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep]
[;, final, double, halfStep, =, step, /, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum]
[;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =]
[/, 2.0, ;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int]
[;, double, midPoint, =, getMin, (, ), +, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =]
[;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[+, halfStep, ;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[;, double, sum, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j]
[;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, .]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j]
[<, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j]
[), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum]
[), {, for, (, int, j, =, 0, ;, j, <, abscissas, ., length, ;, ++, j, ), {, sum]
[;, j, <, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (]
[;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, []
[<, abscissas, ., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +]
[;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, []
[., length, ;, ++, j, ), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *]
[), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], )]
[), {, sum, +=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], )]
[+=, weights, [, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint]
[;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[*, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return]
[[, j, ], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step]
[], *, computeObjectiveValue, (, midPoint, +, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }]
[;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[+, halfStep, *, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;]
[), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[*, abscissas, [, j, ], ), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[[, j, ], ), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[], ), ;, }, midPoint, +=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[+=, step, ;, }, return, halfStep, *, sum, ;, }, }]
[;, }, return, halfStep, *, sum, ;, }, }]
[;, }, }]
[*, sum, ;, }, }]
[;, }, }]
