[com, ., google, ., javascript, ., rhino, ., Node, ;, class, SanityCheck, implements, CompilerPass, {, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =]
[com, ., google, ., javascript, ., rhino, ., Node, ;, class, SanityCheck, implements, CompilerPass, {, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =]
[javascript, ., rhino, ., Node, ;, class, SanityCheck, implements, CompilerPass, {, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =, DiagnosticType, ., error, (]
[rhino, ., Node, ;, class, SanityCheck, implements, CompilerPass, {, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =, DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,]
[{, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =, DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =]
[{, static, final, DiagnosticType, CANNOT_PARSE_GENERATED_CODE, =, DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =]
[CANNOT_PARSE_GENERATED_CODE, =, DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,]
[DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,]
[DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,]
[DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,]
[DiagnosticType, ., error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,]
[error, (, "JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +]
["JSC_CANNOT_PARSE_GENERATED_CODE", ,, "Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +]
["Internal compiler error. Cannot parse generated code: {0}", ), ;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +]
[;, static, final, DiagnosticType, GENERATED_BAD_CODE, =, DiagnosticType, ., error, (, "JSC_GENERATED_BAD_CODE", ,, "Internal compiler error. Generated bad code.", +, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +]
[+, "----------------------------------------\n", +, "Expected:\n{0}\n", +, "----------------------------------------\n", +, "Actual:\n{1}", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =]
[final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler, compiler, ), {]
[final, AbstractCompiler, compiler, ;, private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler, compiler, ), {]
[private, final, AstValidator, astValidator, =, new, AstValidator, (, ), ;, SanityCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,, root, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,, root, ), ;, sanityCheckNormalization, (]
[process, (, Node, externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,, root, ), ;, sanityCheckNormalization, (, externs, ,]
[externs, ,, Node, root, ), {, sanityCheckAst, (, externs, ,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;]
[Node, root, ), {, sanityCheckAst, (, externs, ,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (]
[{, sanityCheckAst, (, externs, ,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;]
[(, externs, ,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (]
[,, root, ), ;, sanityCheckNormalization, (, externs, ,, root, ), ;, sanityCheckCodeGeneration, (, root, ), ;, sanityCheckVars, (, externs, ,]
[;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {]
[;, sanityCheckVars, (, externs, ,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {]
[,, root, ), ;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (]
[;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (, externs, ), ;]
[;, }, private, void, sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (, externs, ), ;]
[sanityCheckAst, (, Node, externs, ,, Node, root, ), {, astValidator, ., validateCodeRoot, (, externs, ), ;, astValidator, ., validateCodeRoot, (]
[., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (]
[., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (]
[., validateCodeRoot, (, root, ), ;, }, private, void, sanityCheckVars, (, Node, externs, ,, Node, root, ), {, if, (]
[Node, externs, ,, Node, root, ), {, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[Node, externs, ,, Node, root, ), {, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[externs, ,, Node, root, ), {, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (]
[root, ), {, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, VarCheck, (]
[{, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, VarCheck, (, compiler, ,]
[(, ), ., isNormalized, (, ), ), {, (, new, VarCheck, (, compiler, ,, true, ), ), ., process, (]
[., isNormalized, (, ), ), {, (, new, VarCheck, (, compiler, ,, true, ), ), ., process, (, externs, ,]
[., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (]
[., process, (, externs, ,, root, ), ;, }, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (]
[}, }, private, Node, sanityCheckCodeGeneration, (, Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (, ), ), {, return]
[Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (, ), ), {, return, null, ;, }, String, source, =]
[Node, root, ), {, if, (, compiler, ., hasHaltingErrors, (, ), ), {, return, null, ;, }, String, source, =]
[if, (, compiler, ., hasHaltingErrors, (, ), ), {, return, null, ;, }, String, source, =, compiler, ., toSource, (]
[), ), {, return, null, ;, }, String, source, =, compiler, ., toSource, (, root, ), ;, Node, root2, =]
[), ), {, return, null, ;, }, String, source, =, compiler, ., toSource, (, root, ), ;, Node, root2, =]
[null, ;, }, String, source, =, compiler, ., toSource, (, root, ), ;, Node, root2, =, compiler, ., parseSyntheticCode, (]
[=, compiler, ., toSource, (, root, ), ;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (]
[=, compiler, ., toSource, (, root, ), ;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (]
[;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {]
[;, Node, root2, =, compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {]
[compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (]
[compiler, ., parseSyntheticCode, (, source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (]
[source, ), ;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,]
[;, if, (, compiler, ., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,]
[., hasHaltingErrors, (, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (]
[(, ), ), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,]
[), {, compiler, ., report, (, JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,]
[JSError, ., make, (, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,, true, ), ), ), ;, throw]
[(, CANNOT_PARSE_GENERATED_CODE, ,, Strings, ., truncateAtMaxLength, (, source, ,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (]
[source, ,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =]
[source, ,, 100, ,, true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =]
[true, ), ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (]
[throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (]
[new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !]
[new, IllegalStateException, (, "Sanity Check failed", ), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !]
[), ;, }, String, source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !, source, ., equals, (]
[source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2, ), ), {]
[source2, =, compiler, ., toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2, ), ), {]
[toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (]
[toSource, (, root2, ), ;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (]
[;, if, (, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make, (]
[(, !, source, ., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,]
[source, ., equals, (, source2, ), ), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,]
[), ), {, compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw]
[compiler, ., report, (, JSError, ., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new, IllegalStateException, (]
[., make, (, GENERATED_BAD_CODE, ,, source, ,, source2, ), ), ;, throw, new, IllegalStateException, (, "Sanity Check failed", ), ;, }, return]
[;, }, return, root2, ;, }, private, void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler, =]
[void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;]
[void, sanityCheckNormalization, (, Node, externs, ,, Node, root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;]
[externs, ,, Node, root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;, compiler, ., addChangeHandler, (]
[root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;]
[root, ), {, CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;]
[CodeChangeHandler, handler, =, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, new, PrepareAst, (]
[=, new, CodeChangeHandler, ., ForbiddenChange, (, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, new, PrepareAst, (, compiler, ,]
[(, ), ;, compiler, ., addChangeHandler, (, handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (]
[;, compiler, ., addChangeHandler, (, handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,]
[handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, ), ;, if, (]
[handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, ), ;, if, (]
[handler, ), ;, new, PrepareAst, (, compiler, ,, true, ), ., process, (, null, ,, root, ), ;, if, (]
[process, (, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[process, (, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[(, null, ,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (]
[root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize, (]
[;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,]
[(, ), ., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (]
[., isNormalized, (, ), ), {, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,]
[{, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,, root, ), ;, if, (]
[{, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,, root, ), ;, if, (]
[{, (, new, Normalize, (, compiler, ,, true, ), ), ., process, (, externs, ,, root, ), ;, if, (]
[,, root, ), ;, if, (, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =]
[(, compiler, ., getLifeCycleStage, (, ), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =]
[), ., isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (]
[isNormalizedUnobfuscated, (, ), ), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,]
[), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;]
[), {, boolean, checkUserDeclarations, =, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;]
[=, true, ;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (]
[;, CompilerPass, pass, =, new, Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,]
[Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,, root, ), ;, }, }]
[Normalize, ., VerifyConstants, (, compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,, root, ), ;, }, }]
[compiler, ,, checkUserDeclarations, ), ;, pass, ., process, (, externs, ,, root, ), ;, }, }, compiler, ., removeChangeHandler, (]
