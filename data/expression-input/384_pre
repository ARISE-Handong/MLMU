[import, java, ., nio, ., charset, ., CharsetEncoder, ;, class, Util, {, private, static, final, char, [, ], HEX_CHARS, =]
[java, ., nio, ., charset, ., CharsetEncoder, ;, class, Util, {, private, static, final, char, [, ], HEX_CHARS, =, {]
[nio, ., charset, ., CharsetEncoder, ;, class, Util, {, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,]
[charset, ., CharsetEncoder, ;, class, Util, {, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,]
[CharsetEncoder, ;, class, Util, {, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,]
[class, Util, {, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,]
[{, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,]
[static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,]
[char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,]
[], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,]
[=, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,]
['0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,]
['1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,]
['2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,]
['3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,]
['4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,]
['5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,]
['b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, static, String, escapeString, (, String, s, ), {, return]
['c', ,, 'd', ,, 'e', ,, 'f', }, ;, static, String, escapeString, (, String, s, ), {, return, escapeString, (]
['d', ,, 'e', ,, 'f', }, ;, static, String, escapeString, (, String, s, ), {, return, escapeString, (, s, ,]
['e', ,, 'f', }, ;, static, String, escapeString, (, String, s, ), {, return, escapeString, (, s, ,, '"', ,]
['f', }, ;, static, String, escapeString, (, String, s, ), {, return, escapeString, (, s, ,, '"', ,, "\\\"", ,]
[;, static, String, escapeString, (, String, s, ), {, return, escapeString, (, s, ,, '"', ,, "\\\"", ,, "\'", ,]
[String, escapeString, (, String, s, ), {, return, escapeString, (, s, ,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,]
[,, char, quote, ,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =]
[,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +]
[,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;]
[,, CharsetEncoder, outputCharsetEncoder, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;]
[{, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;, sb, ., append, (]
[., length, (, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =]
[(, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;]
[(, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;]
[+, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <]
[+, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <]
[append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (]
[length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (]
[i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case]
[), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\n', :]
[), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\n', :]
[=, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\n', :, sb, ., append, (]
[), ;, switch, (, c, ), {, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case]
[switch, (, c, ), {, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
[switch, (, c, ), {, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
[{, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (]
[append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :]
[;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (]
[append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case]
["\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :]
["\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :]
[;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (]
[append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case]
["\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :]
["\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :]
[;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (]
[append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case]
[backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :]
[backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :]
[;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (]
[append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case]
[;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (]
[;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (]
[;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (]
[;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=]
['\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&]
[:, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (]
[:, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (]
[sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (]
[sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (]
[sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (]
[sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (]
[singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (, s, ., charAt, (]
[singlequoteEscape, ), ;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (, s, ., charAt, (]
[;, break, ;, case, '>', :, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -]
[case, '>', :, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==]
[:, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[:, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[:, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[>=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (]
[>=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (]
[&&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -]
[s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==]
[(, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (]
[==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (]
[&&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -]
[charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (]
[==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (]
[), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -]
[s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==]
[-, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {]
[-, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {]
[']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (]
[i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, "\\>", ), ;, }, else, {]
[i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, "\\>", ), ;, }, else, {]
[==, ']', ), ), ), {, sb, ., append, (, "\\>", ), ;, }, else, {, sb, ., append, (]
[., append, (, "\\>", ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case]
[}, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, final, String, END_SCRIPT, =]
[(, c, ), ;, }, break, ;, case, '<', :, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =]
[}, break, ;, case, '<', :, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (]
[}, break, ;, case, '<', :, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (]
['<', :, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (]
[final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,]
[final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,]
[END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +]
["/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,]
[final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,]
[START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,]
[START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,]
[regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {]
[regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {]
[i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (]
[,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, if, (]
[,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, if, (]
[(, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (]
[), ), {, sb, ., append, (, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (, false, ,]
[), ), {, sb, ., append, (, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (, false, ,]
[{, sb, ., append, (, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +]
[., append, (, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,]
[(, "<\\", ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,]
[), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,]
[), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,]
[regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {]
[regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {]
[i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (]
[0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, {]
[0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, {]
[length, (, ), ), ), {, sb, ., append, (, "<\\", ), ;, }, else, {, sb, ., append, (]
["<\\", ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (]
["<\\", ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (]
[;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=]
[., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (]
[., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (]
[), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (]
[;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {]
[;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {]
[(, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (]
[if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {]
[outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {, appendCharAsHex, (]
[canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,]
[(, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[(, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[(, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >]
[}, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&]
[}, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&]
[{, appendCharAsHex, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <=]
[sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <=, 0x7f, ), {]
[sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <=, 0x7f, ), {]
[;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <=, 0x7f, ), {, sb, ., append, (]
[(, c, >, 0x1f, &&, c, <=, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {]
[>, 0x1f, &&, c, <=, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendCharAsHex, (]
[&&, c, <=, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,]
[., append, (, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, }, }]
[., append, (, c, ), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, }, }]
[), ;, }, else, {, appendCharAsHex, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (]
[{, appendCharAsHex, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return]
[{, appendCharAsHex, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return]
[;, }, }, }, }, sb, ., append, (, quote, ), ;, return, sb, ., toString, (, ), ;, }]
[}, }, sb, ., append, (, quote, ), ;, return, sb, ., toString, (, ), ;, }, @, SuppressWarnings, (]
[}, @, SuppressWarnings, (, "cast", ), private, static, void, appendCharAsHex, (, StringBuilder, sb, ,, char, c, ), {, try, {]
[SuppressWarnings, (, "cast", ), private, static, void, appendCharAsHex, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (]
["cast", ), private, static, void, appendCharAsHex, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, sb, ,]
[static, void, appendCharAsHex, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, sb, ,, (, int, )]
[try, {, appendHexJavaScriptRepresentation, (, sb, ,, (, int, ), c, ), ;, }, catch, (, IOException, ex, ), {, throw]
[(, sb, ,, (, int, ), c, ), ;, }, catch, (, IOException, ex, ), {, throw, new, RuntimeException, (]
[), ;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, Appendable, out, ,, int, codePoint, ), throws, IOException, {, if, (]
[), ;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, Appendable, out, ,, int, codePoint, ), throws, IOException, {, if, (]
[private, static, void, appendHexJavaScriptRepresentation, (, Appendable, out, ,, int, codePoint, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (]
[codePoint, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =]
[codePoint, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =]
[{, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (]
[Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;]
[isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (]
[codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,]
[codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,]
[), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, []
[], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], ), ;]
[=, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (]
[., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,]
[., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,]
[(, codePoint, ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, []
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[,, surrogates, [, 0, ], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }]
[], ), ;, appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], ), ;, return, ;, }, out, ., append, (]
[out, ,, surrogates, [, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (]
[out, ,, surrogates, [, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (]
[surrogates, [, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, []
[surrogates, [, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, []
[[, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (]
[[, 1, ], ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (]
[;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[}, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[(, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[(, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[>, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[(, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[(, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[>, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &]
