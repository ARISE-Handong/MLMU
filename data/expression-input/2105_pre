[{, private, final, Callable, <, T, >, callable, ;, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ), {]
[final, Callable, <, T, >, callable, ;, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ), {, checkCallable, (]
[T, >, callable, ;, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ), {, checkCallable, (, call, ), ;]
[callable, ;, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ), {, checkCallable, (, call, ), ;, callable, =]
[call, ;, }, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, ), {, super, (]
[public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, ), {, super, (, exec, ), ;]
[(, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, ), {, super, (, exec, ), ;, checkCallable, (]
[<, T, >, call, ,, final, ExecutorService, exec, ), {, super, (, exec, ), ;, checkCallable, (, call, ), ;]
[>, call, ,, final, ExecutorService, exec, ), {, super, (, exec, ), ;, checkCallable, (, call, ), ;, callable, =]
[(, call, ), ;, callable, =, call, ;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return]
[(, call, ), ;, callable, =, call, ;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return]
[., call, (, ), ;, }, private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (]
[., call, (, ), ;, }, private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (]
[(, ), ;, }, private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (, call, ==]
[private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (, call, ==, null, ), {, throw]
[(, final, Callable, <, T, >, call, ), {, if, (, call, ==, null, ), {, throw, new, IllegalArgumentException, (]
