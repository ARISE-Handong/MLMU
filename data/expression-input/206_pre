[import, java, ., util, ., List, ;, final, class, CheckSideEffects, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, USELESS_CODE_ERROR, =]
[import, java, ., util, ., List, ;, final, class, CheckSideEffects, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, USELESS_CODE_ERROR, =]
[., List, ;, final, class, CheckSideEffects, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, USELESS_CODE_ERROR, =, DiagnosticType, ., warning, (]
[;, final, class, CheckSideEffects, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, USELESS_CODE_ERROR, =, DiagnosticType, ., warning, (, "JSC_USELESS_CODE", ,]
[{, static, final, DiagnosticType, USELESS_CODE_ERROR, =, DiagnosticType, ., warning, (, "JSC_USELESS_CODE", ,, "Suspicious code. {0}", ), ;, static, final, String, PROTECTOR_FN, =]
[static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;, private, final, List, <, Node, >, problemNodes, =]
[static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;, private, final, List, <, Node, >, problemNodes, =]
[AbstractCompiler, compiler, ;, private, final, boolean, protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {]
[AbstractCompiler, compiler, ;, private, final, boolean, protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {]
[final, boolean, protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =]
[protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;]
[protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;, this, ., level, =]
[,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;, this, ., level, =, level, ;]
[,, CheckLevel, level, ,, boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;, this, ., level, =, level, ;]
[boolean, protectSideEffectFreeCode, ), {, this, ., compiler, =, compiler, ;, this, ., level, =, level, ;, this, ., protectSideEffectFreeCode, =]
[this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, if, (]
[Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, if, (, protectSideEffectFreeCode, ), {]
[{, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[{, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isEmpty, (, ), ||]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isEmpty, (, ), ||]
[if, (, n, ., isEmpty, (, ), ||, n, ., isComma, (, ), ), {, return, ;, }, if, (]
[if, (, n, ., isEmpty, (, ), ||, n, ., isComma, (, ), ), {, return, ;, }, if, (]
[n, ., isEmpty, (, ), ||, n, ., isComma, (, ), ), {, return, ;, }, if, (, parent, ==]
[isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (]
[;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (, n, ., isExprResult, (, ), ||]
[;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (, n, ., isExprResult, (, ), ||]
[if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (]
[if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (]
[if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (]
[), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&]
[), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&]
[), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&]
[), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=]
[., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =]
[., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =]
[&&, n, ., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (]
[!=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =]
[!=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =]
[return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (]
[=, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (]
[=, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (]
[NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !]
[isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&]
[(, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (]
[(, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (]
[), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||]
[;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !]
[;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !]
[NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (]
[isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,]
[isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,]
[||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =]
[mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (]
[mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (]
[(, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {]
[), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =]
[=, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (]
[if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {]
[n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =]
[n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =]
[n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =]
[isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +]
[isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +]
[isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +]
[{, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +, Token, ., name, (]
[{, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +, Token, ., name, (]
[{, msg, =, "The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +]
["The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }]
["The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }]
["The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }]
[getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (]
[getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (]
[., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (]
[(, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,]
[+, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,]
[;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,]
[), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (]
[., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !]
[., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !]
[., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (]
[,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {]
[,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {]
[,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, ., add, (]
[), {, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (]
[{, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !]
[{, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !]
[;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !, problemNodes, ., isEmpty, (, ), ), {]
[{, if, (, !, problemNodes, ., isEmpty, (, ), ), {, addExtern, (, ), ;, for, (, Node, n, :]
[isEmpty, (, ), ), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =]
[isEmpty, (, ), ), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =]
[isEmpty, (, ), ), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =]
[{, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =, IR, ., name, (]
[for, (, Node, n, :, problemNodes, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (]
[n, :, problemNodes, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;]
[n, :, problemNodes, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;]
[{, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;, name, ., putBooleanProp, (]
[{, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;, name, ., putBooleanProp, (]
[IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =]
[., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =]
[., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =]
[), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (]
[(, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (]
[IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;]
[IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;]
[;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (]
[;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (]
[IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[(, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[(, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[(, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;]
[Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;]
[true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (]
[., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n, ), ;, }]
[., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n, ), ;, }]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =]
[., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (]
[), ;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;]
[), ;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;]
[private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (]
[private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (]
[), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =]
[., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =]
[), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (]
[Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =]
[,, true, ), ;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (]
[;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;]
[var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;]
[;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (]
[;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (]
[new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (]
[., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =]
[., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =]
[., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;]
[., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;]
[., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;]
[., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (]
[), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (]
[input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, ), ;]
[input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, ), ;]
[}, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, StripProtection, (, AbstractCompiler, compiler, ), {]
[}, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, StripProtection, (, AbstractCompiler, compiler, ), {]
[extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, StripProtection, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, Node, target, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, Node, target, =]
[if, (, n, ., isCall, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, n, ., isCall, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, n, ., isCall, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&]
[), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&]
[), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&]
[getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (]
[., isName, (, ), &&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =]
[., isName, (, ), &&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =]
[., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;]
[., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;]
[(, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;]
[(, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;]
[{, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, ., replaceChild, (]
[expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, ., replaceChild, (, n, ,]
