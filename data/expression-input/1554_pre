[{, private, final, FlatFlowScopeCache, cache, ;, private, final, LinkedFlowScope, parent, ;, private, int, depth, ;, static, final, int, MAX_DEPTH, =]
[;, private, int, depth, ;, static, final, int, MAX_DEPTH, =, 250, ;, private, FlatFlowScopeCache, flattened, ;, private, boolean, frozen, =]
[private, boolean, frozen, =, false, ;, private, LinkedFlowSlot, lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {]
[private, boolean, frozen, =, false, ;, private, LinkedFlowSlot, lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {]
[false, ;, private, LinkedFlowSlot, lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =]
[lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache, ;, if, (]
[lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache, ;, if, (]
[private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache, ;, if, (, directParent, ==]
[FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache, ;, if, (, directParent, ==, null, ), {]
[FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache, ;, if, (, directParent, ==, null, ), {]
[directParent, ), {, this, ., cache, =, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =]
[{, this, ., cache, =, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;]
[{, this, ., cache, =, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;]
[=, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =]
[;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;]
[;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;]
[==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =]
[==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =]
[=, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {]
[=, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {]
[., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =]
[., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =]
[;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;]
[;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;]
[=, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =]
[=, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =]
[=, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =]
[;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +]
[else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;]
[else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;]
[lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;, this, ., parent, =]
[depth, +, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (]
[1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,]
[FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null, ), ;, }, LinkedFlowScope, (, LinkedFlowScope, directParent, ), {, this, (]
[FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null, ), ;, }, LinkedFlowScope, (, LinkedFlowScope, directParent, ), {, this, (]
[this, (, cache, ,, null, ), ;, }, LinkedFlowScope, (, LinkedFlowScope, directParent, ), {, this, (, directParent, ., cache, ,]
[directParent, ), {, this, (, directParent, ., cache, ,, directParent, ), ;, }, private, Scope, getFunctionScope, (, ), {, return]
[directParent, ), {, this, (, directParent, ., cache, ,, directParent, ), ;, }, private, Scope, getFunctionScope, (, ), {, return]
[}, private, Scope, getFunctionScope, (, ), {, return, cache, ., functionScope, ;, }, private, boolean, flowsFromBottom, (, ), {, return]
[}, private, Scope, getFunctionScope, (, ), {, return, cache, ., functionScope, ;, }, private, boolean, flowsFromBottom, (, ), {, return]
[return, getFunctionScope, (, ), ., isBottom, (, ), ;, }, public, static, LinkedFlowScope, createEntryLattice, (, Scope, scope, ), {, return]
[), ., isBottom, (, ), ;, }, public, static, LinkedFlowScope, createEntryLattice, (, Scope, scope, ), {, return, new, LinkedFlowScope, (]
[(, ), ;, }, public, static, LinkedFlowScope, createEntryLattice, (, Scope, scope, ), {, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (]
[FlatFlowScopeCache, (, scope, ), ), ;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {]
[FlatFlowScopeCache, (, scope, ), ), ;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {]
[), ;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (, !]
[Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (, !, frozen, ), ;]
[void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =]
[String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (]
[,, JSType, type, ), {, Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,]
[type, ), {, Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,]
[Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;]
[Preconditions, ., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;]
[(, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;]
[(, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;]
[(, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;]
[=, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols, ., add, (]
[public, void, inferQualifiedSlot, (, Node, node, ,, String, symbol, ,, JSType, bottomType, ,, JSType, inferredType, ), {, Scope, functionScope, =]
[,, String, symbol, ,, JSType, bottomType, ,, JSType, inferredType, ), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (]
[,, String, symbol, ,, JSType, bottomType, ,, JSType, inferredType, ), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (]
[), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (]
[), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (]
[), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (]
[), {, Scope, functionScope, =, getFunctionScope, (, ), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (]
[=, getFunctionScope, (, ), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (]
[), ;, if, (, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==]
[if, (, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&]
[(, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !]
[(, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !]
[{, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {]
[{, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {]
[., getVar, (, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (]
[(, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,]
[), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,]
[null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,]
[., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }]
[(, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (]
[), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,]
[;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[{, return, cache, ., functionScope, ., getTypeOfThis, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[{, return, cache, ., functionScope, ., getTypeOfThis, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[(, ), ., getRootNode, (, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return]
[(, ), ., getRootNode, (, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return]
[getParentScope, (, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (]
[getParentScope, (, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (]
[getParentScope, (, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (]
[Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, cache, ., dirtySymbols, ., contains, (]
[name, ), {, if, (, cache, ., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =]
[{, if, (, cache, ., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;]
[{, if, (, cache, ., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;]
[(, cache, ., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=]
[., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;]
[., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =]
[., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =]
[for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (]
[for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (]
[for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (]
[!=, null, ;, slot, =, slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (]
[slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (, name, ), ), {, return]
[(, slot, ., getName, (, ), ., equals, (, name, ), ), {, return, slot, ;, }, }, }, return]
[(, slot, ., getName, (, ), ., equals, (, name, ), ), {, return, slot, ;, }, }, }, return]
[(, ), ., equals, (, name, ), ), {, return, slot, ;, }, }, }, return, cache, ., getSlot, (]
[getSlot, (, name, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getOwnSlot, (, String, name, ), {, throw]
[(, String, name, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {]
[name, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =]
[new, UnsupportedOperationException, (, ), ;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (]
[new, UnsupportedOperationException, (, ), ;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (]
[(, ), ;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (, depth, >]
[Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (]
[Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (]
[FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==]
[), {, frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {]
[frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =]
[;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (]
[MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return]
[if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (]
[), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return]
[=, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return, new, LinkedFlowScope, (]
[}, @, Override, public, StaticSlot, <, JSType, >, findUniqueRefinedSlot, (, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >, result, =]
[>, findUniqueRefinedSlot, (, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =]
[(, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;]
[(, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;]
[blindScope, ), {, StaticSlot, <, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;, currentScope, !=]
[{, StaticSlot, <, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;, currentScope, !=, blindScope, ;]
[<, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;, currentScope, !=, blindScope, ;, currentScope, =]
[<, JSType, >, result, =, null, ;, for, (, LinkedFlowScope, currentScope, =, this, ;, currentScope, !=, blindScope, ;, currentScope, =]
[currentScope, =, this, ;, currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =]
[currentScope, =, this, ;, currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =]
[currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;]
[currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;]
[currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;]
[blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=]
[currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&]
[=, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (]
[=, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (]
[=, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (]
[=, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (]
[), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==]
[for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||]
[for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||]
[for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||]
[for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||]
[., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=]
[currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;]
[null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =]
[null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =]
[null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (]
[null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (]
[currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==]
[., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {]
[!=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =]
[currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (]
[., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !]
[., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !]
[., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !]
[null, ), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (]
[null, ), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (]
[if, (, !, currentSlot, ., getName, (, ), ., equals, (, result, ., getName, (, ), ), ), {, return]
[(, ), ., equals, (, result, ., getName, (, ), ), ), {, return, null, ;, }, }, }, return]
[return, result, ;, }, @, Override, public, void, completeScope, (, StaticScope, <, JSType, >, staticScope, ), {, Scope, scope, =]
[}, @, Override, public, void, completeScope, (, StaticScope, <, JSType, >, staticScope, ), {, Scope, scope, =, (, Scope, )]
[>, staticScope, ), {, Scope, scope, =, (, Scope, ), staticScope, ;, for, (, Iterator, <, Var, >, it, =]
[>, staticScope, ), {, Scope, scope, =, (, Scope, ), staticScope, ;, for, (, Iterator, <, Var, >, it, =]
[=, (, Scope, ), staticScope, ;, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;]
[=, (, Scope, ), staticScope, ;, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;]
[>, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[>, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (]
[var, =, it, ., next, (, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =]
[var, =, it, ., next, (, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =]
[if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (]
[if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (]
[if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (]
[var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, ==]
[isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ||]
[isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ||]
[getType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =]
[getType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =]
[), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (]
[), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (]
[(, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (, ), ;]
[(, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (, ), ;]
[JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (, ), ;, var, ., setType, (]
[flowType, ), ;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (]
[;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =]
[}, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;]
[}, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;]
[}, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;]
[}, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;]
[Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=]
[LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&]
[LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&]
[LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&]
[{, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==]
[{, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==]
[{, LinkedFlowScope, current, ;, for, (, current, =, this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==]
[current, =, this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;]
[this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =]
[this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =]
[&&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return]
[., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope, >, {]
[{, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope, >, {, @, SuppressWarnings, (]
[SuppressWarnings, (, "unchecked", ), @, Override, public, FlowScope, apply, (, FlowScope, a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =]
[), @, Override, public, FlowScope, apply, (, FlowScope, a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, )]
[apply, (, FlowScope, a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =]
[a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, )]
[FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;]
[FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;]
[LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =]
[=, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;]
[=, (, LinkedFlowScope, ), a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;]
[a, ;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =]
[=, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (]
[=, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (]
[=, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (]
[linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==]
[linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==]
[frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return]
[frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return]
[optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return]
[==, linkedB, ., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (]
[optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (]
[), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, linkedA, ,]
[linkedA, ,, linkedB, ), ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[linkedA, ,, linkedB, ), ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[@, Override, public, boolean, equals, (, Object, other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =]
[boolean, equals, (, Object, other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, )]
[other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (]
[other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (]
[other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (]
[instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (, this, ., optimize, (, ), ==]
[instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (, this, ., optimize, (, ), ==]
[LinkedFlowScope, ), other, ;, if, (, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return]
[(, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (]
[(, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (]
[(, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (]
[==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=]
[==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=]
[return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return]
[(, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (]
[(, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (]
[., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (, cache, ==]
[., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (, cache, ==]
[), {, return, false, ;, }, if, (, cache, ==, that, ., cache, ), {, for, (, String, name, :]
[), {, return, false, ;, }, if, (, cache, ==, that, ., cache, ), {, for, (, String, name, :]
[(, cache, ==, that, ., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (]
[==, that, ., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (]
[., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (]
[{, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, ), ,]
[{, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, ), ,]
[name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, ), ,, that, ., getSlot, (]
[{, if, (, diffSlots, (, getSlot, (, name, ), ,, that, ., getSlot, (, name, ), ), ), {, return]
[getSlot, (, name, ), ,, that, ., getSlot, (, name, ), ), ), {, return, false, ;, }, }, return]
[return, false, ;, }, }, return, true, ;, }, Map, <, String, ,, StaticSlot, <, JSType, >, >, myFlowSlots, =]
[JSType, >, >, myFlowSlots, =, allFlowSlots, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, otherFlowSlots, =]
[JSType, >, >, myFlowSlots, =, allFlowSlots, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, otherFlowSlots, =]
[<, JSType, >, >, otherFlowSlots, =, that, ., allFlowSlots, (, ), ;, for, (, StaticSlot, <, JSType, >, slot, :]
[<, JSType, >, >, otherFlowSlots, =, that, ., allFlowSlots, (, ), ;, for, (, StaticSlot, <, JSType, >, slot, :]
[(, ), ;, for, (, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {, if, (]
[;, for, (, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (]
[(, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,]
[(, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,]
[>, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,, otherFlowSlots, ., get, (]
[>, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,, otherFlowSlots, ., get, (]
[if, (, diffSlots, (, slot, ,, otherFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return]
[(, slot, ,, otherFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }]
[(, slot, ,, otherFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }]
[., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, otherFlowSlots, ., remove, (]
[., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, otherFlowSlots, ., remove, (]
[otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }, for, (, StaticSlot, <, JSType, >, slot, :]
[otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }, for, (, StaticSlot, <, JSType, >, slot, :]
[), ;, }, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (]
[}, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (]
[(, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,]
[(, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,]
[>, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,, myFlowSlots, ., get, (]
[>, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (, slot, ,, myFlowSlots, ., get, (]
[if, (, diffSlots, (, slot, ,, myFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return]
[,, myFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, }, return]
[(, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, }, return, true, ;, }, return]
[private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =]
[private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =]
[private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =]
[diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =, slotA, ==]
[StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =, slotA, ==, null, ||]
[StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =, slotA, ==, null, ||]
[StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =, slotA, ==, null, ||]
[StaticSlot, <, JSType, >, slotB, ), {, boolean, aIsNull, =, slotA, ==, null, ||, slotA, ., getType, (, ), ==]
[), {, boolean, aIsNull, =, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =]
[), {, boolean, aIsNull, =, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =]
[), {, boolean, aIsNull, =, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =]
[boolean, aIsNull, =, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==]
[=, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||]
[=, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||]
[=, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||]
[., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==]
[==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (]
[==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (]
[;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&]
[slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return]
[getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (]
[getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (]
[), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^]
[if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return]
[bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return]
[bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return]
[bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return]
[if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return, slotA, ., getType, (, ), ., differsFrom, (]
[if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return, slotA, ., getType, (, ), ., differsFrom, (]
[StaticSlot, <, JSType, >, >, allFlowSlots, (, ), {, Map, <, String, ,, StaticSlot, <, JSType, >, >, slots, =]
[StaticSlot, <, JSType, >, >, allFlowSlots, (, ), {, Map, <, String, ,, StaticSlot, <, JSType, >, >, slots, =]
[String, ,, StaticSlot, <, JSType, >, >, slots, =, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =]
[StaticSlot, <, JSType, >, >, slots, =, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;]
[StaticSlot, <, JSType, >, >, slots, =, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;]
[JSType, >, >, slots, =, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=]
[>, slots, =, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;]
[=, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =]
[=, Maps, ., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =]
[for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (]
[(, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, !]
[(, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, !]
[lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (]
[lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (]
[slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {]
[slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {]
[{, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {, slots, ., put, (]
[{, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {, slots, ., put, (]
[containsKey, (, slot, ., getName, (, ), ), ), {, slots, ., put, (, slot, ., getName, (, ), ,]
[slot, ), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :]
[slot, ), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :]
[slot, ), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :]
[String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :, cache, ., symbols, ., entrySet, (, ), ), {, if, (]
[,, StaticSlot, <, JSType, >, >, symbolEntry, :, cache, ., symbols, ., entrySet, (, ), ), {, if, (, !]
[,, StaticSlot, <, JSType, >, >, symbolEntry, :, cache, ., symbols, ., entrySet, (, ), ), {, if, (, !]
[>, >, symbolEntry, :, cache, ., symbols, ., entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (]
[>, >, symbolEntry, :, cache, ., symbols, ., entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (]
[entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {]
[entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {]
[{, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put, (]
[{, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put, (]
[containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,]
[containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,]
[slots, ., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;, }, }, return]
[SimpleSlot, {, final, LinkedFlowSlot, parent, ;, LinkedFlowSlot, (, String, name, ,, JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (]
[final, LinkedFlowSlot, parent, ;, LinkedFlowSlot, (, String, name, ,, JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (, name, ,]
[parent, ;, LinkedFlowSlot, (, String, name, ,, JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (, name, ,, type, ,]
[(, String, name, ,, JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (, name, ,, type, ,, true, ), ;]
[(, String, name, ,, JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (, name, ,, type, ,, true, ), ;]
[JSType, type, ,, LinkedFlowSlot, parent, ), {, super, (, name, ,, type, ,, true, ), ;, this, ., parent, =]
[Scope, functionScope, ;, private, final, LinkedFlowScope, linkedEquivalent, ;, private, Map, <, String, ,, StaticSlot, <, JSType, >, >, symbols, =]
[Scope, functionScope, ;, private, final, LinkedFlowScope, linkedEquivalent, ;, private, Map, <, String, ,, StaticSlot, <, JSType, >, >, symbols, =]
[StaticSlot, <, JSType, >, >, symbols, =, Maps, ., newHashMap, (, ), ;, final, Set, <, String, >, dirtySymbols, =]
[StaticSlot, <, JSType, >, >, symbols, =, Maps, ., newHashMap, (, ), ;, final, Set, <, String, >, dirtySymbols, =]
[;, final, Set, <, String, >, dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {]
[;, final, Set, <, String, >, dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {]
[String, >, dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =]
[dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;]
[Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =]
[Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =]
[FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =, ImmutableMap, ., of, (, ), ;]
[Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =, ImmutableMap, ., of, (, ), ;, linkedEquivalent, =]
[ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =]
[ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =]
[), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;]
[linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =]
[linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =]
[}, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =, cache, ., functionScope, ;]
[(, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =, cache, ., functionScope, ;, symbols, =]
[(, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =, cache, ., functionScope, ;, symbols, =]
[cache, =, directParent, ., cache, ;, functionScope, =, cache, ., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;]
[directParent, ., cache, ;, functionScope, =, cache, ., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =]
[directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {]
[allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =]
[), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;]
[linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =]
[linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =]
[linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =]
[(, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?]
[(, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?]
[), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :]
[), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :]
[(, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =]
[(, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =]
[>, slotsA, =, joinedScopeA, ., allFlowSlots, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =]
[>, slotsA, =, joinedScopeA, ., allFlowSlots, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =]
[(, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =, joinedScopeB, ., allFlowSlots, (, ), ;]
[;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =, joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =]
[>, >, slotsB, =, joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =]
[>, >, slotsB, =, joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =]
[joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (]
[joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (]
[=, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;]
[=, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;]
[<, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;, symbolNames, ., addAll, (]
[<, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;, symbolNames, ., addAll, (]
[(, ), ), ;, symbolNames, ., addAll, (, slotsB, ., keySet, (, ), ), ;, for, (, String, name, :]
[., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =]
[., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =]
[), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (]
[{, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (, name, ), ;, StaticSlot, <, JSType, >, slotB, =]
[{, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (, name, ), ;, StaticSlot, <, JSType, >, slotB, =]
[>, slotA, =, slotsA, ., get, (, name, ), ;, StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (]
[(, name, ), ;, StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =]
[StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (]
[StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (]
[StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (]
[JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==]
[slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||]
[slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||]
[slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||]
[name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||, slotB, ., getType, (, ), ==]
[(, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==]
[fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?]
[joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :]
[joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :]
[name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (]
[name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (]
[;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==]
[null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {]
[null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =]
[null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =]
[null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =]
[if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (]
[else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (]
[else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (]
[else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (]
[joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==]
[slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||]
[slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||]
[slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||]
[getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||, slotA, ., getType, (, ), ==]
[(, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =]
[(, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =]
[JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==]
[fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?]
[joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :]
[joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :]
[name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (]
[name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (]
[;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==]
[=, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {]
[=, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {]
[?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (]
[:, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,]
[;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {]
[(, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =]
[(, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =]
[(, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =]
[put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (]
[}, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {]
[{, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =]
[{, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =]
[{, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =]
[., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (]
[., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (]
[joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (]
[joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (]
[slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=]
[(, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {]
[(, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {]
[(, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (]
[., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,]
[), ), ;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (]
[;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,]
[if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, joinedType, ,]
[true, ), ), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (]
[true, ), ), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (]
[}, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, symbols, ., containsKey, (]
[<, JSType, >, getSlot, (, String, name, ), {, if, (, symbols, ., containsKey, (, name, ), ), {, return]
[<, JSType, >, getSlot, (, String, name, ), {, if, (, symbols, ., containsKey, (, name, ), ), {, return]
[(, String, name, ), {, if, (, symbols, ., containsKey, (, name, ), ), {, return, symbols, ., get, (]
[symbols, ., containsKey, (, name, ), ), {, return, symbols, ., get, (, name, ), ;, }, else, {, return]
[symbols, ., containsKey, (, name, ), ), {, return, symbols, ., get, (, name, ), ;, }, else, {, return]
[name, ), ), {, return, symbols, ., get, (, name, ), ;, }, else, {, return, functionScope, ., getSlot, (]
