[;, private, int, count, ;, private, double, startBoundary, ;, private, double, endBoundary, ;, public, HistogramBin, (, double, startBoundary, ,, double]
[), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =]
[>, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =]
[;, }, this, ., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;]
[), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary]
[=, 0, ;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (]
[., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int]
[;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {]
[=, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return, this, ., count]
[., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return, this]
[;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }]
[=, endBoundary, ;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void, incrementCount, (]
[., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void]
[;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void, incrementCount, (, ), {]
[;, }, public, void, incrementCount, (, ), {, this, ., count, ++, ;, }, public, double, getStartBoundary, (, ), {]
[., count, ;, }, public, void, incrementCount, (, ), {, this, ., count, ++, ;, }, public, double, getStartBoundary, (]
[;, }, public, double, getStartBoundary, (, ), {, return, this, ., startBoundary, ;, }, public, double, getEndBoundary, (, ), {]
[++, ;, }, public, double, getStartBoundary, (, ), {, return, this, ., startBoundary, ;, }, public, double, getEndBoundary, (, )]
[., count, ++, ;, }, public, double, getStartBoundary, (, ), {, return, this, ., startBoundary, ;, }, public, double, getEndBoundary]
[;, }, public, double, getEndBoundary, (, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {]
[., startBoundary, ;, }, public, double, getEndBoundary, (, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (]
[;, }, public, double, getBinWidth, (, ), {, return, this, ., endBoundary, -, this, ., startBoundary, ;, }, public, boolean]
[., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return, this, ., endBoundary, -, this, ., startBoundary, ;, }]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return, false, ;]
[-, this, ., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, )]
[., endBoundary, -, this, ., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return, false, ;]
[., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return]
[), {, return, false, ;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj]
[==, null, ), {, return, false, ;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if]
[), {, return, false, ;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj]
[;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {]
[), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj]
[==, this, ), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin]
[), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj]
[;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =]
[), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary]
[instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this]
[;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this]
[;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this]
[;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this]
[==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin]
[., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2]
[;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this]
[., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count]
[;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1, &&, b2, ;, }]
[==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1]
[., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0]
[;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1, &&, b2, ;, }]
[., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1, &&, b2]
[;, return, b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[==, this, ., count, ;, return, b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone]
[., count, ==, this, ., count, ;, return, b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public]
[;, return, b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[., count, ;, return, b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, )]
[;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, )]
[&&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone]
[&&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super]
[&&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone]
[;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, )]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, }]
[;, }, }]
[., clone, (, ), ;, }, }]
