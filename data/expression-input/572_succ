[;, private, static, final, int, STATE_UNSTARTED, =, 0, ;, private, static, final, int, STATE_RUNNING, =, 1, ;, private, static, final]
[;, private, static, final, int, STATE_RUNNING, =, 1, ;, private, static, final, int, STATE_STOPPED, =, 2, ;, private, static, final]
[;, private, static, final, int, STATE_STOPPED, =, 2, ;, private, static, final, int, STATE_SUSPENDED, =, 3, ;, private, static, final]
[;, private, static, final, int, STATE_SUSPENDED, =, 3, ;, private, static, final, int, STATE_UNSPLIT, =, 10, ;, private, static, final]
[;, private, static, final, int, STATE_UNSPLIT, =, 10, ;, private, static, final, int, STATE_SPLIT, =, 11, ;, private, int, runningState]
[;, private, static, final, int, STATE_SPLIT, =, 11, ;, private, int, runningState, =, STATE_UNSTARTED, ;, private, int, splitState, =, STATE_UNSPLIT]
[;, private, int, runningState, =, STATE_UNSTARTED, ;, private, int, splitState, =, STATE_UNSPLIT, ;, private, long, startTime, ;, private, long, startTimeMillis]
[;, private, int, splitState, =, STATE_UNSPLIT, ;, private, long, startTime, ;, private, long, startTimeMillis, ;, private, long, stopTime, ;, public]
[;, private, long, startTime, ;, private, long, startTimeMillis, ;, private, long, stopTime, ;, public, StopWatch, (, ), {, super, (]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be reset before being restarted. ", ), ;, }, if, (, this, ., runningState, !=, STATE_UNSTARTED, ), {, throw]
[==, STATE_STOPPED, ), {, throw, new, IllegalStateException, (, "Stopwatch must be reset before being restarted. ", ), ;, }, if, (, this, ., runningState, !=, STATE_UNSTARTED, )]
[., runningState, ==, STATE_STOPPED, ), {, throw, new, IllegalStateException, (, "Stopwatch must be reset before being restarted. ", ), ;, }, if, (, this, ., runningState, !=]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be reset before being restarted. ", ), ;, }, if, (, this, ., runningState, !=, STATE_UNSTARTED, ), {, throw]
[;, }, if, (, this, ., runningState, !=, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }, this]
[), ;, }, if, (, this, ., runningState, !=, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }]
[), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }, this, ., startTime, =, System, ., nanoTime, (, ), ;]
[!=, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }, this, ., startTime, =, System, ., nanoTime, (]
[., runningState, !=, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }, this, ., startTime, =, System, .]
[), {, throw, new, IllegalStateException, (, "Stopwatch already started. ", ), ;, }, this, ., startTime, =, System, ., nanoTime, (, ), ;]
[;, }, this, ., startTime, =, System, ., nanoTime, (, ), ;, this, ., startTimeMillis, =, System, ., currentTimeMillis, (]
[), ;, }, this, ., startTime, =, System, ., nanoTime, (, ), ;, this, ., startTimeMillis, =, System, ., currentTimeMillis]
[=, System, ., nanoTime, (, ), ;, this, ., startTimeMillis, =, System, ., currentTimeMillis, (, ), ;, this, ., runningState]
[., startTime, =, System, ., nanoTime, (, ), ;, this, ., startTimeMillis, =, System, ., currentTimeMillis, (, ), ;, this]
[;, this, ., startTimeMillis, =, System, ., currentTimeMillis, (, ), ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, void]
[., nanoTime, (, ), ;, this, ., startTimeMillis, =, System, ., currentTimeMillis, (, ), ;, this, ., runningState, =, STATE_RUNNING]
[=, System, ., currentTimeMillis, (, ), ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, void, stop, (, ), {]
[., startTimeMillis, =, System, ., currentTimeMillis, (, ), ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, void, stop, (]
[;, this, ., runningState, =, STATE_RUNNING, ;, }, public, void, stop, (, ), {, if, (, this, ., runningState, !=]
[., currentTimeMillis, (, ), ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, void, stop, (, ), {, if, (]
[=, STATE_RUNNING, ;, }, public, void, stop, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, &&, this, .]
[., runningState, =, STATE_RUNNING, ;, }, public, void, stop, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, &&]
[;, }, public, void, stop, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, &&, this, ., runningState, !=]
[), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, this]
[&&, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, .]
[!=, STATE_RUNNING, &&, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (]
[., runningState, !=, STATE_RUNNING, &&, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }]
[&&, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, .]
[), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, this]
[!=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, ., runningState, ==, STATE_RUNNING, )]
[., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, ., runningState, ==]
[), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, this]
[;, }, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, this, ., stopTime, =, System, ., nanoTime, (, )]
[), ;, }, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, this, ., stopTime, =, System, ., nanoTime, (]
[), {, this, ., stopTime, =, System, ., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED, ;, }]
[==, STATE_RUNNING, ), {, this, ., stopTime, =, System, ., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED]
[., runningState, ==, STATE_RUNNING, ), {, this, ., stopTime, =, System, ., nanoTime, (, ), ;, }, this, ., runningState]
[), {, this, ., stopTime, =, System, ., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED, ;, }]
[=, System, ., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED, ;, }, public, void, reset, (, )]
[., stopTime, =, System, ., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED, ;, }, public, void, reset]
[;, }, this, ., runningState, =, STATE_STOPPED, ;, }, public, void, reset, (, ), {, this, ., runningState, =, STATE_UNSTARTED]
[., nanoTime, (, ), ;, }, this, ., runningState, =, STATE_STOPPED, ;, }, public, void, reset, (, ), {, this]
[=, STATE_STOPPED, ;, }, public, void, reset, (, ), {, this, ., runningState, =, STATE_UNSTARTED, ;, this, ., splitState, =]
[., runningState, =, STATE_STOPPED, ;, }, public, void, reset, (, ), {, this, ., runningState, =, STATE_UNSTARTED, ;, this, .]
[;, }, public, void, reset, (, ), {, this, ., runningState, =, STATE_UNSTARTED, ;, this, ., splitState, =, STATE_UNSPLIT, ;]
[=, STATE_UNSTARTED, ;, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, split, (, ), {, if, (, this, .]
[., runningState, =, STATE_UNSTARTED, ;, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, split, (, ), {, if, (]
[;, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, split, (, ), {, if, (, this, ., runningState, !=]
[=, STATE_UNSPLIT, ;, }, public, void, split, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, ), {, throw]
[., splitState, =, STATE_UNSPLIT, ;, }, public, void, split, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, )]
[;, }, public, void, split, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, ), {, throw, new, IllegalStateException]
[), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;]
[!=, STATE_RUNNING, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (]
[., runningState, !=, STATE_RUNNING, ), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, this, ., stopTime, =, System, .]
[), {, throw, new, IllegalStateException, (, "Stopwatch is not running. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;]
[;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;, this, ., splitState, =, STATE_SPLIT, ;, }, public]
[), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;, this, ., splitState, =, STATE_SPLIT, ;, }]
[=, System, ., nanoTime, (, ), ;, this, ., splitState, =, STATE_SPLIT, ;, }, public, void, unsplit, (, ), {]
[., stopTime, =, System, ., nanoTime, (, ), ;, this, ., splitState, =, STATE_SPLIT, ;, }, public, void, unsplit, (]
[;, this, ., splitState, =, STATE_SPLIT, ;, }, public, void, unsplit, (, ), {, if, (, this, ., splitState, !=]
[., nanoTime, (, ), ;, this, ., splitState, =, STATE_SPLIT, ;, }, public, void, unsplit, (, ), {, if, (]
[=, STATE_SPLIT, ;, }, public, void, unsplit, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, ), {, throw]
[., splitState, =, STATE_SPLIT, ;, }, public, void, unsplit, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, )]
[;, }, public, void, unsplit, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, ), {, throw, new, IllegalStateException]
[), {, throw, new, IllegalStateException, (, "Stopwatch has not been split. ", ), ;, }, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, suspend]
[!=, STATE_SPLIT, ), {, throw, new, IllegalStateException, (, "Stopwatch has not been split. ", ), ;, }, this, ., splitState, =, STATE_UNSPLIT, ;, }, public]
[., splitState, !=, STATE_SPLIT, ), {, throw, new, IllegalStateException, (, "Stopwatch has not been split. ", ), ;, }, this, ., splitState, =, STATE_UNSPLIT, ;]
[), {, throw, new, IllegalStateException, (, "Stopwatch has not been split. ", ), ;, }, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, suspend]
[;, }, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, suspend, (, ), {, if, (, this, ., runningState]
[), ;, }, this, ., splitState, =, STATE_UNSPLIT, ;, }, public, void, suspend, (, ), {, if, (, this, .]
[=, STATE_UNSPLIT, ;, }, public, void, suspend, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, ), {, throw]
[., splitState, =, STATE_UNSPLIT, ;, }, public, void, suspend, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, )]
[;, }, public, void, suspend, (, ), {, if, (, this, ., runningState, !=, STATE_RUNNING, ), {, throw, new, IllegalStateException]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be running to suspend. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;]
[!=, STATE_RUNNING, ), {, throw, new, IllegalStateException, (, "Stopwatch must be running to suspend. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (]
[., runningState, !=, STATE_RUNNING, ), {, throw, new, IllegalStateException, (, "Stopwatch must be running to suspend. ", ), ;, }, this, ., stopTime, =, System, .]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be running to suspend. ", ), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;]
[;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;, this, ., runningState, =, STATE_SUSPENDED, ;, }, public]
[), ;, }, this, ., stopTime, =, System, ., nanoTime, (, ), ;, this, ., runningState, =, STATE_SUSPENDED, ;, }]
[=, System, ., nanoTime, (, ), ;, this, ., runningState, =, STATE_SUSPENDED, ;, }, public, void, resume, (, ), {]
[., stopTime, =, System, ., nanoTime, (, ), ;, this, ., runningState, =, STATE_SUSPENDED, ;, }, public, void, resume, (]
[;, this, ., runningState, =, STATE_SUSPENDED, ;, }, public, void, resume, (, ), {, if, (, this, ., runningState, !=]
[., nanoTime, (, ), ;, this, ., runningState, =, STATE_SUSPENDED, ;, }, public, void, resume, (, ), {, if, (]
[=, STATE_SUSPENDED, ;, }, public, void, resume, (, ), {, if, (, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw]
[., runningState, =, STATE_SUSPENDED, ;, }, public, void, resume, (, ), {, if, (, this, ., runningState, !=, STATE_SUSPENDED, )]
[;, }, public, void, resume, (, ), {, if, (, this, ., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be suspended to resume. ", ), ;, }, this, ., startTime, +=, System, ., nanoTime, (, ), -]
[!=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch must be suspended to resume. ", ), ;, }, this, ., startTime, +=, System, ., nanoTime, (]
[., runningState, !=, STATE_SUSPENDED, ), {, throw, new, IllegalStateException, (, "Stopwatch must be suspended to resume. ", ), ;, }, this, ., startTime, +=, System, .]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be suspended to resume. ", ), ;, }, this, ., startTime, +=, System, ., nanoTime, (, ), -]
[;, }, this, ., startTime, +=, System, ., nanoTime, (, ), -, this, ., stopTime, ;, this, ., runningState, =]
[), ;, }, this, ., startTime, +=, System, ., nanoTime, (, ), -, this, ., stopTime, ;, this, ., runningState]
[+=, System, ., nanoTime, (, ), -, this, ., stopTime, ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long]
[., startTime, +=, System, ., nanoTime, (, ), -, this, ., stopTime, ;, this, ., runningState, =, STATE_RUNNING, ;, }]
[;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime, (, ), /, NANO_2_MILLIS]
[-, this, ., stopTime, ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime]
[., nanoTime, (, ), -, this, ., stopTime, ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (]
[;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime, (, ), /, NANO_2_MILLIS]
[., stopTime, ;, this, ., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime, (, )]
[=, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime, (, ), /, NANO_2_MILLIS, ;, }, public, long]
[., runningState, =, STATE_RUNNING, ;, }, public, long, getTime, (, ), {, return, getNanoTime, (, ), /, NANO_2_MILLIS, ;, }]
[;, }, public, long, getTime, (, ), {, return, getNanoTime, (, ), /, NANO_2_MILLIS, ;, }, public, long, getNanoTime, (]
[;, }, public, long, getNanoTime, (, ), {, if, (, this, ., runningState, ==, STATE_STOPPED, ||, this, ., runningState, ==]
[/, NANO_2_MILLIS, ;, }, public, long, getNanoTime, (, ), {, if, (, this, ., runningState, ==, STATE_STOPPED, ||, this, .]
[;, }, public, long, getNanoTime, (, ), {, if, (, this, ., runningState, ==, STATE_STOPPED, ||, this, ., runningState, ==]
[), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED]
[||, this, ., runningState, ==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if]
[==, STATE_STOPPED, ||, this, ., runningState, ==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime, ;, }]
[., runningState, ==, STATE_STOPPED, ||, this, ., runningState, ==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime]
[||, this, ., runningState, ==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if]
[), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED]
[==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if, (, this, ., runningState]
[., runningState, ==, STATE_SUSPENDED, ), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if, (, this]
[), {, return, this, ., stopTime, -, this, ., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED]
[;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, return, 0, ;, }, else, if, (, this]
[-, this, ., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, return, 0, ;, }]
[., stopTime, -, this, ., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, return, 0]
[;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, return, 0, ;, }, else, if, (, this]
[., startTime, ;, }, else, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, return, 0, ;, }, else, if]
[), {, return, 0, ;, }, else, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, return, System, ., nanoTime]
[==, STATE_UNSTARTED, ), {, return, 0, ;, }, else, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, return, System]
[., runningState, ==, STATE_UNSTARTED, ), {, return, 0, ;, }, else, if, (, this, ., runningState, ==, STATE_RUNNING, ), {]
[), {, return, 0, ;, }, else, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, return, System, ., nanoTime]
[;, }, else, if, (, this, ., runningState, ==, STATE_RUNNING, ), {, return, System, ., nanoTime, (, ), -, this]
[), {, return, System, ., nanoTime, (, ), -, this, ., startTime, ;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", )]
[==, STATE_RUNNING, ), {, return, System, ., nanoTime, (, ), -, this, ., startTime, ;, }, throw, new, RuntimeException, (]
[., runningState, ==, STATE_RUNNING, ), {, return, System, ., nanoTime, (, ), -, this, ., startTime, ;, }, throw, new]
[), {, return, System, ., nanoTime, (, ), -, this, ., startTime, ;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", )]
[;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", ), ;, }, public, long, getSplitTime, (, ), {, return, getSplitNanoTime, (, )]
[-, this, ., startTime, ;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", ), ;, }, public, long, getSplitTime, (, ), {]
[., nanoTime, (, ), -, this, ., startTime, ;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", ), ;, }, public, long]
[;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", ), ;, }, public, long, getSplitTime, (, ), {, return, getSplitNanoTime, (, )]
[., startTime, ;, }, throw, new, RuntimeException, (, "Illegal running state has occurred.", ), ;, }, public, long, getSplitTime, (, ), {, return, getSplitNanoTime]
[;, }, public, long, getSplitTime, (, ), {, return, getSplitNanoTime, (, ), /, NANO_2_MILLIS, ;, }, public, long, getSplitNanoTime, (]
[), ;, }, public, long, getSplitTime, (, ), {, return, getSplitNanoTime, (, ), /, NANO_2_MILLIS, ;, }, public, long, getSplitNanoTime]
[;, }, public, long, getSplitNanoTime, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, ), {, throw, new, IllegalStateException]
[/, NANO_2_MILLIS, ;, }, public, long, getSplitNanoTime, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, ), {, throw]
[;, }, public, long, getSplitNanoTime, (, ), {, if, (, this, ., splitState, !=, STATE_SPLIT, ), {, throw, new, IllegalStateException]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be split to get the split time. ", ), ;, }, return, this, ., stopTime, -, this, ., startTime, ;, }]
[!=, STATE_SPLIT, ), {, throw, new, IllegalStateException, (, "Stopwatch must be split to get the split time. ", ), ;, }, return, this, ., stopTime, -, this, ., startTime]
[., splitState, !=, STATE_SPLIT, ), {, throw, new, IllegalStateException, (, "Stopwatch must be split to get the split time. ", ), ;, }, return, this, ., stopTime, -, this]
[), {, throw, new, IllegalStateException, (, "Stopwatch must be split to get the split time. ", ), ;, }, return, this, ., stopTime, -, this, ., startTime, ;, }]
[;, }, return, this, ., stopTime, -, this, ., startTime, ;, }, public, long, getStartTime, (, ), {, if, (]
[), ;, }, return, this, ., stopTime, -, this, ., startTime, ;, }, public, long, getStartTime, (, ), {, if]
[;, }, public, long, getStartTime, (, ), {, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, throw, new, IllegalStateException]
[-, this, ., startTime, ;, }, public, long, getStartTime, (, ), {, if, (, this, ., runningState, ==, STATE_UNSTARTED, )]
[., stopTime, -, this, ., startTime, ;, }, public, long, getStartTime, (, ), {, if, (, this, ., runningState, ==]
[;, }, public, long, getStartTime, (, ), {, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, throw, new, IllegalStateException]
[., startTime, ;, }, public, long, getStartTime, (, ), {, if, (, this, ., runningState, ==, STATE_UNSTARTED, ), {, throw]
[), {, throw, new, IllegalStateException, (, "Stopwatch has not been started", ), ;, }, return, this, ., startTimeMillis, ;, }, @, Override, public, String]
[==, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch has not been started", ), ;, }, return, this, ., startTimeMillis, ;, }, @, Override]
[., runningState, ==, STATE_UNSTARTED, ), {, throw, new, IllegalStateException, (, "Stopwatch has not been started", ), ;, }, return, this, ., startTimeMillis, ;, }]
[), {, throw, new, IllegalStateException, (, "Stopwatch has not been started", ), ;, }, return, this, ., startTimeMillis, ;, }, @, Override, public, String]
[;, }, return, this, ., startTimeMillis, ;, }, @, Override, public, String, toString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS]
[), ;, }, return, this, ., startTimeMillis, ;, }, @, Override, public, String, toString, (, ), {, return, DurationFormatUtils, .]
[;, }, @, Override, public, String, toString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS, (, getTime, (, ), ), ;]
[., startTimeMillis, ;, }, @, Override, public, String, toString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS, (, getTime, (, )]
[;, }, public, String, toSplitString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS, (, getSplitTime, (, ), ), ;, }, }]
[., formatDurationHMS, (, getTime, (, ), ), ;, }, public, String, toSplitString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS, (]
[), ;, }, public, String, toSplitString, (, ), {, return, DurationFormatUtils, ., formatDurationHMS, (, getSplitTime, (, ), ), ;, }]
[;, }, }]
[., formatDurationHMS, (, getSplitTime, (, ), ), ;, }, }]
[), ;, }, }]
