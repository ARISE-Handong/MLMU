[IOException, ;, import, java, ., io, ., Writer, ;, public, class, OctalUnescaper, extends, CharSequenceTranslator, {, private, static, int, OCTAL_MAX, =]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (]
[final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==]
[index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&]
[index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&]
[final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, <]
[Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, <, (]
[Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, <, (]
[Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, <, (]
[if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, <, (, input, ., length, (, ), -]
[., charAt, (, index, ), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&]
[., charAt, (, index, ), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&]
[), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (]
[), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (]
[index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (]
[index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (]
[(, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (, index, +]
[&&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =]
[&&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =]
[., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =, index, +]
[charAt, (, index, +, 1, ), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =]
[charAt, (, index, +, 1, ), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =]
[index, +, 1, ), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +]
[), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (]
[), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (]
[), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (]
[{, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (, end, <]
[{, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (, end, <]
[+, 1, ;, int, end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&]
[+, 1, ;, int, end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&]
[end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (]
[end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (]
[2, ;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (]
[<, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {]
[<, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {]
[), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (]
[), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (]
[), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (]
[isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (]
[isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (]
[isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (]
[charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (]
[end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,]
[;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), >]
[(, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {]
[(, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {]
[end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }]
[end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }]
[(, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (]
[(, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (]
[), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (]
[), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (]
[), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (]
[{, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence, (]
[--, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,]
[., write, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return]
[parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return]
[parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return]
[input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return, 1, +]
[subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return, 1, +, end, -]
[end, ), ., toString, (, ), ,, 8, ), ), ;, return, 1, +, end, -, start, ;, }, return]
