[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (]
[;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;]
[,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension]
[), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, )]
[., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix]
[;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new]
[., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ]]
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, []
[;, main, =, new, double, [, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ]
[., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, [, m, -]
[=, new, double, [, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null]
[;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT]
[], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;]
[=, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null]
[;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix]
[], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public]
[-, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;]
[], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public]
[=, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (]
[;, cachedQt, =, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {]
[=, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (]
[;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==]
[=, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, )]
[;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ]
[;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =, getQT, (, )]
[), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT]
[==, null, ), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public]
[), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT]
[=, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {]
[;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==, null, ), {, final]
[., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==]
[;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==, null, ), {, final, int, m, =, householderVectors]
[), {, final, int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =, new, double, []
[==, null, ), {, final, int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =, new]
[), {, final, int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =, new, double, []
[;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for]
[;, for, (, int, k, =, m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final, double]
[], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, 1, ;, --, k]
[], ;, for, (, int, k, =, m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final]
[;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1]
[-, 1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k]
[;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, []
[>=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], []
[;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, )]
[[, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0]
[-, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ]]
[], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (]
[[, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =]
[[, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final]
[], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv]
[], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /]
[;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, []
[), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, [, k, ]]
[!=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, []
[[, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ]]
[], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *, hK]
[), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, [, k, ]]
[;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ]]
[/, (, secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /]
[;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ]]
[), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k]
[*, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta]
[[, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k]
[], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;]
[-, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1]
[], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;]
[), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k]
[[, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k]
[], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], []
[;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (]
[/, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *]
[;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (]
[[, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, []
[], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for]
[-, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ]]
[], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for]
[=, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i]
[[, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +]
[[, k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i]
[], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k]
[], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[+, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[*, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[[, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta]
[;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK]
[+, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta]
[;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK]
[;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK, [, i, ], ;]
[<, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK, [, i]
[;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK, [, i, ], ;]
[), {, qta, [, k, ], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (]
[), {, qta, [, k, ], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (]
[=, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <]
[[, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1]
[[, k, ], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =]
[], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +]
[], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j]
[;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, beta]
[*, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;]
[;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, beta]
[[, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j]
[], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {]
[;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +]
[+, 1, ;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =]
[;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +]
[;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[<, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[=, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=]
[;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK]
[+, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ]]
[;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK]
[;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;]
[<, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i]
[;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;]
[), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=]
[), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=]
[+=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta]
[;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ]]
[*, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta]
[[, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k]
[[, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j]
[], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], []
[], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =]
[;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ]]
[[, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK]
[], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK, [, k]
[*=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (]
[;, qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i]
[=, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[[, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[[, j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k]
[], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1]
[], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[*, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[[, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta]
[;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK]
[+, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta]
[;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK]
[;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;]
[<, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i]
[;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;]
[), {, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }]
[), {, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }]
[+=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =]
[[, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], []
[[, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, []
[], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ]]
[], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ]]
[;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix]
[*, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;]
[;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix]
[[, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =]
[], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, .]
[=, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT]
[[, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }]
[[, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return]
[], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;]
[], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix]
[;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, )]
[=, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if]
[;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==, null, ), {, final]
[., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT]
[), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==, null, ), {]
[;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==, null, ), {, final, int, m, =, main]
[), {, final, int, m, =, main, ., length, ;, double, [, ], [, ], ta, =, new, double, []
[==, null, ), {, final, int, m, =, main, ., length, ;, double, [, ], [, ], ta, =, new]
[), {, final, int, m, =, main, ., length, ;, double, [, ], [, ], ta, =, new, double, []
[;, double, [, ], [, ], ta, =, new, double, [, m, ], [, m, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], ta, =, new, double, [, m, ], [, m, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, [, i, ]]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, [, i]
[;, i, <, m, ;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i]
[;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[<, m, ;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;]
[;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0]
[), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0]
[=, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -]
[[, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ]]
[[, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta]
[], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i]
[], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i]
[;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary, []
[[, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ]]
[], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary]
[), {, ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }]
[>, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ]]
[), {, ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }]
[=, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {]
[[, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, .]
[[, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i]
[], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main]
[], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, )]
[-, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -]
[], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, )]
[;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +]
[[, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, []
[], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i]
[-, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ]]
[], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i]
[), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT]
[<, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +, 1, ], =, secondary, []
[), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT]
[-, 1, ), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }]
[., length, -, 1, ), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ]]
[), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT]
[=, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return, cachedT]
[[, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta]
[[, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, .]
[], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (]
[], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return]
[+, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;]
[], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return]
[;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }, double, [, ]]
[[, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }]
[], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }, double, []
[=, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (]
[;, }, return, cachedT, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double]
[., createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {]
[), ;, }, return, cachedT, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }]
[;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double, [, ], getMainDiagonalRef, (]
[;, }, double, [, ], getMainDiagonalRef, (, ), {, return, main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {]
[;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, private, void, transform, (, ), {, final]
[;, }, private, void, transform, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, double, [, ]]
[;, final, double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;]
[., length, ;, final, double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =]
[;, for, (, int, k, =, 0, ;, k, <, m, -, 1, ;, k, ++, ), {, final, double]
[], ;, for, (, int, k, =, 0, ;, k, <, m, -, 1, ;, k, ++, ), {, final]
[;, k, <, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k]
[;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ]]
[<, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ]]
[-, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, []
[;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ]]
[), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ], =, hK, []
[++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ], =, hK]
[;, main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j]
[[, k, ], ;, main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for]
[], ;, main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int]
[=, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[[, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k]
[], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1]
[;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++]
[[, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, m, ;]
[;, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double]
[;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[+, 1, ;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;]
[;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[<, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >]
[[, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +]
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ]]
[+=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, )]
[;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, .]
[*, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, .]
[;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary]
[[, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[+, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=]
[;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +]
[=, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final]
[[, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=]
[], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta]
[), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a]
[!=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /]
[), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a]
[-=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ], )]
[[, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, []
[], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ]]
[+, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +]
[], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ]]
[;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays]
[;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i]
[/, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +]
[/, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +]
[;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i]
[), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int]
[*, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m]
[), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int]
[[, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0]
[], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (]
[+, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;]
[], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k]
[,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i]
[,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[+, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i]
[;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =, hI, [, i, ], *, hKI, ;]
[[, i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =, hI, [, i, ]]
[], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =, hI, [, i, ], *, hKI]
[;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;]
[[, i, ], ;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i]
[], ;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1]
[;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double]
[*, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {]
[[, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++]
[], *, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, )]
[;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double]
[;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=]
[+, 1, ;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;]
[;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=]
[;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, []
[<, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *]
[;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, []
[), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;]
[), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;]
[;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }]
[[, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *]
[], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;]
[+=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, []
[;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z]
[*, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ]]
[;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z]
[[, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta]
[], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (]
[+=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +, zI]
[[, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z, [, i]
[], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +]
[;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +, zI, ), ;, }, double]
[*, hKI, ;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +, zI, ), ;]
[;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +, zI, ), ;, }, double]
[=, beta, *, (, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (]
[[, i, ], =, beta, *, (, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0]
[], =, beta, *, (, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for]
[;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[*, (, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i]
[;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[+, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i]
[[, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +]
[], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=]
[;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ]]
[+, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, []
[;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ]]
[;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=]
[<, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }]
[;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=]
[), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2]
[), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2]
[+=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (]
[;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[*, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +]
[[, i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i]
[], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k]
[;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[[, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;]
[], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[*=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, []
[/, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, []
[;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, [, i, ]]
[+, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, []
[;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, [, i, ]]
[;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (]
[<, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }]
[;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (]
[), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =]
[), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =]
[-=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <]
[[, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1]
[], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i]
[;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final]
[*, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final]
[[, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i]
[], ;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;]
[;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI]
[], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j]
[;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z]
[;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +]
[<, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j]
[;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +]
[), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i]
[), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i]
[-=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *, hK, [, j, ]]
[[, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *, hK]
[], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *, hK, [, j]
[;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], [, m]
[+, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1]
[*, z, [, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }]
[[, i, ], *, z, [, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }]
[], *, z, [, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }]
[+, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1]
[[, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, []
[], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -]
[;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], [, m]
[*, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m]
[[, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =]
[], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, []
[;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], [, m]
[[, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1]
[], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], []
[=, householderVectors, [, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[[, m, -, 1, ], =, householderVectors, [, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[], =, householderVectors, [, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[-, 1, ], =, householderVectors, [, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[], =, householderVectors, [, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[;, }, }]
[[, m, -, 1, ], ;, }, }]
[[, m, -, 1, ], [, m, -, 1, ], ;, }, }]
[], [, m, -, 1, ], ;, }, }]
[-, 1, ], [, m, -, 1, ], ;, }, }]
[], [, m, -, 1, ], ;, }, }]
[], ;, }, }]
[-, 1, ], ;, }, }]
[], ;, }, }]
