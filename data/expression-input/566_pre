[., util, ;, import, java, ., io, ., PrintStream, ;, public, class, FastMath, {, public, static, final, double, PI, =]
[., util, ;, import, java, ., io, ., PrintStream, ;, public, class, FastMath, {, public, static, final, double, PI, =]
[., util, ;, import, java, ., io, ., PrintStream, ;, public, class, FastMath, {, public, static, final, double, PI, =]
[;, import, java, ., io, ., PrintStream, ;, public, class, FastMath, {, public, static, final, double, PI, =, 105414357.0, /]
[java, ., io, ., PrintStream, ;, public, class, FastMath, {, public, static, final, double, PI, =, 105414357.0, /, 33554432.0, +]
[FastMath, {, public, static, final, double, PI, =, 105414357.0, /, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =]
[FastMath, {, public, static, final, double, PI, =, 105414357.0, /, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =]
[FastMath, {, public, static, final, double, PI, =, 105414357.0, /, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =]
[public, static, final, double, PI, =, 105414357.0, /, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /]
[final, double, PI, =, 105414357.0, /, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +]
[+, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =]
[E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =]
[E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =]
[2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *]
[final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static, final, int, LN_MANT_LEN, =]
[final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =]
[static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE, =]
[static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE, =]
[=, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE, =, StrictMath, ., log, (]
[=, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE, =, StrictMath, ., log, (]
[static, final, double, LOG_MAX_VALUE, =, StrictMath, ., log, (, Double, ., MAX_VALUE, ), ;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =]
[(, Double, ., MAX_VALUE, ), ;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double, LN_2_A, =]
[final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double, LN_2_A, =, 0.693147063255310059, ;, private, static, final, double, LN_2_B, =]
[0.693147063255310059, ;, private, static, final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =]
[;, private, static, final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {]
[private, static, final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {]
[final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,]
[=, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,]
[1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {]
[;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -]
[static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,]
[final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -]
[[, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,]
[], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {]
[], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,]
[{, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,]
[1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {]
[,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -]
[}, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,]
[,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -]
[0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {]
[0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,]
[{, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,]
[0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {]
[,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -]
[}, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,]
[,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -]
[0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,]
[,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {]
[6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,]
[{, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,]
[0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {]
[,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -]
[}, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,]
[,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -]
[0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,]
[,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {]
[7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,]
[}, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =]
[,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {]
[{, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {]
[,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,]
[9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -]
[}, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,]
[;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {]
[private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -]
[final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,]
[double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -]
[], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,]
[[, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {]
[=, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,]
[1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,]
[,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {]
[-, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -]
[}, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,]
[,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -]
[0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {]
[0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,]
[{, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,]
[0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {]
[,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -]
[}, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,]
[,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -]
[0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =]
[2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =]
[}, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {]
[}, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +]
[private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,]
[static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +]
[int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,]
[SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +]
[14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,]
[;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +]
[static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,]
[final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +]
[SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,]
[[, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +]
[=, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,]
[{, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +]
[0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,]
[,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +]
[0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,]
[,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +]
[0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,]
[,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +]
[0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,]
[,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +]
[0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,]
[,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +]
[0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,]
[,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +]
[0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,]
[,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +]
[,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =]
[+, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {]
[0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +]
[+, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,]
[0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -]
[+, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,]
[0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +]
[}, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,]
[;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +]
[static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,]
[final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -]
[SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,]
[[, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -]
[=, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,]
[{, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +]
[0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,]
[,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -]
[4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,]
[,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +]
[9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,]
[,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +]
[1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,]
[,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -]
[1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,]
[,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +]
[3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,]
[,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +]
[4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,]
[,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -]
[,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =]
[+, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {]
[4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +]
[+, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,]
[5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +]
[-, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,]
[1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +]
[}, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,]
[;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +]
[static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,]
[final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +]
[COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,]
[[, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +]
[=, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,]
[{, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +]
[1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,]
[,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +]
[0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,]
[,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +]
[0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,]
[,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +]
[0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,]
[,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +]
[0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,]
[,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +]
[0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,]
[,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +]
[0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,]
[,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -]
[,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =]
[+, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {]
[0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +]
[+, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,]
[0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +]
[-, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,]
[0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +]
[}, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,]
[;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -]
[static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,]
[final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +]
[COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,]
[[, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -]
[=, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,]
[{, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +]
[0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,]
[,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +]
[3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,]
[,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +]
[5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,]
[,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -]
[3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,]
[,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +]
[1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,]
[,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -]
[3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,]
[,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +]
[1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,]
[,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +]
[,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =]
[-, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {]
[4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +]
[+, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,]
[3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +]
[+, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,]
[2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +]
[}, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,]
[;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +]
[static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,]
[final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +]
[TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,]
[[, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +]
[=, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,]
[{, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +]
[0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,]
[,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +]
[0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,]
[,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +]
[0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,]
[,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +]
[0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,]
[,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +]
[0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,]
[,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +]
[0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,]
[,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +]
[0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,]
[,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -]
[,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =]
[+, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {]
[5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +]
[+, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,]
[14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -]
[-, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,]
[18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -]
[}, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,]
[;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +]
[static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,]
[final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +]
[TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,]
[[, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +]
[=, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,]
[{, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -]
[0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,]
[,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +]
[7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,]
[,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +]
[2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,]
[,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +]
[5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,]
[,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +]
[5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,]
[,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +]
[1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,]
[,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +]
[5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,]
[,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -]
[,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =]
[+, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ]]
[4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {]
[4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {]
[,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (]
[,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (]
[3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<]
[;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |]
[static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,]
[static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,]
[final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (]
[final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (]
[RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<]
[=, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |]
[long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,]
[long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,]
[[, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (]
[[, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (]
[{, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<]
[<<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |]
[), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,]
[), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,]
[|, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (]
[|, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (]
[,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<]
[<<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |]
[), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,]
[), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,]
[|, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (]
[|, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (]
[,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<]
[<<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |]
[), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,]
[), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,]
[|, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (]
[|, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (]
[,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<]
[<<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |]
[), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,]
[), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,]
[|, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (]
[|, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (]
[,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<]
[<<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |]
[), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,]
[), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,]
[|, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (]
[|, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (]
[,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<]
[<<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |]
[), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,]
[), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,]
[|, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (]
[|, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (]
[,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<]
[<<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |]
[), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,]
[), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,]
[|, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (]
[|, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (]
[,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<]
[<<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |]
[), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,]
[), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,]
[|, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (]
[|, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (]
[,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<]
[<<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |]
[), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,]
[), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,]
[|, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (]
[|, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (]
[,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<]
[<<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |]
[), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,]
[), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,]
[|, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (]
[|, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (]
[,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<]
[<<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |]
[), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,]
[), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,]
[|, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (]
[|, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (]
[,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<]
[<<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |]
[), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,]
[), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,]
[|, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (]
[|, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (]
[,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<]
[<<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |]
[), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,]
[), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,]
[|, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (]
[|, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (]
[,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<]
[<<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |]
[), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,]
[), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,]
[|, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (]
[|, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (]
[,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<]
[<<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |]
[), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,]
[), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,]
[0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<]
[0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =]
[|, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ]]
[0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {]
[0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {]
[,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (]
[,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (]
[<<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<]
[;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |]
[static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,]
[static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,]
[final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (]
[final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (]
[PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<]
[=, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |]
[|, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =]
[0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {]
[(, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,]
[<<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,]
[), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,]
[0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,]
[;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,]
[static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,]
[double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,]
[[, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,]
[=, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,]
[0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,]
[0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,]
[0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,]
[0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,]
[,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =]
[1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {]
[1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,]
[1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,]
[1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,]
[1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,]
[], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =]
[,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =]
[,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =]
[1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -]
[1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -]
[}, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (]
[}, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (]
[private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (, HEX_40000000, -]
[static, final, long, MASK_30BITS, =, -, 1L, -, (, HEX_40000000, -, 1, ), ;, private, static, final, int, MASK_NON_SIGN_INT, =]
[(, HEX_40000000, -, 1, ), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =]
[final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final, double, TWO_POWER_52, =]
[final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final, double, TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =]
[final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final, double, TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =]
[MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final, double, TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =, 2, *]
[TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =, 2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =]
[TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =, 2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =]
[4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =, 2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /]
[2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =]
[2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =]
[TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d, /]
[1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =]
[1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =]
[3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d, /]
[1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =]
[1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =]
[5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d, /]
[1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =]
[1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =]
[7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d, /]
[1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =]
[1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =]
[9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d, /]
[1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =]
[1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =]
[11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d, /]
[1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =]
[1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =]
[13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d, /]
[1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =]
[1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =]
[15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d, /]
[1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =]
[1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =]
[17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d, /]
[3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =]
[3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =]
[4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d, /]
[15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =]
[15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =]
[16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d, /]
[13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =]
[13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =]
[14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d, /]
[11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =]
[11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =]
[12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d, /]
[9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =]
[9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =]
[10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d, /]
[7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =]
[7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =]
[8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d, /]
[5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =]
[5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =]
[6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =, 1d, /]
[/, 4d, ;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (]
[/, 4d, ;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (]
[/, 4d, ;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (]
[;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >]
[private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -]
[private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -]
[{, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -, Precision, ., SAFE_MIN, &&]
[{, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -, Precision, ., SAFE_MIN, &&]
[private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -, Precision, ., SAFE_MIN, &&, d, <]
[private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >, -, Precision, ., SAFE_MIN, &&, d, <]
[d, ), {, if, (, d, >, -, Precision, ., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return]
[>, -, Precision, ., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =]
[>, -, Precision, ., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =]
[SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (]
[<, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;]
[., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =]
[., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =]
[), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &]
[d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &, MASK_30BITS, ;, return]
[d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &, MASK_30BITS, ;, return]
[xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (]
[return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {, return]
[return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {, return]
[(, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {, return, Math, ., sqrt, (]
[return, Math, ., sqrt, (, a, ), ;, }, public, static, double, cosh, (, double, x, ), {, if, (]
[return, Math, ., sqrt, (, a, ), ;, }, public, static, double, cosh, (, double, x, ), {, if, (]
[., sqrt, (, a, ), ;, }, public, static, double, cosh, (, double, x, ), {, if, (, x, !=]
[), ;, }, public, static, double, cosh, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[double, cosh, (, double, x, ), {, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[double, cosh, (, double, x, ), {, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >]
[if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (]
[if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (]
[x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=]
[;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =]
[if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *]
[{, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return]
[{, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return]
[if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (]
[if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (]
[x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *]
[x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (]
[0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (]
[exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=]
[(, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -]
[if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =]
[x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[<, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -]
[20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *]
[(, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return]
[(, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return]
[x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (]
[x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (]
[-, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5, *]
[{, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[(, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[(, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *]
[x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, -]
[}, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double, hiPrec, [, ], =]
[return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double, hiPrec, [, ], =, new, double, []
[-, x, ), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (]
[-, x, ), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (]
[), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <]
[}, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <, 0.0, ), {]
[double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <, 0.0, ), {, x, =]
[hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <, 0.0, ), {, x, =, -]
[=, new, double, [, 2, ], ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }]
[double, [, 2, ], ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }, exp, (]
[2, ], ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }, exp, (, x, ,]
[;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,]
[), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, []
[x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[}, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[=, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, []
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =]
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +]
[hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /]
[ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;]
[temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =]
[temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =]
[temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +]
[double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -]
[ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =]
[ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =]
[temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -]
[recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;]
[HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=]
[HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -]
[recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -]
[recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *]
[temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -]
[temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -]
[temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *]
[double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -]
[double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -]
[=, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *]
[-, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -]
[yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *]
[recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *]
[yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;]
[recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =]
[recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =]
[yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +]
[recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;]
[*, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=]
[recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[+=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -]
[yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -]
[*, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[=, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;]
[(, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=]
[temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;]
[;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =]
[recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =]
[recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =]
[yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +]
[-, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;]
[temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=]
[-, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return]
[result, *=, 0.5, ;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =]
[return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if, (]
[return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if, (]
[;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=]
[double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return]
[), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >]
[if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (]
[if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (]
[x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=]
[;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =]
[if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *]
[{, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return]
[{, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return]
[if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (]
[if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (]
[x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return]
[0.5, *, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *]
[x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (]
[0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (]
[exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=]
[(, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -]
[if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =]
[x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (]
[<, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -]
[20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *]
[(, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return]
[(, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return]
[x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (]
[x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (]
[<=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -]
[LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -, 0.5, *]
[final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -, 0.5, *, t, ), *]
[-, 0.5, *, x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return]
[-, 0.5, *, x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return]
[0.5, *, x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -]
[x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *]
[;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp, (]
[return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp, (, -]
[*, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (]
[*, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (]
[;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (, x, ==]
[return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (, x, ==, 0, ), {, return]
[(, -, x, ), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[(, -, x, ), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[x, ), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <]
[}, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {]
[if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =]
[(, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -]
[==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (]
[x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (]
[0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >]
[negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =]
[;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =, new, double, []
[result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (]
[x, >, 0.25, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,]
[0.25, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,]
[], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, []
[2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[=, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, []
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =]
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +]
[hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /]
[ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;]
[temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =]
[temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =]
[temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =]
[yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +]
[double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -]
[ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =]
[ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =]
[temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -]
[recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;]
[HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=]
[HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -]
[recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -]
[recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *]
[temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -]
[temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -]
[temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *]
[double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -]
[double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -]
[=, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *]
[-, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -]
[yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *]
[recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *]
[yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;]
[recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -]
[*, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =]
[*, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;]
[+=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =]
[+=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =]
[yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +]
[recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;]
[recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=]
[;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -]
[recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[-, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -]
[;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -]
[-, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[=, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;]
[(, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=]
[temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;]
[;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =]
[=, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;]
[+, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =]
[+, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =]
[;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;]
[(, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=]
[temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =]
[=, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, []
[yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (]
[0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, ,]
[hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =]
[hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =]
[hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =]
[], =, new, double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, []
[double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[double, [, 2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[2, ], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[=, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, []
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =]
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /]
[], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =]
[], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =]
[), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -]
[;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -]
[1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[(, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =]
[(, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =]
[-, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =]
[;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +]
[ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -]
[;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -]
[ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;]
[HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *]
[temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =]
[temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =]
[temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =]
[temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +]
[double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -]
[ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =]
[ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =]
[temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -]
[denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;]
[HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=]
[HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *]
[temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -]
[temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -]
[temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *]
[double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[=, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *]
[-, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[*, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -]
[ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *]
[zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *]
[rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *]
[*, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =]
[+=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +]
[*, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=]
[rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -]
[+=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (]
[+=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (]
[+=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (]
[ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -]
[denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -]
[*, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;]
[;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =]
[=, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;]
[+, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =]
[+, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;]
[(, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=]
[temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -]
[-, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (]
[-, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (]
[-, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (]
[-, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;]
[;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =]
[=, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;]
[+, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =]
[+, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =]
[;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;]
[(, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=]
[rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (]
[ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {]
[temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =]
[;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -]
[+, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return]
[-, result, ;, }, return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =]
[return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;, if, (]
[return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;, if, (]
[;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=]
[double, tanh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return]
[), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[), {, boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[boolean, negate, =, false, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >]
[;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return]
[x, ), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (]
[x, ), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (]
[{, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x, <]
[return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x, <, -]
[if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return]
[(, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -]
[{, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if, (]
[{, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if, (]
[1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if, (, x, ==]
[(, x, <, -, 20, ), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return]
[), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <]
[;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {]
[if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =]
[(, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -]
[==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (]
[x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (]
[0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >=]
[negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =]
[;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, []
[result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (]
[if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (]
[x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *]
[0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,]
[{, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0, ,]
[new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[[, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, []
[;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[(, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[=, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, []
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =]
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =]
[=, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, -]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +]
[0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =]
[], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -]
[-, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (]
[-, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (]
[-, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (]
[[, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +]
[], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -]
[-, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =]
[-, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =]
[+, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +]
[;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;]
[nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=]
[=, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -]
[-, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (]
[-, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (]
[-, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (]
[na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -]
[1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -]
[), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;]
[double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =]
[yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =]
[yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =]
[nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +]
[-, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =]
[na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -]
[-, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (]
[-, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (]
[-, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (]
[), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -]
[na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -]
[;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;]
[da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =]
[da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =]
[1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +]
[ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;]
[double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=]
[db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -]
[=, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (]
[=, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (]
[=, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (]
[(, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -]
[-, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -]
[ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;]
[;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =]
[=, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +]
[yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -]
[temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =]
[temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =]
[temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /]
[da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;]
[temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =]
[temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =]
[temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +]
[double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -]
[da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =]
[da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =]
[temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -]
[ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;]
[HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=]
[HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -]
[ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -]
[ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *]
[temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -]
[temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -]
[temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *]
[double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -]
[double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -]
[=, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /]
[-, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[*, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -]
[ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *]
[dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /]
[ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /]
[/, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[+=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +]
[na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =]
[/, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, []
[result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (]
[ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (]
[ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, *]
[}, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0, ,]
[], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =]
[], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =]
[], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =]
[new, double, [, 2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, []
[2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[2, ], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -]
[=, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, []
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =]
[-, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =]
[-, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =]
[[, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +]
[double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =]
[na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -]
[=, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (]
[=, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (]
[=, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (]
[;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (, da, -]
[nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (, da, -, 2.0, -]
[=, 2.0, +, ya, ;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =]
[=, 2.0, +, ya, ;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =]
[+, ya, ;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +]
[;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;]
[db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=]
[=, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -]
[-, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (]
[-, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (]
[-, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (]
[da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -]
[2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -]
[), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;]
[double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =]
[=, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =]
[da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +]
[yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -]
[temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =]
[temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =]
[temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /]
[da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;]
[temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =]
[temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =]
[temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =]
[daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +]
[double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -]
[da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =]
[da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =]
[temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -]
[ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;]
[HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=]
[HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -]
[ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -]
[ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *]
[temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -]
[temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -]
[temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *]
[double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -]
[double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -]
[=, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /]
[-, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[*, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -]
[ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *]
[dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /]
[ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /]
[/, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[+=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +]
[ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (]
[db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {]
[na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =]
[/, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -]
[;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return]
[=, -, result, ;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return]
[=, -, result, ;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return]
[}, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (]
[}, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (]
[result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +]
[result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +]
[static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath, ., sqrt, (]
[static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath, ., sqrt, (]
[static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath, ., sqrt, (]
[acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath, ., sqrt, (, a, *]
[final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath, ., sqrt, (, a, *, a, -]
[*, a, -, 1, ), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =]
[), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <]
[static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {]
[asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =]
[double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;]
[), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =]
[{, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =, -]
[a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (]
[a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (]
[0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >]
[negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {]
[true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =]
[true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =]
[-, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (]
[-, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (]
[-, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (]
[double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (]
[double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (]
[double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (]
[;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *]
[(, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +]
[0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +]
[., sqrt, (, a, *, a, +, 1, ), +, a, ), ;, }, else, {, final, double, a2, =]
[., sqrt, (, a, *, a, +, 1, ), +, a, ), ;, }, else, {, final, double, a2, =]
[(, a, *, a, +, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *]
[+, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[+, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {]
[}, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =]
[}, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =]
[{, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *]
[final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (]
[final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (]
[a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -]
[a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -]
[a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -]
[a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[*, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[*, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[(, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *]
[a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[{, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[(, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -]
[(, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *]
[F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (]
[F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -]
[(, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *]
[-, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *]
[(, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *]
[a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *]
[F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *]
[*, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *]
[-, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *]
[F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *]
[), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {]
[F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =]
[F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *]
[F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (]
[F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -]
[), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[(, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *]
[a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[{, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -]
[(, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *]
[-, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *]
[(, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *]
[F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *]
[*, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *]
[-, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {]
[F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =]
[F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *]
[F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (]
[F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -]
[), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[(, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *]
[a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (]
[0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -]
[{, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *]
[-, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[-, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {]
[*, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =]
[*, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *]
[F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (]
[F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *]
[;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *]
[{, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *]
[1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return]
[1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return]
[a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?]
[*, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -]
[F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :]
[negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =]
[:, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[:, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <]
[static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {]
[atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =]
[double, a, ), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;]
[), {, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =]
[{, boolean, negative, =, false, ;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =, -]
[a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (]
[a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (]
[0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >]
[negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {]
[true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =]
[true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =]
[a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *]
[a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *]
[;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (]
[;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (]
[}, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (]
[}, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (]
[absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +]
[(, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /]
[a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (]
[a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (]
[0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -]
[(, 1, +, a, ), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =]
[(, 1, +, a, ), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =]
[+, a, ), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *]
[(, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[(, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[-, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {]
[}, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =]
[}, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =]
[{, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *]
[final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (]
[final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (]
[a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +]
[a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +]
[a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[*, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[*, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[(, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[{, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +]
[(, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +]
[(, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (]
[a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +]
[a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +]
[(, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *]
[F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (]
[F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (]
[a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +]
[a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +]
[(, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *]
[*, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (]
[*, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (]
[F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (, a, >]
[*, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {]
[), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =]
[), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (]
[), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +]
[), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +]
[), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[(, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[{, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +]
[(, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +]
[(, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *]
[+, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (]
[+, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (]
[*, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >]
[+, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {]
[*, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =]
[*, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (]
[), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +]
[), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +]
[), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[(, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (]
[0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +]
[{, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *]
[*, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =]
[a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *]
[*, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (]
[*, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (]
[F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +]
[F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +]
[a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *]
[*, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[*, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return]
[*, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?, -]
[+, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?, -, absAtanh, :]
[return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return]
[return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return]
[negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (]
[negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (]
[-, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <]
[absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?]
[;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -]
[public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :]
[static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (]
[static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (]
[double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (, (]
[double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (, (]
[(, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (, (, a, >]
[a, ), {, return, (, a, <, 0.0, ), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?]
[{, return, (, a, <, 0.0, ), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :]
[0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return]
[0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return]
[), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (]
[), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (]
[1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <]
[), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?]
[;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -]
[public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :]
[static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (]
[static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (]
[float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (, (]
[float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (, (]
[(, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (, (, a, >]
[a, ), {, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?]
[{, return, (, a, <, 0.0f, ), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :]
[0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return]
[?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (]
[:, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,]
[:, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,]
[(, a, ,, Double, ., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return]
[,, Double, ., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (]
[., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (, a, ,]
[., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (, a, ,]
[{, return, nextAfter, (, a, ,, Float, ., POSITIVE_INFINITY, ), ;, }, public, static, double, random, (, ), {, return]
[{, return, nextAfter, (, a, ,, Float, ., POSITIVE_INFINITY, ), ;, }, public, static, double, random, (, ), {, return]
[), {, return, Math, ., random, (, ), ;, }, public, static, double, exp, (, double, x, ), {, return]
[return, Math, ., random, (, ), ;, }, public, static, double, exp, (, double, x, ), {, return, exp, (]
[., random, (, ), ;, }, public, static, double, exp, (, double, x, ), {, return, exp, (, x, ,]
[(, ), ;, }, public, static, double, exp, (, double, x, ), {, return, exp, (, x, ,, 0.0, ,]
[double, extra, ,, double, [, ], hiPrec, ), {, double, intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (]
[double, extra, ,, double, [, ], hiPrec, ), {, double, intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (]
[,, double, [, ], hiPrec, ), {, double, intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (, x, <]
[], hiPrec, ), {, double, intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (, x, <, 0.0, ), {]
[), {, double, intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (, x, <, 0.0, ), {, intVal, =]
[intPartA, ;, double, intPartB, ;, int, intVal, ;, if, (, x, <, 0.0, ), {, intVal, =, (, int, )]
[;, double, intPartB, ;, int, intVal, ;, if, (, x, <, 0.0, ), {, intVal, =, (, int, ), -]
[int, intVal, ;, if, (, x, <, 0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (]
[int, intVal, ;, if, (, x, <, 0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (]
[;, if, (, x, <, 0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >]
[0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (]
[0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (]
[{, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=]
[(, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {]
[(, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {]
[), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[(, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;]
[(, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;]
[>, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, []
[{, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =]
[!=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[[, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (]
[[, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (]
[], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >]
[], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =]
[], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =]
[0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (]
[0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (]
[}, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (, x, +]
[0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (, x, +, 40.19140625, ,]
[}, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,]
[intVal, >, 709, ), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /]
[{, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (]
[{, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (]
[double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=]
[exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {]
[exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {]
[x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, []
[,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;]
[,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;]
[), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, []
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=]
[!=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return]
[[, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (]
[[, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (]
[], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==]
[], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =]
[], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =]
[285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (]
[285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (]
[}, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (, x, +]
[result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (, x, +, 1.494140625, ,]
[}, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,]
[intVal, ==, 709, ), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /]
[{, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (]
[{, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (]
[double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=]
[exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {]
[exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {]
[x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, []
[,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;]
[,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;]
[), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, []
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=]
[!=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return]
[{, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }]
[{, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }]
[0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;]
[/=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =]
[/=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =]
[/=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =]
[[, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, []
[[, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, []
[], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -]
[;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;]
[return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =]
[return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =]
[return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =]
[intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, []
[intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, []
[;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -]
[ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;]
[EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =]
[[, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -]
[;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {]
[=, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =]
[EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, )]
[intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (]
[intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (]
[;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >]
[;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (]
[;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (]
[else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=]
[=, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {]
[=, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {]
[int, ), x, ;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[>, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;]
[>, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, []
[(, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =]
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }]
[Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =]
[Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =]
[Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =]
[hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, []
[hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, []
[1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +]
[0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;]
[}, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =]
[}, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =]
[}, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =]
[POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, []
[POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, []
[}, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +]
[+, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =]
[;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, )]
[intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (]
[intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (]
[=, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (]
[=, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (]
[., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -]
[EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *]
[int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;, final, double, fracPartA, =]
[int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;, final, double, fracPartA, =]
[int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;, final, double, fracPartA, =]
[int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, []
[), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =]
[), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =]
[), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =]
[;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =]
[EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =]
[intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -]
[], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (]
[], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (]
[final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +]
[final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +]
[fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /]
[intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =]
[;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;]
[double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =]
[double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =]
[double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =]
[=, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *]
[-, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +]
[intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;]
[intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =]
[intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =]
[intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =]
[1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *]
[;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +]
[z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;]
[0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =]
[0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =]
[0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =]
[z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *]
[z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +]
[epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;]
[0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =]
[0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =]
[0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =]
[z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *]
[z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +]
[*, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -]
[z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =]
[z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =]
[z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[=, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *]
[*, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +]
[*, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +]
[+, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *]
[3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +]
[3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +]
[double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *]
[;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =]
[;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =]
[tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +]
[fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (]
[fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (]
[intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=]
[;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =]
[=, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *]
[+, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *]
[;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +]
[;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +]
[double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *]
[;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +]
[;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +]
[(, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *]
[!=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +]
[), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +]
[*, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[+, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *]
[*, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +]
[+, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +]
[tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (]
[tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (]
[tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=]
[else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {]
[else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {]
[result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, []
[*, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[+, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;]
[+, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;]
[+, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, []
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[}, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =]
[(, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *]
[!=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *]
[), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +]
[), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +]
[hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *]
[0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +]
[0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +]
[=, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *]
[;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +]
[], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return]
[*, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return]
[+, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (]
[;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (, x, ,]
[null, ), ;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (]
[null, ), ;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (]
[null, ), ;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (]
[;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=]
[private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=, x, ||]
[private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=, x, ||]
[double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=, x, ||, x, ==]
[x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=, x, ||, x, ==, 0.0, ), {, return]
[], ), {, if, (, x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (]
[], ), {, if, (, x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (]
[], ), {, if, (, x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (]
[{, if, (, x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=]
[if, (, x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -]
[x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||]
[x, !=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||]
[x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=]
[x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =]
[if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, []
[<=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (]
[x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,]
[1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,]
[[, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (]
[[, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (]
[=, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >]
[2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return]
[2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return]
[2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return]
[], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -]
[exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +]
[exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +]
[x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, []
[,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +]
[,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +]
[), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, []
[-, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =]
[-, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =]
[1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +]
[0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, []
[], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =]
[;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -]
[}, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (]
[}, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (]
[}, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (]
[{, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +]
[double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -]
[double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -]
[=, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, []
[hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;]
[0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=]
[0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=]
[;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, []
[-, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return]
[-, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return]
[ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +]
[;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =]
[rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (]
[rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (]
[}, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x, <]
[baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x, <, 0.0, ), {]
[double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x, <, 0.0, ), {, x, =]
[baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x, <, 0.0, ), {, x, =, -]
[double, epsilon, ;, boolean, negative, =, false, ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;]
[;, boolean, negative, =, false, ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negative, =]
[(, x, <, 0.0, ), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =]
[0.0, ), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, )]
[), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (]
[), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (]
[x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *]
[=, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =]
[=, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =]
[=, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =]
[=, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =]
[{, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, []
[=, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -]
[x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =]
[x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =]
[x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =]
[;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =]
[EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =]
[intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +]
[-, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;]
[;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =]
[double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -]
[tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (]
[tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (]
[tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (]
[ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -]
[EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -]
[], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;]
[double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =]
[=, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;]
[+, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =]
[+, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =]
[;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *]
[=, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;]
[(, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =]
[(, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =]
[(, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =]
[-, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +]
[-, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -]
[), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;]
[tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =]
[tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =]
[temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +]
[;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (]
[;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (]
[=, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -]
[HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;]
[baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =]
[baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =]
[tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -]
[tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -]
[temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /]
[tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =]
[(, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;]
[-, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =]
[-, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =]
[-, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =]
[), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *]
[epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +]
[x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;]
[intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =]
[intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =]
[intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =]
[1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *]
[}, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +]
[zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;]
[0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =]
[0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =]
[0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =]
[zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *]
[zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +]
[epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;]
[0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =]
[0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =]
[zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *]
[zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;]
[epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =]
[epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =]
[0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *]
[*, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =]
[zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =]
[zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =]
[zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +]
[epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;]
[zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =]
[=, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -]
[zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (]
[zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (]
[zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (]
[epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -]
[double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za, -]
[epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;]
[double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =]
[=, za, +, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;]
[+, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =]
[+, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =]
[;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *]
[=, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;]
[(, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =]
[(, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =]
[(, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =]
[-, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +]
[-, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -]
[), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;]
[za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=]
[za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=]
[temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -]
[temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;]
[za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =]
[=, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =]
[=, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =]
[+, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *]
[-, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;]
[;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =]
[;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =]
[+=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +]
[+=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +]
[-, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *]
[temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =]
[;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -]
[double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (]
[double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (]
[double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (]
[=, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -]
[*, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -]
[*, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -]
[;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *]
[ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;]
[za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =]
[baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;]
[double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[=, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[=, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[(, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *]
[-, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;]
[-, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=]
[za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -]
[ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -]
[ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -]
[temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *]
[=, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;]
[+, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =]
[*, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =]
[+=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +]
[(, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *]
[-, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;]
[-, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=]
[zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -]
[*, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (]
[*, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (]
[*, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -]
[ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -]
[ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -]
[temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *]
[=, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;]
[+, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =]
[*, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[+=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[(, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;]
[-, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=]
[ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -]
[-, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (]
[-, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (]
[-, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -]
[=, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;]
[;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =]
[=, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;]
[+, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =]
[+, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;]
[(, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=]
[temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -]
[-, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (]
[-, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (]
[-, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (]
[-, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;]
[;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =]
[=, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;]
[+, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =]
[+, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;]
[(, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=]
[temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -]
[-, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (]
[-, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (]
[-, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (]
[-, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;]
[;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =]
[=, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;]
[+, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =]
[+, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;]
[(, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=]
[temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -]
[-, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (]
[-, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (]
[-, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (]
[-, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;]
[;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =]
[+, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (]
[(, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =]
[(, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =]
[-, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +]
[;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[=, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /]
[negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =]
[negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =]
[), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -]
[{, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[{, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[{, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -]
[1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;]
[-, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =]
[-, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =]
[denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =]
[;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +]
[ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -]
[;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[=, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -]
[*, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;]
[;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *]
[=, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;]
[+, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =]
[+, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =]
[+, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =]
[-, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +]
[;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -]
[rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;]
[ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =]
[ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =]
[ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -]
[temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;]
[denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=]
[denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[=, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *]
[+, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -]
[+, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -]
[-, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *]
[;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[=, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *]
[-, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[*, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -]
[ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *]
[zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *]
[rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *]
[*, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =]
[rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -]
[yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;]
[denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -]
[*, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (]
[*, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (]
[*, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=]
[denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {]
[denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {]
[ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, []
[ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =]
[yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;]
[yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;]
[-, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, []
[}, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =]
[!=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return]
[!=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return]
[), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +]
[yb, ;, }, return, ya, +, yb, ;, }, public, static, double, log, (, final, double, x, ), {, return]
[}, return, ya, +, yb, ;, }, public, static, double, log, (, final, double, x, ), {, return, log, (]
[ya, +, yb, ;, }, public, static, double, log, (, final, double, x, ), {, return, log, (, x, ,]
[;, }, private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (]
[;, }, private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (]
[private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (, x, ==]
[(, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (, x, ==, 0, ), {, return]
[(, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (, x, ==, 0, ), {, return]
[], hiPrec, ), {, if, (, x, ==, 0, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =]
[], hiPrec, ), {, if, (, x, ==, 0, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =]
[if, (, x, ==, 0, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[{, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (]
[{, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (]
[{, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (]
[return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (]
[return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (]
[., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &]
[}, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=]
[bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||]
[bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||]
[Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=]
[(, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&]
[(, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&]
[), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=]
[(, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (]
[(, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (]
[&, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=]
[!=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {]
[!=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {]
[||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return]
[), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (]
[), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (]
[hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==]
[hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==]
[NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[}, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=]
[., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {]
[., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return]
[{, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =]
[{, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =]
[0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, )]
[], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (]
[], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (]
[., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >]
[}, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -]
[POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (]
[POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (]
[;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (, (]
[;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (, (]
[int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (, (, bits, &]
[(, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==]
[>, >, 52, ), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (]
[>, >, 52, ), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (]
[52, ), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==]
[if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (]
[if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (]
[(, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=]
[0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {]
[0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {]
[==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[{, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[{, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return]
[!=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }]
[), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=]
[0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (]
[0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (]
[], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (]
[], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (]
[Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &]
[;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==]
[Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {]
[., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --]
[;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;]
[bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=]
[(, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (]
[(, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (]
[(, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (]
[(, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (]
[bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (]
[bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (]
[bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (]
[0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==]
[), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -]
[0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||]
[0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||]
[{, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==]
[;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&]
[;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&]
[<<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <]
[;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&]
[;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&]
[}, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >]
[(, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&]
[(, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&]
[exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==]
[==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =]
[==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =]
[), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[>, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -]
[&&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +]
[{, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =]
[{, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =]
[xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *]
[;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =]
[;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =]
[;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =]
[xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +]
[xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -]
[;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =]
[;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =]
[tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -]
[xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;]
[HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =]
[double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;]
[=, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =]
[ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =]
[ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =]
[xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, []
[xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, []
[xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, []
[xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -]
[ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =]
[ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =]
[final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, []
[LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =]
[LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =]
[LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, []
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;]
[yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=]
[lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;]
[lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;]
[;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =]
[(, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =]
[i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *]
[LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *]
[i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *]
[ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +]
[aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =]
[aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =]
[tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, []
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =]
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +]
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;]
[[, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =]
[[, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =]
[lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +]
[lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +]
[LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, []
[], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;]
[aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =]
[aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =]
[ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *]
[lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[=, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[+, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[-, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *]
[ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +]
[yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =]
[yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =]
[yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =]
[ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, []
[;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, )]
[return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (]
[return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (]
[ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (]
[ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (]
[yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (, bits, &]
[double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >]
[[, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =]
[[, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =]
[(, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (]
[(, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (]
[), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &]
[bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /]
[&, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (]
[&, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (]
[), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +]
[>, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (]
[>, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (]
[42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &]
[=, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =]
[), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =]
[+, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (]
[+, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (]
[bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=]
[double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =]
[double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =]
[=, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *]
[=, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =]
[=, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =]
[=, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =]
[;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +]
[(, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -]
[{, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =]
[{, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =]
[tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =, epsilon, -]
[;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =]
[+, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =]
[ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =]
[ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =]
[epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &]
[=, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =]
[=, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =]
[;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +]
[double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (]
[double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (]
[=, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &]
[final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;]
[numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =]
[numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =]
[numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =]
[bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -]
[bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -]
[0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *]
[final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -]
[final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -]
[denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *]
[TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;]
[(, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=]
[(, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=]
[&, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /]
[xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =]
[xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =]
[denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, []
[denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, []
[denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, []
[denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -]
[denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =]
[denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =]
[final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, []
[LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =]
[LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =]
[LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, []
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =]
[0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;]
[yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=]
[lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;]
[lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;]
[;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =]
[(, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =]
[i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *]
[LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =]
[2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *]
[i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =]
[xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *]
[ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +]
[aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =]
[aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =]
[tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, []
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =]
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +]
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;]
[[, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =]
[[, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =]
[lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +]
[lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +]
[LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, []
[], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;]
[aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =]
[aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =]
[ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *]
[lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[=, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[+, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[-, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =]
[ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =]
[xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +]
[ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =]
[*, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -]
[xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (]
[xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (]
[xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (]
[yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -]
[xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -]
[lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {]
[aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =]
[+, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -]
[;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;]
[=, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =]
[=, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =]
[=, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =]
[(, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *]
[-, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +]
[-, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;]
[), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =]
[), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =]
[), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =]
[}, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *]
[{, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +]
[lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -]
[-, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;]
[;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =]
[=, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *]
[*, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +]
[+, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;]
[;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =]
[=, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *]
[*, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +]
[epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -]
[-, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[=, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *]
[*, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +]
[+, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;]
[;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =]
[=, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *]
[0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =]
[0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =]
[lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *]
[+, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =]
[lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =]
[lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =]
[epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +]
[epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +]
[}, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, []
[exp, ;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =]
[;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -]
[double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (]
[double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (]
[double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (]
[=, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (, c, -]
[;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -]
[;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -]
[c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -, lnm, []
[lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;]
[0, ], ;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =]
[;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;]
[d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =]
[d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =]
[-, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +]
[c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;]
[a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (]
[c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -]
[b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -]
[+, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;]
[;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =]
[=, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;]
[+, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =]
[+, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[(, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[-, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[-, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[-, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -]
[c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (]
[c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (]
[c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (]
[b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -]
[b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -]
[b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -]
[d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *]
[=, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;]
[+, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =]
[*, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =]
[=, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +]
[(, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[-, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[-, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[-, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[-, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[*, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, []
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =]
[c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -]
[;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (]
[;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (]
[;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (]
[=, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -]
[+, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -]
[+, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -]
[;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, []
[+, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;]
[[, 1, ], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =]
[], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;]
[d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =]
[d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =]
[-, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +]
[c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;]
[a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (]
[a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (]
[c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -]
[b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -]
[+, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;]
[;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =]
[=, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;]
[+, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =]
[+, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +]
[(, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (]
[(, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (]
[-, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=]
[lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {]
[lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {]
[;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, []
[c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;]
[b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;]
[b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, []
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =]
[!=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return]
[!=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return]
[), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +]
[;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (]
[;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (]
[return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==]
[a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -]
[}, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -, 1, ), {, return]
[}, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -, 1, ), {, return]
[double, x, ), {, if, (, x, ==, -, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[double, x, ), {, if, (, x, ==, -, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[), {, if, (, x, ==, -, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==]
[), {, if, (, x, ==, -, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==]
[-, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[-, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[}, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >]
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||]
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <]
[Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -]
[., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =]
[., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =]
[;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +]
[1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =]
[||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -]
[x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (]
[x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (]
[x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (]
[-, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -]
[), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -]
[;, final, double, xpb, =, -, (, xpa, -, 1, -, x, ), ;, final, double, [, ], hiPrec, =]
[xpb, =, -, (, xpa, -, 1, -, x, ), ;, final, double, [, ], hiPrec, =, new, double, []
[-, x, ), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =]
[), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (]
[final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (, xpa, ,]
[=, new, double, [, 2, ], ;, final, double, lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (]
[=, new, double, [, 2, ], ;, final, double, lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (]
[2, ], ;, final, double, lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (]
[lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =]
[if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /]
[lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =]
[lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =]
[lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =]
[), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *]
[return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +]
[}, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return]
[}, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return]
[}, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return]
[}, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return]
[double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *]
[=, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +]
[=, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +]
[/, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, []
[final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +]
[final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +]
[epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, []
[*, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =]
[*, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =]
[*, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =]
[fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (]
[fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (]
[fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (]
[hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *]
[1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -]
[hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *]
[0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +]
[}, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1, ;, return]
[}, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1, ;, return]
[{, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1, ;, return, y, *]
[x, ;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double, hiPrec, [, ], =]
[}, public, static, double, log10, (, final, double, x, ), {, final, double, hiPrec, [, ], =, new, double, []
[double, x, ), {, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, final, double, lores, =]
[), {, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, final, double, lores, =, log, (]
[final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, final, double, lores, =, log, (, x, ,]
[=, new, double, [, 2, ], ;, final, double, lores, =, log, (, x, ,, hiPrec, ), ;, if, (]
[=, new, double, [, 2, ], ;, final, double, lores, =, log, (, x, ,, hiPrec, ), ;, if, (]
[2, ], ;, final, double, lores, =, log, (, x, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (]
[lores, =, log, (, x, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =]
[if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =, hiPrec, []
[., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *]
[{, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =]
[{, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =]
[{, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =]
[{, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =]
[lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =, hiPrec, []
[final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +]
[tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -]
[*, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =]
[*, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =]
[*, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =]
[*, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =]
[;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, []
[lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -]
[hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +]
[hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +]
[0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, []
[final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =]
[0, ], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =]
[lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return]
[lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return]
[lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return]
[lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return]
[lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return]
[hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *]
[1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +]
[1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +]
[;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *]
[double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +]
[double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +]
[=, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *]
[;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +]
[;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +]
[double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *]
[lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return]
[lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return]
[rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (]
[;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x, ), /]
[public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x, ), /, log, (]
[;, }, public, static, double, pow, (, double, x, ,, double, y, ), {, final, double, lns, [, ], =]
[static, double, pow, (, double, x, ,, double, y, ), {, final, double, lns, [, ], =, new, double, []
[x, ,, double, y, ), {, final, double, lns, [, ], =, new, double, [, 2, ], ;, if, (]
[x, ,, double, y, ), {, final, double, lns, [, ], =, new, double, [, 2, ], ;, if, (]
[double, y, ), {, final, double, lns, [, ], =, new, double, [, 2, ], ;, if, (, y, ==]
[final, double, lns, [, ], =, new, double, [, 2, ], ;, if, (, y, ==, 0.0, ), {, return]
[=, new, double, [, 2, ], ;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (]
[=, new, double, [, 2, ], ;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (]
[double, [, 2, ], ;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (, x, !=]
[;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return]
[0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[{, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, ==]
[(, x, !=, x, ), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =]
[(, x, !=, x, ), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =]
[), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (]
[}, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[}, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (]
[if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (]
[x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =]
[x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, )]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <]
[0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&]
[0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&]
[!=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&]
[{, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&, (]
[{, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&, (]
[yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &]
[long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==]
[if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >]
[yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&]
[yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&]
[1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==]
[==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&]
[==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&]
[1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (]
[1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (]
[{, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi, &]
[., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==]
[if, (, y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[(, y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <]
[1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return]
[1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return]
[-, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[-, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >]
[(, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return]
[}, if, (, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (]
[}, if, (, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (]
[(, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==]
[(, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==]
[0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[}, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=]
[NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return]
[x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (]
[x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (]
[Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <]
[{, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return]
[), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return]
[), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return]
[y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==]
[0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==]
[else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *]
[., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==]
[}, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return]
[}, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return]
[POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[{, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *]
[(, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return]
[;, }, if, (, x, *, x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return]
[x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (]
[x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (]
[1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==]
[1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==]
[;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[else, {, return, 0.0, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=]
[;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return]
[x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (]
[x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (]
[Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <]
[(, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0, ), {, long, yi, =]
[y, ), {, return, y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, )]
[y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[}, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==]
[(, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&]
[(, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&]
[y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (]
[y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (]
[0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &]
[long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==]
[long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -]
[(, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return]
[(, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[(, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[&, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >]
[{, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =]
[0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, )]
[0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (]
[}, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==]
[(, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&]
[(, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&]
[y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (]
[y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (]
[0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &]
[long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==]
[long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return]
[y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return]
[y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==]
[1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *]
[., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==]
[}, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return]
[}, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return]
[NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[{, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *]
[(, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return]
[;, }, if, (, x, *, x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return]
[x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (]
[x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (]
[1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <]
[., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (]
[., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (]
[., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (]
[;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=]
[else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||]
[else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||]
[return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=]
[0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -]
[if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return]
[x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (]
[<, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -]
[), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,]
[TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (]
[TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (]
[y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==]
[TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, )]
[pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return]
[pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return]
[pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return]
[(, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (]
[(, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (]
[,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, )]
[), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, ), y, &]
[if, (, y, ==, (, long, ), y, ), {, return, (, (, long, ), y, &, 1, ), ==]
[y, ==, (, long, ), y, ), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?]
[(, long, ), y, ), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (]
[long, ), y, ), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -]
[y, ), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,]
[return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :]
[(, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -]
[long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (]
[), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -]
[&, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,]
[(, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else, {, return]
[(, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else, {, return]
[), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (]
[), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (]
[), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (]
[}, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <]
[{, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&]
[{, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&]
[Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >]
[., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >, -]
[ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =]
[ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =]
[double, yb, ;, if, (, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *]
[;, if, (, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;]
[(, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =]
[(, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =]
[(, y, <, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =]
[<, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +]
[&&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -]
[>, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;]
[8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =]
[8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =]
[{, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -]
[ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =]
[ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =]
[y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *]
[;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =]
[;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =]
[=, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *]
[-, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;]
[;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =]
[;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =]
[;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =]
[}, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (]
[}, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (]
[}, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (]
[{, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +]
[tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -]
[*, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *]
[;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *]
[tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;]
[tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =]
[tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =]
[9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -]
[tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =]
[tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (]
[*, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,]
[yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (]
[yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (]
[ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (, Double, ., isInfinite, (]
[lores, =, log, (, x, ,, lns, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return]
[lns, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =]
[lns, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =]
[;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =, lns, []
[(, lores, ), ), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =]
[(, lores, ), ), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =]
[), ), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, []
[}, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =]
[}, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =]
[lna, =, lns, [, 0, ], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *]
[], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =]
[], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =]
[], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =]
[double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +]
[=, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -]
[[, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;]
[], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=]
[], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=]
[double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -]
[=, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;]
[*, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =]
[lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =]
[lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =]
[tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *]
[lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =]
[lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =]
[lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =]
[lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =]
[tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *]
[lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +]
[lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +]
[tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *]
[final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +]
[final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +]
[aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *]
[lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;]
[ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =]
[ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =]
[final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +]
[ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;]
[lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =]
[*, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -]
[yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (]
[yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (]
[yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (]
[lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -]
[ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -]
[lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =]
[lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =]
[aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /]
[ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;]
[lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =]
[lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =]
[lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =]
[-, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *]
[lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +]
[-, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (]
[-, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (]
[-, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /]
[;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;]
[z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =]
[z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =]
[z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =]
[1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *]
[120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +]
[;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (]
[;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (]
[=, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /]
[lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;]
[(, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =]
[(, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =]
[(, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =]
[/, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *]
[), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +]
[z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;]
[z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =]
[z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =]
[z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =]
[lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *]
[(, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +]
[/, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;]
[), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =]
[), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =]
[z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *]
[0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =]
[z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (]
[z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,]
[lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,]
[z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;, return]
[), ;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (]
[), ;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (]
[return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (, e, ==]
[public, static, double, pow, (, double, d, ,, int, e, ), {, if, (, e, ==, 0, ), {, return]
[d, ,, int, e, ), {, if, (, e, ==, 0, ), {, return, 1.0, ;, }, else, if, (]
[d, ,, int, e, ), {, if, (, e, ==, 0, ), {, return, 1.0, ;, }, else, if, (]
[int, e, ), {, if, (, e, ==, 0, ), {, return, 1.0, ;, }, else, if, (, e, <]
[{, if, (, e, ==, 0, ), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {]
[(, e, ==, 0, ), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =]
[e, ==, 0, ), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -]
[0, ), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;]
[{, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d, =]
[{, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d, =]
[1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d, =, 1.0, /]
[<, 0, ), {, e, =, -, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =]
[-, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =]
[-, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =]
[;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *]
[;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =]
[;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =]
[final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =, cd, -]
[int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =, cd, -, (]
[int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =, cd, -, (]
[=, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =, cd, -, (, cd, -]
[splitFactor, *, d, ;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =]
[splitFactor, *, d, ;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =]
[d, ;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =, d, -]
[=, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =]
[-, d, ), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =]
[double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double, d2p, =]
[d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =]
[1, ;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =]
[=, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (]
[=, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (]
[;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=]
[;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (]
[;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (]
[double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (, (]
[double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (, (]
[=, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (, (, e, &]
[double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=]
[e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =]
[e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =]
[0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *]
[e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =]
[e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =]
[0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *]
[final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =]
[final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =]
[tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -]
[=, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (]
[=, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (]
[*, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -]
[splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =]
[splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =]
[resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -]
[cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =]
[cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =]
[cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =]
[(, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *]
[-, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -]
[resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (]
[resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (]
[), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (]
[), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (]
[;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (]
[;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (]
[double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -]
[double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -]
[=, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *]
[rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -]
[rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -]
[final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *]
[=, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -]
[=, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -]
[*, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *]
[(, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;]
[(, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =]
[-, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;]
[*, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =]
[*, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =]
[*, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =]
[), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *]
[rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +]
[d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =]
[d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =]
[;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *]
[=, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =]
[=, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =]
[*, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *]
[final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =]
[final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =]
[tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -]
[=, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (]
[=, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (]
[*, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -]
[splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =]
[splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =]
[d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -]
[cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =]
[cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =]
[cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =]
[(, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *]
[-, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -]
[d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (]
[d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (]
[), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (]
[), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (]
[;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (]
[;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (]
[double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -]
[double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -]
[=, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *]
[d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -]
[d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -]
[final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *]
[=, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -]
[=, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -]
[*, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *]
[-, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =]
[-, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =]
[*, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *]
[), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;]
[d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =]
[d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =]
[d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -]
[), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (]
[), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (]
[d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -]
[), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;]
[final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =]
[final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =]
[final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =]
[final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =]
[cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *]
[splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +]
[tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +]
[;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (]
[;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (]
[=, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -]
[(, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;]
[-, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =]
[-, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =]
[), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +]
[d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;]
[d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =]
[d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =]
[+, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >]
[tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return]
[tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return]
[d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +]
[}, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =]
[}, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =]
[resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =, x, *]
[private, static, double, polySine, (, final, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =]
[double, polySine, (, final, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;]
[(, final, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =]
[(, final, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =]
[(, final, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =]
[double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *]
[), {, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +]
[{, double, x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -]
[x2, =, x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;]
[x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =]
[x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =]
[x, *, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =]
[x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *]
[double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +]
[=, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;]
[;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =]
[;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =]
[;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =]
[=, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *]
[*, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +]
[x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -]
[-, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[=, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *]
[*, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *]
[0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return]
[x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =]
[x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =]
[x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *]
[}, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =]
[static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;]
[polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =]
[polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =]
[polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =]
[double, x, ), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *]
[), {, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +]
[{, double, x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -]
[x2, =, x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;]
[x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =]
[x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =]
[x, *, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =]
[x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *]
[double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +]
[=, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;]
[;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =]
[;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =]
[;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =]
[=, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *]
[*, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +]
[x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -]
[-, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;]
[;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=]
[p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return]
[;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =]
[;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, )]
[}, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (]
[}, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (]
[private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (, (]
[private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (, (]
[double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (, (, xa, *]
[double, xa, ,, double, xb, ), {, int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +]
[int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =]
[int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =]
[=, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -]
[=, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -]
[int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, []
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, []
[xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =]
[xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =]
[EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, []
[sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =]
[sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =]
[SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, []
[sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =]
[sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =]
[SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, []
[double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =]
[idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =]
[;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (]
[idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =]
[epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =]
[double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (]
[;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =]
[;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =]
[double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *]
[final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =]
[final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =]
[double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (]
[double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (]
[=, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +]
[epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -]
[;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;]
[double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=]
[double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=]
[=, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -]
[*, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =]
[+=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =]
[sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =]
[result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =]
[result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =]
[double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +]
[double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =]
[b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -]
[t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -]
[;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;]
[c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +]
[c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;]
[b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =]
[=, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *]
[c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +]
[d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +]
[d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +]
[b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +]
[sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *]
[cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +]
[cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +]
[costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *]
[b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (]
[b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (]
[b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=]
[+, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {]
[*, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =]
[*, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =]
[sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (]
[sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (]
[sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (]
[*, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +]
[costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *]
[*, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (]
[*, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (]
[;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +]
[xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -]
[xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -]
[!=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (]
[!=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (]
[), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +]
[=, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *]
[(, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (]
[(, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (]
[costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +]
[*, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *]
[cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;]
[cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =]
[cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =]
[-, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +]
[sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;]
[sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =]
[), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -]
[*, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (]
[*, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (]
[*, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (]
[sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[*, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[-, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }]
[c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =]
[c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =]
[a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +]
[), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return]
[return, result, ;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, ), {, final, double, pi2a, =]
[double, cosQ, (, double, xa, ,, double, xb, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =]
[double, xb, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =]
[double, xb, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =]
[), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -]
[=, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =]
[1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -]
[=, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +]
[final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;]
[a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=]
[a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=]
[pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -]
[;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return]
[b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (]
[-, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,]
[;, }, private, static, double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =]
[static, double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, )]
[double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (]
[double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (]
[tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (, (]
[tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (, (]
[double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (, (, xa, *]
[double, xb, ,, boolean, cotanFlag, ), {, int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +]
[int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =]
[int, idx, =, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =]
[=, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -]
[=, (, int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -]
[int, ), (, (, xa, *, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, []
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, []
[xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =]
[xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =]
[EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, []
[sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =]
[sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =]
[SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, []
[sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =]
[sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =]
[SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, []
[double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =]
[idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =]
[;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (]
[idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =]
[epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =]
[double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (]
[), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =]
[), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =]
[final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *]
[;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =]
[;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =]
[final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (]
[final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (]
[cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +]
[(, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -]
[), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;]
[double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=]
[double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=]
[=, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -]
[*, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =]
[temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =]
[-, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =]
[temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =]
[temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =]
[double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +]
[double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =]
[b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[=, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (]
[;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -]
[t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -]
[;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;]
[c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +]
[c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;]
[b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =]
[=, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *]
[c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =]
[b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +]
[d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +]
[d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +]
[b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +]
[sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *]
[cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +]
[cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +]
[costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *]
[=, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =]
[=, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =]
[+, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +]
[sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -]
[sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (]
[sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (]
[sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (]
[cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -]
[costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -]
[;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;]
[sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =]
[a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =]
[b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c, =]
[double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d, =]
[=, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;]
[(, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =]
[(, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =]
[-, a, -, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *]
[-, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;]
[), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =]
[), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =]
[a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +]
[b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;]
[c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =]
[=, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -]
[d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[*, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =]
[c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -]
[a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *]
[t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =]
[=, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +]
[;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;]
[=, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =]
[b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -]
[+, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[+, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[+, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[=, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[(, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +]
[a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *]
[c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +]
[c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +]
[b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *]
[b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;]
[d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =]
[d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =]
[b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -]
[=, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (]
[=, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (]
[=, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (]
[=, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (]
[+, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *]
[*, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +]
[*, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +]
[+, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *]
[*, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +]
[*, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +]
[+, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *]
[=, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =]
[=, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =]
[-, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +]
[+, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =]
[sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -]
[*, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (]
[*, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (]
[*, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (]
[+, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -]
[*, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -]
[cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;, if, (]
[double, cosb, =, -, (, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;]
[=, -, (, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =]
[(, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;]
[-, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =]
[-, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;]
[), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =]
[if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;]
[cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =]
[{, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;]
[tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =]
[tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;]
[cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =]
[sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =]
[sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =]
[tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /]
[tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;]
[cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =]
[cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =]
[cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *]
[=, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =]
[=, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =]
[tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (]
[tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (]
[}, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +]
[=, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -]
[temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =]
[temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =]
[est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -]
[HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;]
[double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =]
[double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =]
[=, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *]
[), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =]
[), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =]
[-, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (]
[-, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (]
[;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +]
[=, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -]
[temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =]
[temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =]
[cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -]
[cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =]
[cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =]
[=, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (]
[=, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (]
[=, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (]
[=, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (]
[=, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (]
[cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -]
[cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -]
[temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *]
[-, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -]
[-, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -]
[;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *]
[cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -]
[cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -]
[cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *]
[cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -]
[cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -]
[double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *]
[(, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /]
[-, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;]
[*, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=]
[*, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=]
[-, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /]
[*, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -]
[cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *]
[estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /]
[cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /]
[;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (]
[;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (]
[+=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=]
[+=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =]
[+=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =]
[sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +]
[sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +]
[sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +]
[cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *]
[cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *]
[if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (]
[!=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {]
[), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =]
[{, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -]
[=, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }]
[+, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=]
[*, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return]
[*, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return]
[;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +]
[err, ;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits, =]
[err, ;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits, =]
[static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (]
[,, double, result, [, ], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =]
[,, double, result, [, ], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =]
[[, ], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, )]
[], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (]
[], ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (]
[), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (]
[), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (]
[inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >]
[., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &]
[x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -]
[;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;]
[exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;]
[), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=]
[(, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;]
[(, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;]
[>, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;]
[), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=]
[;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =]
[;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =]
[;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >]
[long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =]
[long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =]
[;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -]
[long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -, (]
[long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -, (]
[;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -, (, idx, <<]
[idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (]
[idx, =, exponent, >, >, 6, ;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (]
[exponent, >, >, 6, ;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=]
[6, ;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {]
[int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =]
[int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =]
[shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (]
[shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (]
[exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==]
[idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?]
[6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :]
[), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (]
[), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (]
[), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (]
[if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, []
[if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, []
[shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -]
[), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<]
[=, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;]
[idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=]
[idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=]
[idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=]
[0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, []
[(, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >]
[RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (]
[RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (]
[idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -]
[], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;]
[shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =]
[shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =]
[), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (]
[), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (]
[), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (]
[shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, []
[[, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<]
[>, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |]
[>, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (]
[>, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (]
[>, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (]
[(, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, []
[(, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, []
[-, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +]
[=, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >]
[(, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (]
[(, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (]
[[, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -]
[shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;]
[|, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =]
[|, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =]
[(, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (]
[(, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (]
[(, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (]
[[, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, []
[[, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, []
[+, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +]
[>, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<]
[(, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |]
[64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (]
[64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (]
[64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (]
[shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, []
[shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, []
[), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +]
[RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >]
[[, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (]
[[, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (]
[+, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -]
[(, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {]
[[, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =]
[[, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =]
[idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (]
[idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (]
[2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==]
[>, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?]
[(, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :]
[(, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :]
[-, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, []
[-, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, []
[), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -]
[}, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;]
[{, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =]
[{, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =]
[=, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, []
[==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;]
[), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =]
[), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =]
[0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, []
[0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, []
[RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +]
[shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =]
[shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =]
[idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >]
[RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =]
[RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =]
[idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &]
[}, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =]
[}, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =]
[inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >]
[;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =]
[;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =]
[b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &]
[;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =]
[;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =]
[c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *]
[>, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =]
[>, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =]
[;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *]
[&, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =]
[&, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =]
[;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *]
[*, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =]
[*, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =]
[;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *]
[*, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =]
[*, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =]
[;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +]
[long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (]
[long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (]
[=, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<]
[ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =]
[ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =]
[a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +]
[*, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (]
[*, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (]
[prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >]
[<<, 32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =]
[<<, 32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =]
[32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (]
[32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (]
[;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd, &]
[=, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=]
[>, >, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =]
[>, >, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =]
[>, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (]
[>, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (]
[32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &]
[boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=]
[&, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =]
[&, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =]
[0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (]
[0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (]
[!=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &]
[boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=]
[ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[&, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[&, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (]
[(, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &]
[bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;]
[bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[{, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &]
[;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=]
[bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +]
[0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (]
[0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (]
[!=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<]
[bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;]
[(, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =]
[(, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =]
[&, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +]
[0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (]
[0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (]
[;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >]
[prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;]
[(, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =]
[(, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =]
[bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (]
[bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (]
[32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &]
[prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=]
[(, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[(, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[>, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >]
[bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =]
[bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &]
[), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;]
[prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =]
[prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =]
[;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *]
[c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[>, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;]
[d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *]
[0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &]
[(, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=]
[bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[>, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &]
[), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &]
[(, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=]
[), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[!=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[!=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >]
[bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =]
[bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &]
[), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;]
[prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =]
[prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =]
[;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *]
[c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;]
[shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =]
[shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =]
[>, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *]
[32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;]
[d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =]
[d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =]
[shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *]
[0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;]
[bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=]
[bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=]
[b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +]
[*, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (]
[*, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (]
[d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (]
[d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (]
[bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +]
[*, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<]
[*, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =]
[prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, )]
[+=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (]
[+=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (]
[(, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >]
[ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;]
[<<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=]
[), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;]
[int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=]
[int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=]
[int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >]
[(, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;]
[>, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=]
[>, 62, ), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;]
[), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =]
[), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =]
[2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >]
[prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;]
[prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =]
[prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =]
[>, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &]
[62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;]
[prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =]
[prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =]
[prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =]
[2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, []
[>, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >]
[>, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;]
[;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[=, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, []
[0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &]
[c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;]
[PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =]
[PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =]
[0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[>, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =]
[>, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *]
[=, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *]
[0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;]
[ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =]
[ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =]
[a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *]
[=, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =]
[=, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =]
[*, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +]
[d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (]
[d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (]
[bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<]
[ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =]
[ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =]
[a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +]
[*, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (]
[*, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (]
[prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >]
[+, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;]
[ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =]
[ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =]
[<<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (]
[<<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (]
[), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &]
[prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=]
[ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;]
[(, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[(, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[>, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &]
[), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=]
[bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;]
[(, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =]
[(, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =]
[bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (]
[bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (]
[0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &]
[0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[(, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[(, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (]
[(, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &]
[bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[{, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &]
[;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=]
[bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +]
[0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (]
[0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (]
[!=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<]
[bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;]
[(, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =]
[(, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =]
[&, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +]
[0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (]
[0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (]
[;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >]
[prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;]
[(, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =]
[(, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =]
[bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (]
[bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (]
[32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &]
[prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[(, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[(, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[>, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =]
[(, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, []
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >]
[!, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[{, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, []
[;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &]
[c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;]
[PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =]
[PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =]
[1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[>, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[>, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[=, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;]
[[, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[[, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *]
[0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &]
[(, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[>, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[(, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =]
[bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >]
[bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =]
[bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &]
[), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;]
[prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =]
[prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =]
[prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =]
[;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, []
[>, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >]
[>, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;]
[;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[=, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, []
[0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &]
[c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;]
[PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =]
[PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =]
[0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[>, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[>, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[=, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *]
[0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =]
[a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (]
[bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &]
[(, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[>, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[(, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||]
[0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =]
[(, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (]
[(, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (]
[bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >]
[!, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /]
[prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =]
[prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =]
[prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =]
[++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (]
[++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (]
[;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (]
[;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (]
[}, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (]
[}, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (]
[tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &]
[prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<]
[>, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +]
[12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (]
[12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (]
[;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >]
[(, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /]
[(, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /]
[<<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =]
[<<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =]
[), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +]
[>, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =]
[>, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -]
[24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (]
[24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (]
[24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (]
[), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -]
[TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -]
[;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;]
[;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;]
[sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, []
[+, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =]
[;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;]
[;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;]
[sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, []
[(, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =]
[(, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =]
[-, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *]
[-, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;]
[-, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;]
[), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, []
[[, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =]
[[, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =]
[], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *]
[2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =]
[2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =]
[double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =]
[), {, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;]
[boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;, xa, =]
[;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (]
[;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (]
[quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (, x, <]
[;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {]
[xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =]
[double, xb, =, 0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;]
[=, 0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =]
[0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[(, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==]
[negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =]
[negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =]
[xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (]
[}, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[}, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[(, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[{, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -]
[Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=]
[bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||]
[bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||]
[0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[(, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (]
[(, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (]
[!=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >]
[), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, []
[;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;]
[if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (]
[xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, []
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[(, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, []
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >]
[xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {]
[getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant, ^=]
[=, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (]
[(, ), ;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case]
[}, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :, return]
[(, negative, ), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (]
[), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,]
[2, ;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case]
[switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return]
[quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return, cosQ, (]
[{, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,]
[return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case]
[xa, ,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return]
[,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -]
[), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (]
[case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,]
[cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case]
[,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return]
[xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -]
[;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (]
[2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (, xa, ,]
[xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return]
[xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return]
[:, return, Double, ., NaN, ;, }, }, public, static, double, cos, (, double, x, ), {, int, quadrant, =]
[;, }, }, public, static, double, cos, (, double, x, ), {, int, quadrant, =, 0, ;, double, xa, =]
[static, double, cos, (, double, x, ), {, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (]
[static, double, cos, (, double, x, ), {, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (]
[cos, (, double, x, ), {, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <]
[x, ), {, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {]
[{, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =]
[int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =, -]
[double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (]
[double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (]
[double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (]
[=, x, ;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=]
[;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||]
[;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||]
[(, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[(, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =]
[xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (]
[xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (]
[Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >]
[NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, []
[0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;]
[if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (]
[xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, []
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[(, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, []
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >]
[xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (]
[., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case]
[), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return]
[xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (]
[cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,]
[), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case]
[switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return]
[(, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -]
[), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -, sinQ, (]
[case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,]
[cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case]
[,, xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return]
[xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -]
[;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ, (]
[1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ, (, xa, ,]
[sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case]
[,, xb, ), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return]
[), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (]
[case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa, ,]
[(, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return]
[(, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return]
[:, return, Double, ., NaN, ;, }, }, public, static, double, tan, (, double, x, ), {, boolean, negative, =]
[;, }, }, public, static, double, tan, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =]
[double, tan, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, =]
[x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (]
[x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (]
[{, boolean, negative, =, false, ;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <]
[=, false, ;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {]
[;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =]
[quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;]
[0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =]
[;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[(, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==]
[negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =]
[negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =]
[xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (]
[}, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[}, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[(, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[{, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -]
[Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=]
[bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||]
[bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||]
[0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =]
[xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (]
[xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (]
[Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >]
[NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, []
[0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;]
[if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (]
[xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =]
[reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[=, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, )]
[double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, []
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[(, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[(, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =]
[), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, []
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (]
[xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >]
[xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[=, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, xa, >]
[xb, =, cw, ., getRemB, (, ), ;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a, =]
[), ;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =]
[>, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =]
[>, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =]
[), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -]
[=, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =]
[1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -]
[=, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +]
[final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;]
[a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=]
[a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=]
[pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -]
[xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;]
[double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =]
[double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =]
[=, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +]
[(, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;]
[-, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =]
[pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (]
[), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -]
[b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -]
[-, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;]
[;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=]
[=, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;]
[+, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=]
[-, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (]
[-, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (]
[a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (]
[a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (]
[b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &]
[quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==]
[;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {]
[^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =]
[;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =, tanQ, (]
[double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =, tanQ, (, xa, ,]
[;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,]
[1, ), ==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {]
[==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =]
[0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -]
[{, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ, (]
[=, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ, (, xa, ,]
[(, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,]
[), ;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (]
[else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (, negative, ), {]
[result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (, negative, ), {, result, =]
[=, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (, negative, ), {, result, =, -]
[xa, ,, xb, ,, true, ), ;, }, if, (, negative, ), {, result, =, -, result, ;, }, return]
[result, =, -, result, ;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return]
[-, result, ;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan, (]
[;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan, (, x, ,]
[return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan, (, x, ,, 0.0, ,]
[;, }, private, static, double, atan, (, double, xa, ,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate, =]
[double, xa, ,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate, =, false, ;, int, idx, ;, if, (]
[double, xa, ,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate, =, false, ;, int, idx, ;, if, (]
[,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==]
[boolean, leftPlane, ), {, boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return]
[boolean, leftPlane, ), {, boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return]
[), {, boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?]
[boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?, copySign, (]
[boolean, negate, =, false, ;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?, copySign, (]
[;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,]
[;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :]
[0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (]
[0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (]
[{, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <]
[?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {]
[(, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =]
[Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -]
[PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;]
[xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =]
[), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -]
[xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;]
[}, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =]
[0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (]
[0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (]
[{, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >]
[xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return]
[xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return]
[;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (]
[;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (]
[=, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^]
[;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?]
[negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (]
[negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (]
[=, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -]
[=, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -]
[if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *]
[>, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :]
[1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (]
[1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (]
[1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (]
[(, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *]
[(, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (]
[(, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (]
[Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <]
[*, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {]
[), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =]
[Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, )]
[., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (]
[., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (]
[PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (]
[PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (]
[*, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (]
[*, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (]
[*, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (]
[*, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (]
[F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -]
[;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *]
[if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *]
[xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +]
[), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *]
[=, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, ), +]
[xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =]
[xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =]
[xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /]
[8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;]
[*, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =]
[+, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, )]
[0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (]
[0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (]
[), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -]
[;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (]
[;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (]
[}, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (]
[}, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (]
[}, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (]
[}, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (]
[else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (, -]
[final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *]
[oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *]
[1, /, xa, ;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +]
[;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *]
[(, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +]
[-, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =]
[-, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =]
[*, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -]
[*, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -]
[*, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, []
[oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =]
[), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -]
[+, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (]
[+, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (]
[+, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (]
[), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -]
[}, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +]
[}, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +]
[epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, []
[TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;]
[idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=]
[idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=]
[;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -]
[;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -]
[epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, []
[xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =]
[xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =]
[TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +]
[idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;]
[), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =]
[;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -]
[epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (]
[epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (]
[epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (]
[xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -]
[TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -]
[], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;]
[double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =]
[=, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;]
[+, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =]
[+, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =]
[;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *]
[temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =]
[temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =]
[temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =]
[epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +]
[epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -]
[temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =]
[temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =]
[temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =]
[temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +]
[xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -]
[HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;]
[double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =]
[=, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;]
[+, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=]
[;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (]
[;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (]
[yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==]
[;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =]
[;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =]
[=, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /]
[ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (]
[ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (]
[xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +]
[xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +]
[+=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (]
[+=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (]
[;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +]
[idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *]
[==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (]
[==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (]
[==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (]
[), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, []
[double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +]
[double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +]
[=, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, []
[+, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;]
[xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =]
[xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =]
[xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *]
[*, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;]
[TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =]
[TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =]
[idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *]
[), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =]
[), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =]
[ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *]
[ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *]
[epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, []
[epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =]
[epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =]
[denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +]
[double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =]
[temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -]
[=, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (]
[=, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (]
[=, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (]
[*, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -]
[[, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -]
[;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;]
[za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =]
[za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =]
[za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =]
[1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *]
[1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *]
[temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, []
[zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +]
[zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +]
[-, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *]
[-, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *]
[za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, []
[-, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;]
[), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =]
[), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =]
[temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +]
[xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;]
[TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=]
[[, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -]
[idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (]
[idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (]
[idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (]
[+, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -]
[*, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -]
[idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;]
[;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =]
[=, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;]
[+, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=]
[+, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=]
[;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *]
[;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *]
[+=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, []
[temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;]
[za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =]
[za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =]
[temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /]
[;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;]
[=, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =]
[=, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =]
[;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *]
[[, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =]
[[, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =]
[idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (]
[idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (]
[;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +]
[epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -]
[ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =]
[ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =]
[HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -]
[final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa, ;]
[yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =]
[yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =]
[(, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *]
[temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =]
[temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =]
[;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (]
[;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (]
[double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +]
[ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -]
[za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =]
[za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =]
[HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -]
[final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;]
[zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =]
[zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =]
[=, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (]
[=, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (]
[=, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (]
[=, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (]
[=, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (]
[za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -]
[za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -]
[temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *]
[-, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -]
[-, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -]
[;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *]
[double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -]
[double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -]
[=, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *]
[-, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -]
[-, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -]
[;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *]
[(, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /]
[-, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;]
[*, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=]
[*, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=]
[*, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=]
[*, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=]
[zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -]
[yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *]
[zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /]
[yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /]
[zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;]
[yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=]
[yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=]
[zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /]
[za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }]
[yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =]
[-, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;]
[*, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =]
[;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =]
[;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =]
[+=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *]
[/, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;]
[;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =]
[epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;]
[ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =]
[ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =]
[ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =]
[epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *]
[yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +]
[;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -]
[double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;]
[=, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =]
[=, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =]
[=, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =]
[*, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *]
[;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +]
[=, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =]
[=, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *]
[*, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +]
[epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -]
[-, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[=, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *]
[*, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +]
[+, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =]
[=, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *]
[*, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +]
[epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -]
[-, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[=, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *]
[*, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *]
[+, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =]
[=, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;]
[*, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =]
[*, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =]
[+, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +]
[0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;]
[yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =]
[=, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -]
[yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (]
[yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (]
[yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (]
[epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -]
[epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -]
[=, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;]
[;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =]
[=, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;]
[+, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=]
[+, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=]
[;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /]
[yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (]
[yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (]
[-, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +]
[-, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +]
[temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *]
[;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =]
[;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =]
[;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =]
[=, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, []
[yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +]
[1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =]
[+, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -]
[epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (]
[epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (]
[epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (]
[epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -]
[epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -]
[;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, []
[=, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -]
[idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;]
[+, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =]
[+, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =]
[;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +]
[zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;]
[-, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=]
[(, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -]
[za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -]
[idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -]
[ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =]
[yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =]
[zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za, +]
[temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (]
[za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =]
[=, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -]
[temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (]
[temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (]
[temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (]
[double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result, -]
[=, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -]
[leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final, double, pia, =]
[leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final, double, pia, =]
[{, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966, *]
[(, result, -, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =]
[(, result, -, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =]
[-, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *]
[-, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;]
[), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =]
[), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =]
[final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -]
[pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;]
[1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =]
[*, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -]
[2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (]
[2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (]
[2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (]
[final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za, -]
[pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +]
[*, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;]
[;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=]
[;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=]
[=, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -]
[-, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;]
[;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =]
[;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =]
[=, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +]
[pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (]
[pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (]
[result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^]
[zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {]
[pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =]
[-, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -]
[=, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;, }, return]
[;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (]
[;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (]
[;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (]
[return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (, x, !=]
[;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (, x, !=, x, ||]
[;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (, x, !=, x, ||]
[public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (, x, !=, x, ||, y, !=]
[(, double, y, ,, double, x, ), {, if, (, x, !=, x, ||, y, !=, y, ), {, return]
[(, double, y, ,, double, x, ), {, if, (, x, !=, x, ||, y, !=, y, ), {, return]
[{, if, (, x, !=, x, ||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (]
[{, if, (, x, !=, x, ||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (]
[(, x, !=, x, ||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==]
[y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =]
[y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =]
[{, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =, x, *]
[}, if, (, y, ==, 0, ), {, final, double, result, =, x, *, y, ;, final, double, invx, =]
[}, if, (, y, ==, 0, ), {, final, double, result, =, x, *, y, ;, final, double, invx, =]
[(, y, ==, 0, ), {, final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /]
[final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =]
[final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =]
[result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /]
[y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if, (]
[y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if, (]
[final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==]
[/, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (]
[/, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (]
[;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (, x, >]
[=, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (, x, >, 0, ), {, return]
[(, invx, ==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return]
[==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (]
[==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (]
[if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,]
[return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (]
[return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (]
[return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (]
[;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (, x, <]
[else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||]
[else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||]
[return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <]
[PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (]
[PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (]
[PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (]
[y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <]
[;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||]
[;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||]
[}, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <]
[<, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return]
[0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -]
[0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -]
[(, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return]
[(, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return]
[{, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return]
[;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (]
[;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (]
[else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (, y, ==]
[else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (, y, ==]
[}, }, else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[}, }, else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==]
[else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==]
[}, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[}, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[}, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *]
[{, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (]
[{, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (]
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==]
[(, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==]
[), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return]
[x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *]
[), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==]
[return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==]
[}, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[}, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==]
[Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==]
[}, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[}, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -]
[if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -]
[Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *]
[if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (]
[if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (]
[x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==]
[x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==]
[{, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[{, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -]
[return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -]
[PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *]
[}, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return]
[}, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return]
[if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -]
[if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -]
[Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *]
[return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (]
[return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (]
[Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==]
[Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==]
[return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >]
[PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||]
[PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||]
[PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||]
[F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /]
[}, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y, >]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return]
[{, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (]
[{, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (]
[{, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (]
[(, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <]
[>, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||]
[>, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||]
[>, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||]
[||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /]
[/, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[{, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -]
[(, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (]
[(, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==]
[0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[{, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >]
[-, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||]
[-, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||]
[-, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||]
[;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /]
[}, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /, y, >]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return]
[(, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (]
[(, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (]
[(, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (]
[>, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <]
[||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||]
[||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||]
[||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||]
[/, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /]
[>, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -]
[Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (]
[||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==]
[0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (]
[0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (]
[0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (]
[{, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >]
[-, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||]
[-, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||]
[-, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||]
[., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /]
[;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >]
[(, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return]
[(, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return]
[(, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return]
[), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *]
[>, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[>, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[>, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <]
[/, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||]
[/, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||]
[/, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||]
[>, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /]
[), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -]
[PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -]
[}, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, *]
[/, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =]
[/, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =]
[<, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /]
[return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (]
[return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (]
[PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (]
[}, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (]
[=, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,]
[/, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,]
[/, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,]
[;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,, x, <]
[r, ), ), {, return, atan, (, r, ,, 0, ,, x, <, 0, ), ;, }, double, ra, =]
[), {, return, atan, (, r, ,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (]
[,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =]
[,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =]
[,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -]
[}, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, final, double, xa, =]
[ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, final, double, xa, =, doubleHighPart, (]
[double, rb, =, r, -, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =]
[double, rb, =, r, -, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =]
[=, r, -, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -]
[-, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;]
[;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=]
[;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=]
[final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (]
[final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (]
[final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (]
[final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (]
[final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (]
[xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -]
[xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -]
[doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *]
[x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -]
[x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -]
[;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *]
[double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -]
[double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -]
[=, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *]
[-, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[-, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =]
[*, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;]
[*, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =]
[xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[*, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -]
[), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[+, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (]
[+, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==]
[-, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {]
[temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =]
[ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (]
[rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,]
[(, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =]
[==, 0, ), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (]
[), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,]
[ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,]
[ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,]
[copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x, <]
[y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, return]
[x, <, 0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (]
[x, <, 0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (]
[0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=]
[result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >]
[{, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||]
[{, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||]
[(, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <]
[x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -]
[{, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return]
[{, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return]
[if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==]
[x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return]
[x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return]
[x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /]
[NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (]
[NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (]
[}, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==]
[if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -]
[1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return]
[1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return]
[), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -]
[), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -]
[., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /]
[}, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (]
[}, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (]
[(, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==]
[1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return]
[., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =]
[., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =]
[/, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *]
[x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +]
[{, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -]
[temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =]
[temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =]
[x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -]
[double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =]
[double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =]
[=, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *]
[xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *]
[x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +]
[x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +]
[xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *]
[double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;]
[=, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =]
[xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -]
[xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;]
[double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =]
[yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =]
[=, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[=, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =]
[za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =]
[1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +]
[ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;]
[double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=]
[zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[(, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -]
[-, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -]
[ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;]
[zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y, =]
[-, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (]
[-, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;]
[-, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =]
[-, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =]
[), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;]
[temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +]
[;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -]
[=, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;]
[(, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =]
[(, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =]
[), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -]
[temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;]
[y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=]
[y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[=, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[-, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *]
[yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *]
[2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =]
[2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =]
[ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *]
[(, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =]
[(, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =]
[*, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /]
[), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;]
[double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp, =]
[double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp, =]
[=, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *]
[*, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =]
[*, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =]
[*, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =]
[), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +]
[double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -]
[y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =]
[y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =]
[temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -]
[r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;]
[HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=]
[HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -]
[ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -]
[r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *]
[temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -]
[temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -]
[temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *]
[double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -]
[double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -]
[=, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *]
[-, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -]
[-, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -]
[;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *]
[(, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /]
[-, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;]
[*, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=]
[*, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=]
[*, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=]
[*, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=]
[ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -]
[ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *]
[yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /]
[rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /]
[ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;]
[rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =]
[rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =]
[yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +]
[/, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;]
[;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =]
[rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -]
[+=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[+=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[+=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -]
[dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[/, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return]
[rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (]
[rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,]
[-, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,]
[(, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos, (, double, x, ), {, if, (]
[(, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos, (, double, x, ), {, if, (]
[,, rb, ,, false, ), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=]
[), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[(, double, x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (]
[x, ), {, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >]
[{, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||]
[{, if, (, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||]
[(, x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <]
[x, !=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -]
[{, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return]
[{, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return]
[if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (]
[x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==]
[>, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -]
[<, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return]
[<, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return]
[., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (]
[., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (]
[;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (, x, ==]
[x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return]
[{, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (]
[{, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (]
[Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==]
[}, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return]
[}, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return]
[}, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return]
[==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /]
[;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =]
[;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =]
[if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *]
[{, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[{, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[{, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =]
[Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +]
[PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -]
[temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =]
[temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =]
[x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -]
[double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =]
[double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =]
[=, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =]
[final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *]
[xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *]
[x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +]
[x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +]
[xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *]
[double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;]
[=, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =]
[xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -]
[xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;]
[double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =]
[yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =]
[=, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[-, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[=, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =]
[za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =]
[1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +]
[ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;]
[double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=]
[zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[=, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (]
[(, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -]
[-, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -]
[ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =]
[zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (]
[(, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;]
[-, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =]
[-, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =]
[-, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;]
[za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =]
[temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +]
[double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -]
[=, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;]
[(, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =]
[(, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =]
[), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -]
[temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;]
[y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=]
[y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[=, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[-, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *]
[yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *]
[*, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=]
[*, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /]
[ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (]
[ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (]
[yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *]
[*, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;]
[), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =]
[), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =]
[(, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +]
[*, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;]
[), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =]
[;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -]
[yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (]
[yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (]
[yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (]
[zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -]
[(, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -]
[y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =]
[y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =]
[ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /]
[yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if, (]
[yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if, (]
[y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (]
[), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[=, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math, ., PI, /]
[(, Double, ., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;, }, double, ra, =]
[., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (]
[{, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =]
[{, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =]
[Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -]
[PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;]
[2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=]
[2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -]
[double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -]
[=, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *]
[(, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -]
[(, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -]
[), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *]
[double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -]
[double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -]
[=, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *]
[-, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[-, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /]
[-, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;]
[*, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=]
[*, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /]
[*, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =]
[*, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +]
[-, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;]
[*, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =]
[xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -]
[rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[/, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return]
[rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (]
[rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,]
[-, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,]
[-, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,]
[temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <]
[rb, ,, x, <, 0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =]
[rb, ,, x, <, 0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =]
[0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (]
[double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =]
[double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =]
[double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, )]
[x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (]
[x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (]
[), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (]
[), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (]
[inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >]
[., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &]
[x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -]
[=, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =]
[(, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (]
[(, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (]
[inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==]
[>, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -]
[0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (]
[0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (]
[-, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, return]
[;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }]
[(, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =]
[==, -, 1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;]
[1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=]
[{, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;]
[(, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =]
[(, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =]
[), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (]
[x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;]
[}, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =]
[}, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =]
[true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, )]
[;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (]
[;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (]
[x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (]
[x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (]
[;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >]
[Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &]
[(, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -]
[=, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (]
[=, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (]
[int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==]
[inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return]
[0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =]
[0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =]
[-, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /]
[(, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =]
[(, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =]
[), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (]
[), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (]
[{, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (]
[{, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (]
[x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &]
[int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |]
[int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |]
[exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, )]
[/, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (]
[3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (]
[3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (]
[;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (]
[;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (]
[p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +]
[., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &]
[inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<]
[), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =]
[), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =]
[exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (]
[exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (]
[+, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (]
[+, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (]
[), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &]
[), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |]
[final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =]
[double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -]
[=, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;]
[., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =]
[., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =]
[., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =]
[(, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *]
[inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +]
[0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;]
[|, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =]
[|, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =]
[|, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =]
[), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *]
[double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +]
[est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -]
[-, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;]
[;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =]
[;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =]
[;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =]
[=, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *]
[*, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +]
[+, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;]
[;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =]
[;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =]
[;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =]
[=, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *]
[*, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +]
[+, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;]
[0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=]
[0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=]
[est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, []
[est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, []
[est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, []
[est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %]
[mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +]
[*, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =]
[*, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =]
[+, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /]
[0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (]
[0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (]
[0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (]
[est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *]
[CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *]
[%, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;]
[+, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=]
[+, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=]
[2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (]
[2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (]
[;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -]
[;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -]
[;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -]
[double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *]
[=, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *]
[(, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /]
[p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *]
[p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *]
[est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;]
[(, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=]
[(, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=]
[xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (]
[xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (]
[est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -]
[est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -]
[est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -]
[est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *]
[est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *]
[(, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /]
[3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (]
[est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *]
[est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *]
[xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =]
[xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =]
[est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[(, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +]
[*, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -]
[;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =]
[;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =]
[temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -]
[;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =]
[;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =]
[ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *]
[yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *]
[est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +]
[est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +]
[ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *]
[double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;]
[=, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =]
[=, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =]
[*, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *]
[=, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =]
[=, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =]
[=, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =]
[*, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +]
[*, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -]
[+, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;]
[*, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=]
[*, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=]
[;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -]
[=, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;]
[*, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =]
[;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;]
[temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =]
[temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =]
[temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =]
[temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =]
[za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *]
[temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +]
[temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +]
[temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *]
[zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +]
[zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +]
[za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *]
[temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;]
[za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =]
[za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =]
[temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *]
[*, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =]
[*, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =]
[+, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -]
[zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =]
[*, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -]
[yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (]
[yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (]
[yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (]
[za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -]
[za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +]
[;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;]
[na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=]
[xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;]
[za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=]
[za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=]
[;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (]
[;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (]
[nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +]
[(, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /]
[na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (]
[na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (]
[na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (]
[xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *]
[za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *]
[nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, ), ;]
[zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, ), ;, est, *=]
[(, na, +, nb, ), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (]
[nb, ), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {]
[/, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=]
[est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return]
[est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (]
[est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (]
[est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (]
[}, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite, (]
[;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||, x, ==]
[(, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return]
[Double, ., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =]
[||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =]
[{, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =]
[x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (]
[=, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =]
[=, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =]
[;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -]
[1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =]
[1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =]
[1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =]
[1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =]
[1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =]
[double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *]
[=, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +]
[=, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +]
[(, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *]
[), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +]
[), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +]
[double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *]
[=, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +]
[=, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +]
[-, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *]
[result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (]
[result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (]
[xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==]
[+, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {]
[*, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =]
[*, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =]
[+, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *]
[+, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return]
[result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (]
[result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (]
[result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (]
[}, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite, (]
[;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||, x, ==]
[(, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return]
[Double, ., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =]
[||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =]
[{, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =]
[x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (]
[=, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =]
[=, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =]
[;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -]
[factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return]
[factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return]
[factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return]
[factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return]
[factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return]
[3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *]
[double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +]
[double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +]
[=, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *]
[(, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +]
[(, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +]
[), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *]
[double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +]
[double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +]
[=, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *]
[+, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =]
[+, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =]
[;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >]
[static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return]
[static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return]
[int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (]
[int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (]
[(, final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (, x, ^]
[final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (, x, ^, (]
[final, int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (, x, ^, (]
[int, x, ), {, final, int, i, =, x, >, >, >, 31, ;, return, (, x, ^, (, ~]
[), {, final, int, i, =, x, >, >, >, 31, ;, return, (, x, ^, (, ~, i, +]
[i, =, x, >, >, >, 31, ;, return, (, x, ^, (, ~, i, +, 1, ), ), +]
[), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =]
[), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =]
[;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >]
[static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return]
[static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return]
[long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (]
[long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (]
[(, final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (, x, ^]
[final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (, x, ^, (]
[final, long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (, x, ^, (]
[long, x, ), {, final, long, l, =, x, >, >, >, 63, ;, return, (, x, ^, (, ~]
[), {, final, long, l, =, x, >, >, >, 63, ;, return, (, x, ^, (, ~, l, +]
[l, =, x, >, >, >, 63, ;, return, (, x, ^, (, ~, l, +, 1, ), ), +]
[l, +, 1, ), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return]
[l, +, 1, ), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return]
[), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (]
[), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (]
[l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &]
[l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &]
[static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &, Float, ., floatToRawIntBits, (]
[&, Float, ., floatToRawIntBits, (, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return]
[&, Float, ., floatToRawIntBits, (, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return]
[(, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (]
[(, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (]
[), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &]
[), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &]
[public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double, ., doubleToRawLongBits, (]
[Double, ., doubleToRawLongBits, (, x, ), ), ;, }, public, static, double, ulp, (, double, x, ), {, if, (]
[Double, ., doubleToRawLongBits, (, x, ), ), ;, }, public, static, double, ulp, (, double, x, ), {, if, (]
[x, ), ), ;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (]
[public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return]
[public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return]
[x, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[{, if, (, Double, ., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (]
[{, if, (, Double, ., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (]
[(, Double, ., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -]
[(, Double, ., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -]
[(, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (]
[(, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (]
[(, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (]
[{, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (]
[., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^]
[(, x, ), ^, 1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (]
[(, x, ), ^, 1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (]
[1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (]
[public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x, ), ), {, return]
[public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x, ), ), {, return]
[x, ), {, if, (, Float, ., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return]
[{, if, (, Float, ., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (]
[{, if, (, Float, ., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (]
[(, Float, ., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -]
[(, Float, ., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -]
[(, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (]
[(, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (]
[(, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (]
[{, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (]
[., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^]
[), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (]
[), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (]
[), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (]
[), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (]
[}, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (, n, >]
[public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (, n, >, -]
[scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (, n, >, -, 1023, ), &&]
[(, final, double, d, ,, final, int, n, ), {, if, (, (, n, >, -, 1023, ), &&, (]
[(, final, double, d, ,, final, int, n, ), {, if, (, (, n, >, -, 1023, ), &&, (]
[double, d, ,, final, int, n, ), {, if, (, (, n, >, -, 1023, ), &&, (, n, <]
[n, ), {, if, (, (, n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return]
[n, ), {, if, (, (, n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return]
[{, if, (, (, n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *]
[{, if, (, (, n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *]
[n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (]
[n, >, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (]
[>, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (]
[), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, )]
[&&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (]
[&&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (]
[n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +]
[), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<]
[., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (]
[., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (]
[., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (]
[., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (]
[(, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (]
[(, n, +, 1023, ), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||]
[(, n, +, 1023, ), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||]
[), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (]
[52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||]
[), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (]
[), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (]
[}, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d, ==]
[isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return]
[Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (]
[Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (]
[isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <]
[(, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -]
[(, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return]
[(, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return]
[d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (]
[d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (]
[0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >]
[{, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, ), ?]
[d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :]
[;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -]
[<, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (]
[<, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (]
[2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >]
[(, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return]
[(, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return]
[d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (]
[d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (]
[0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >]
[0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?]
[0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?]
[;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :]
[;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :]
[return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =]
[return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =]
[0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (]
[Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =]
[Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =]
[NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &]
[bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =]
[bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =]
[=, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (]
[doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, )]
[(, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (]
[(, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (]
[final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (, bits, >, >, >]
[bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &]
[exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =]
[exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =]
[(, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =, bits, &]
[bits, >, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =]
[bits, >, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =]
[>, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +]
[), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <]
[bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (]
[bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (]
[0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >]
[=, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return]
[=, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (]
[(, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |]
[n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[<, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[{, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, )]
[scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (]
[(, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >]
[(, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -]
[), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {]
[), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =]
[), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =]
[52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (]
[mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<]
[scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =]
[scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =]
[-, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &]
[53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (]
[53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (]
[{, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<]
[mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (]
[=, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -]
[1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;]
[52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =]
[52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =]
[long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >]
[mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (]
[mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (]
[mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -]
[(, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (]
[(, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (]
[scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[>, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return]
[>, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |]
[), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return]
[), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return]
[{, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (]
[{, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (]
[++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?]
[., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :]
[longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -]
[else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (]
[else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (]
[return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==]
[), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >]
[}, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=]
[if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {]
[exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =]
[exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =]
[0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<]
[{, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;]
[while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --]
[mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }]
[>, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++]
[>, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (]
[<<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <]
[scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return]
[scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |]
[=, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[=, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, )]
[scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[(, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?]
[), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?]
[52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :]
[52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :]
[return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (]
[return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (]
[sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return]
[:, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[:, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[:, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |]
[NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, )]
[scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[(, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?]
[), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?]
[52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :]
[52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :]
[;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (]
[;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (]
[}, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (, (]
[}, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (, (]
[}, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (, (, n, >]
[public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (, (, n, >, -]
[scalb, (, final, float, f, ,, final, int, n, ), {, if, (, (, n, >, -, 127, ), &&]
[(, final, float, f, ,, final, int, n, ), {, if, (, (, n, >, -, 127, ), &&, (]
[(, final, float, f, ,, final, int, n, ), {, if, (, (, n, >, -, 127, ), &&, (]
[float, f, ,, final, int, n, ), {, if, (, (, n, >, -, 127, ), &&, (, n, <]
[n, ), {, if, (, (, n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return]
[n, ), {, if, (, (, n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return]
[{, if, (, (, n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *]
[{, if, (, (, n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *]
[n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (]
[n, >, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (]
[>, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (]
[>, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (]
[127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +]
[(, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<]
[{, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (]
[{, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (]
[{, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (]
[{, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (]
[Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (]
[(, (, n, +, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||]
[(, (, n, +, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||]
[127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (]
[23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||]
[), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (]
[), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (]
[}, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f, ==]
[isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return]
[Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (]
[Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (]
[isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <]
[(, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -]
[(, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return]
[(, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return]
[f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (]
[f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (]
[0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >]
[{, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, ), ?]
[f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :]
[;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -]
[<, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (]
[<, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (]
[277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >]
[(, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return]
[(, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return]
[f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (]
[f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (]
[0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >]
[0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?]
[0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?]
[;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =]
[return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =]
[0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (]
[Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =]
[Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =]
[NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &]
[bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =]
[bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =]
[=, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (]
[=, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (]
[(, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >]
[;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &]
[bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =]
[bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =]
[0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &]
[(, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =]
[(, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =]
[>, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +]
[), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <]
[bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (]
[bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (]
[0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >]
[=, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return]
[=, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (]
[(, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |]
[n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<]
[if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (]
[., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >]
[intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {]
[scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =]
[scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =]
[23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (]
[mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<]
[scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =]
[scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =]
[-, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &]
[24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (]
[24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (]
[{, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<]
[mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (]
[=, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -]
[1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;]
[23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =]
[23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =]
[int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >]
[mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (]
[mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (]
[mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -]
[(, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (]
[(, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (]
[scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[>, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return]
[>, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |]
[), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return]
[), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return]
[{, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (]
[{, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (]
[++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :]
[intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -]
[else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (]
[else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (]
[return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==]
[), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >]
[}, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=]
[if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {]
[exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =]
[exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =]
[0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<]
[{, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;]
[while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --]
[mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }]
[>, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++]
[>, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (]
[<<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <]
[scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return]
[scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |]
[=, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[=, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[&, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<]
[if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (]
[intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (]
[return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (]
[sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <]
[?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return]
[?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return]
[:, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[:, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[:, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |]
[NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[}, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<]
[if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return]
[return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (]
[intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (]
[., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (]
[., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (]
[}, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (, Double, ., isNaN, (]
[static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (, Double, ., isNaN, (, d, ), ||]
[static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (, Double, ., isNaN, (, d, ), ||]
[double, d, ,, double, direction, ), {, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isNaN, (]
[), {, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isNaN, (, direction, ), ), {, return]
[), {, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isNaN, (, direction, ), ), {, return]
[d, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (]
[d, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (]
[||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (, d, ==]
[(, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return]
[Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }, else, if, (]
[Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }, else, if, (]
[}, else, if, (, d, ==, direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (]
[==, direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return]
[==, direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return]
[direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (]
[direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (]
[{, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d, <]
[;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?]
[}, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?, -]
[}, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?, -]
[Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :]
[Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :]
[return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (]
[return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (]
[d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==]
[?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return]
[?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return]
[-, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (]
[-, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (]
[., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <]
[Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?]
[., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -]
[., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -]
[else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :]
[else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :]
[(, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =]
[(, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =]
[), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (]
[Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =]
[Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =]
[MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &]
[long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (]
[long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (]
[bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (]
[bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (]
[Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <]
[(, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^]
[d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (]
[d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign, ==]
[bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return]
[bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return]
[if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (]
[if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (]
[(, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |]
[direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[<, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[<, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +]
[., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return]
[., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return]
[|, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (]
[|, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (]
[(, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |]
[bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (]
[bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (]
[&, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[&, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -]
[), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (]
[), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (]
[), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (]
[public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (, Double, ., isNaN, (]
[nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (, Double, ., isNaN, (, f, ), ||]
[nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (, Double, ., isNaN, (, f, ), ||]
[f, ,, final, double, direction, ), {, if, (, Double, ., isNaN, (, f, ), ||, Double, ., isNaN, (]
[), {, if, (, Double, ., isNaN, (, f, ), ||, Double, ., isNaN, (, direction, ), ), {, return]
[), {, if, (, Double, ., isNaN, (, f, ), ||, Double, ., isNaN, (, direction, ), ), {, return]
[f, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (]
[f, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (]
[||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (, f, ==]
[(, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, ), {, return]
[), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, ), {, return, (, float, )]
[;, }, else, if, (, f, ==, direction, ), {, return, (, float, ), direction, ;, }, else, if, (]
[;, }, else, if, (, f, ==, direction, ), {, return, (, float, ), direction, ;, }, else, if, (]
[(, f, ==, direction, ), {, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (]
[{, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return]
[{, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return]
[return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (]
[return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (]
[float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <]
[;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?]
[}, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?, -]
[}, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?, -]
[Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :]
[Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :]
[return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (]
[return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (]
[f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==]
[?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return]
[?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return]
[-, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (]
[-, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (]
[., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <]
[Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?]
[., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -]
[., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -]
[else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :]
[else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :]
[(, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =]
[(, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =]
[), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (]
[Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =]
[Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =]
[MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &]
[int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (]
[int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (]
[bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (]
[bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (]
[Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <]
[(, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^]
[f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (]
[f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (]
[;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign, ==]
[bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return]
[bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return]
[if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (]
[if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (]
[(, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |]
[direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[<, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[<, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +]
[., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return]
[., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return]
[|, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (]
[|, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (]
[(, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |]
[bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (]
[bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (]
[&, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[&, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -]
[1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (]
[1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (]
[), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x, !=]
[public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x, !=, x, ), {, return]
[double, x, ), {, long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[double, x, ), {, long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[double, x, ), {, long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (]
[), {, long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >=]
[long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||]
[long, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||]
[;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=]
[if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -]
[x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return]
[return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }]
[;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =]
[(, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, )]
[||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (]
[||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (]
[||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (]
[<=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <]
[TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&]
[TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&]
[{, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y, !=]
[;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {]
[;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {]
[), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (]
[), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (]
[;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==]
[<, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return]
[<, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return]
[&&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *]
[), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[;, }, return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (]
[;, }, return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (]
[return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (, x, !=]
[public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (, x, !=, x, ), {, return]
[ceil, (, double, x, ), {, double, y, ;, if, (, x, !=, x, ), {, return, x, ;, }]
[double, x, ), {, double, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, y, =]
[), {, double, y, ;, if, (, x, !=, x, ), {, return, x, ;, }, y, =, floor, (]
[if, (, x, !=, x, ), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (]
[if, (, x, !=, x, ), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (]
[x, !=, x, ), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (, y, ==]
[{, return, x, ;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {, return]
[;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }]
[y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=]
[x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (]
[x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (]
[;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==]
[==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return]
[==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return]
[), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *]
[;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[*, y, ;, }, return, y, ;, }, public, static, double, rint, (, double, x, ), {, double, y, =]
[;, }, return, y, ;, }, public, static, double, rint, (, double, x, ), {, double, y, =, floor, (]
[public, static, double, rint, (, double, x, ), {, double, y, =, floor, (, x, ), ;, double, d, =]
[public, static, double, rint, (, double, x, ), {, double, y, =, floor, (, x, ), ;, double, d, =]
[double, rint, (, double, x, ), {, double, y, =, floor, (, x, ), ;, double, d, =, x, -]
[x, ), {, double, y, =, floor, (, x, ), ;, double, d, =, x, -, y, ;, if, (]
[x, ), {, double, y, =, floor, (, x, ), ;, double, d, =, x, -, y, ;, if, (]
[{, double, y, =, floor, (, x, ), ;, double, d, =, x, -, y, ;, if, (, d, >]
[(, x, ), ;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (]
[(, x, ), ;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (]
[), ;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==]
[;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==, -]
[x, -, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return]
[-, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -]
[(, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return]
[(, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return]
[>, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +]
[(, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (]
[(, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (]
[==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <]
[{, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {, return]
[return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =]
[1.0, ;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, )]
[if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return]
[if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return]
[if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return]
[(, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (]
[(, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (]
[<, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &]
[{, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==]
[y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==, 0, ?]
[}, long, z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==, 0, ?, y, :]
[}, long, z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==, 0, ?, y, :]
[z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==, 0, ?, y, :, y, +]
[==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return]
[y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, )]
[y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (]
[y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (]
[1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (, x, +]
[), floor, (, x, +, 0.5, ), ;, }, public, static, int, round, (, final, float, x, ), {, return]
[x, +, 0.5, ), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, )]
[0.5, ), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (]
[0.5, ), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (]
[;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (, x, +]
[+, 0.5f, ), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return]
[+, 0.5f, ), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return]
[0.5f, ), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (]
[0.5f, ), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (]
[;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=]
[static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=, b, ), ?]
[min, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=, b, ), ?, a, :]
[a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return]
[a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return]
[:, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (]
[:, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (]
[;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=, b, ), ?]
[min, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=, b, ), ?, a, :]
[:, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (]
[:, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (]
[;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[float, min, (, final, float, a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return]
[a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (]
[a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (]
[final, float, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (, a, <]
[{, if, (, a, >, b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return]
[b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (]
[b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (]
[{, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=]
[}, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return]
[}, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return]
[return, a, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =]
[return, a, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =]
[if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==]
[;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return]
[=, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return, a, ;, }, return]
[return, b, ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (]
[return, b, ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (]
[;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (, a, >]
[double, min, (, final, double, a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return]
[a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (]
[a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (]
[final, double, b, ), {, if, (, a, >, b, ), {, return, b, ;, }, if, (, a, <]
[{, if, (, a, >, b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return]
[b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (]
[b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (]
[{, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=]
[}, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return]
[}, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return]
[return, a, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =]
[return, a, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =]
[if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==]
[;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return]
[=, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, a, ;, }, return]
[}, return, b, ;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return]
[}, return, b, ;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return]
[return, b, ;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return, (]
[return, b, ;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return, (]
[;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=]
[static, int, max, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=, b, ), ?]
[max, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=, b, ), ?, b, :]
[b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return]
[b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return]
[:, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (]
[:, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (]
[;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=, b, ), ?]
[max, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=, b, ), ?, b, :]
[:, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (]
[:, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (]
[;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[float, max, (, final, float, a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return]
[a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (]
[a, ,, final, float, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (]
[final, float, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (, a, <]
[{, if, (, a, >, b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return]
[b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (]
[b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (]
[{, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=]
[}, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return]
[}, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return]
[return, b, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =]
[return, b, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =]
[if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==]
[;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return]
[=, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return, b, ;, }, return]
[return, a, ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (]
[return, a, ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (]
[;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (, a, >]
[double, max, (, final, double, a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return]
[a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (]
[a, ,, final, double, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (]
[final, double, b, ), {, if, (, a, >, b, ), {, return, a, ;, }, if, (, a, <]
[{, if, (, a, >, b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return]
[b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (]
[b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (]
[{, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=]
[}, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return]
[}, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return]
[return, b, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =]
[return, b, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =]
[if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==]
[;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return]
[=, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, b, ;, }, return]
[return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {, if, (]
[return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {, if, (]
[return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {, if, (]
[public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {, if, (, Double, ., isInfinite, (]
[hypot, (, final, double, x, ,, final, double, y, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[hypot, (, final, double, x, ,, final, double, y, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[x, ,, final, double, y, ), {, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (]
[), {, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), {, return]
[), {, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), {, return]
[x, ), ||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (]
[x, ), ||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (]
[x, ), ||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (]
[., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (]
[y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||]
[y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||]
[return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[}, else, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ), {, return]
[}, else, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ), {, return]
[Double, ., isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =]
[isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent, (]
[Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =]
[NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (]
[final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (]
[final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (]
[expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >]
[expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >]
[getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >, expY, +]
[;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >, expY, +, 27, ), {, return]
[int, expY, =, getExponent, (, y, ), ;, if, (, expX, >, expY, +, 27, ), {, return, abs, (]
[;, if, (, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (]
[;, if, (, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (]
[(, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (, expY, >]
[(, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (, expY, >]
[>, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +]
[), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return]
[return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return, abs, (]
[expY, >, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =]
[expY, >, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =]
[>, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (]
[>, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (]
[+, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +]
[{, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +, expY, ), /]
[;, }, else, {, final, int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX, =]
[else, {, final, int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX, =, scalb, (]
[final, int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,]
[int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -]
[), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =]
[2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (]
[final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (, y, ,]
[double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (, y, ,, -]
[-, middleExp, ), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =]
[), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (]
[), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (]
[), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (]
[final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *]
[scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +]
[scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +]
[scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *]
[-, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return]
[), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (]
[final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (, scaledH, ,]
[,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return]
[,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return]
[}, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return, StrictMath, ., IEEEremainder, (]
[}, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return, StrictMath, ., IEEEremainder, (, dividend, ,]
[divisor, ), ;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m, =]
[divisor, ), ;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m, =]
[public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m, =, Double, ., doubleToRawLongBits, (]
[,, double, sign, ), {, final, long, m, =, Double, ., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =]
[,, double, sign, ), {, final, long, m, =, Double, ., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =]
[{, final, long, m, =, Double, ., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (]
[Double, ., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (]
[Double, ., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (]
[., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (]
[., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (]
[(, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^]
[;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=]
[=, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return]
[(, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return]
[sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -]
[-, magnitude, ;, }, public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final, int, m, =]
[-, magnitude, ;, }, public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final, int, m, =]
[public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final, int, m, =, Float, ., floatToRawIntBits, (]
[,, float, sign, ), {, final, int, m, =, Float, ., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =]
[,, float, sign, ), {, final, int, m, =, Float, ., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =]
[{, final, int, m, =, Float, ., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (]
[Float, ., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (]
[Float, ., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (]
[., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (]
[., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (]
[(, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^]
[;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=]
[=, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return]
[(, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return]
[sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -]
[return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return]
[return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return]
[}, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, )]
[return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (]
[return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (]
[-, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (]
[-, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (]
[-, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (]
[public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (, Double, ., doubleToRawLongBits, (]
[final, double, d, ), {, return, (, int, ), (, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >]
[), {, return, (, int, ), (, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &]
[(, int, ), (, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff, ), -]
[52, ), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return]
[52, ), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return]
[), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (]
[), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (]
[&, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (]
[&, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (]
[&, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (]
[1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits, (]
[int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits, (, f, ), >, >, >]
[final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, ), &]
[), {, return, (, (, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, ), &, 0xff, ), -]
[0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =]
[0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =]
[;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;]
[;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;]
[void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;, FastMathCalc, ., printarray, (]
[(, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,]
[[, ], a, ), {, PrintStream, out, =, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,]
[a, ), {, PrintStream, out, =, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,]
[a, ), {, PrintStream, out, =, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,]
[=, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;]
[=, System, ., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[(, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,]
[,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,]
[,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,]
[ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;]
[ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[(, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,]
[,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,]
[,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,]
[ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;]
[ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[(, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,]
[,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,]
[,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,]
[ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;]
[ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[(, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,]
[,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,]
[,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,]
[ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;]
[ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;]
[;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,]
[(, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,]
[,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,]
[LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;]
[LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;]
[LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,]
[(, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,]
["SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;]
["SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;]
[SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,]
[(, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,]
["SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;]
["SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;]
[SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,]
[(, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,]
["COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;]
["COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;]
[COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,]
[(, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,]
["COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;]
["COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;]
[COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,]
[(, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,]
[private, static, final, double, [, ], EXP_INT_TABLE_A, ;, private, static, final, double, [, ], EXP_INT_TABLE_B, ;, static, {, if, (]
[double, [, ], EXP_INT_TABLE_A, ;, private, static, final, double, [, ], EXP_INT_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {]
[], EXP_INT_TABLE_A, ;, private, static, final, double, [, ], EXP_INT_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =]
[private, static, final, double, [, ], EXP_INT_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, []
[private, static, final, double, [, ], EXP_INT_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, []
[], EXP_INT_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;]
[;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =]
[if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, []
[if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_INT_TABLE_A, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, []
[., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =]
[;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, []
[], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, recip, [, ], =]
[double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, recip, [, ], =, new, double, []
[2, ], ;, final, double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =]
[;, final, double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;]
[double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;]
[=, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;]
[2, ], ;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {]
[2, ], ;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (]
[i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,]
[;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;]
[;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;]
[<, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, []
[<, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, []
[., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +]
[., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +]
[), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, []
[(, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;]
[(, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;]
[,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, []
[,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, []
[), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +]
[), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +]
[+, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[+, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, []
[[, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (]
[[, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (]
[], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=]
[[, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {]
[[, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {]
[., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (]
[], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,]
[[, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;]
[[, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;]
[], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, []
[], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, []
[], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, []
[i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -]
[), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, []
[(, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;]
[(, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;]
[,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, []
[,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, []
[,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, []
[EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -]
[., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[-, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, []
[;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {]
[[, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =]
[[, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =]
[], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;]
[recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =]
[recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =]
[private, static, final, double, [, ], EXP_FRAC_TABLE_A, ;, private, static, final, double, [, ], EXP_FRAC_TABLE_B, ;, static, {, if, (]
[double, [, ], EXP_FRAC_TABLE_A, ;, private, static, final, double, [, ], EXP_FRAC_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {]
[], EXP_FRAC_TABLE_A, ;, private, static, final, double, [, ], EXP_FRAC_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =]
[private, static, final, double, [, ], EXP_FRAC_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, []
[private, static, final, double, [, ], EXP_FRAC_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, []
[], EXP_FRAC_TABLE_B, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;]
[;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =]
[if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, []
[if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, EXP_FRAC_TABLE_A, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, []
[., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =]
[;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, []
[., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =]
[., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =]
[], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /]
[;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /, (]
[;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /, (]
[double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -]
[2, ], ;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =]
[;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;]
[;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;]
[double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[/, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;]
[/, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (]
[(, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (]
[i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *]
[0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,]
[<, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;]
[<, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;]
[., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, []
[i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =]
[i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =]
[), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, []
[., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;]
[., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;]
[(, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, []
[factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =]
[factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =]
[tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, []
[=, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {]
[[, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =]
[[, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =]
[i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;]
[=, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =]
[=, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =]
[}, private, static, class, lnMant, {, private, static, final, double, [, ], [, ], LN_MANT, ;, static, {, if, (]
[class, lnMant, {, private, static, final, double, [, ], [, ], LN_MANT, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {]
[{, private, static, final, double, [, ], [, ], LN_MANT, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, LN_MANT, =]
[final, double, [, ], [, ], LN_MANT, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, LN_MANT, =, new, double, []
[final, double, [, ], [, ], LN_MANT, ;, static, {, if, (, RECOMPUTE_TABLES_AT_RUNTIME, ), {, LN_MANT, =, new, double, []
[RECOMPUTE_TABLES_AT_RUNTIME, ), {, LN_MANT, =, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =]
[{, LN_MANT, =, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;]
[{, LN_MANT, =, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;]
[FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;]
[(, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =]
[(, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =]
[0, ;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (]
[0, ;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (]
[;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (]
[;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (]
[i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (]
[., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, )]
[i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<]
[{, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |]
[d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;]
[d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;]
[Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, []
[(, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =]
[(, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =]
[long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (]
[|, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {]
[), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =]
[), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =]
[;, private, final, double, finalRemA, ;, private, final, double, finalRemB, ;, CodyWaite, (, double, xa, ), {, int, k, =]
[double, finalRemA, ;, private, final, double, finalRemB, ;, CodyWaite, (, double, xa, ), {, int, k, =, (, int, )]
[finalRemA, ;, private, final, double, finalRemB, ;, CodyWaite, (, double, xa, ), {, int, k, =, (, int, ), (]
[finalRemA, ;, private, final, double, finalRemB, ;, CodyWaite, (, double, xa, ), {, int, k, =, (, int, ), (]
[private, final, double, finalRemB, ;, CodyWaite, (, double, xa, ), {, int, k, =, (, int, ), (, xa, *]
[int, k, =, (, int, ), (, xa, *, 0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (]
[(, xa, *, 0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =]
[(, xa, *, 0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =]
[xa, *, 0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -]
[0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *]
[;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;]
[remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =]
[remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =]
[double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +]
[;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;]
[(, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =]
[true, ), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -]
[), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (]
[), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (]
[), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (]
[double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -]
[=, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -]
[*, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;]
[;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =]
[;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =]
[remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -]
[xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *]
[=, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =]
[(, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;]
[-, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =]
[-, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =]
[-, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +]
[), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;]
[a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=]
[=, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -]
[-, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[-, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[-, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[*, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -]
[;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -]
[=, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =]
[remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -]
[a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *]
[b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;]
[remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =]
[-, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;]
[remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =]
[remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =]
[b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +]
[a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;]
[;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=]
[a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -]
[=, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[=, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[=, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -]
[6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (]
[=, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >]
[+=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }]
[-, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --]
[-, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }]
[-, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }]
[), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =]
[if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;]
[if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;]
[0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =]
[{, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA, ;]
[{, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA, ;]
[--, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =]
[;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK, (, ), {, return]
[finalRemB, =, remB, ;, }, int, getK, (, ), {, return, finalK, ;, }, double, getRemA, (, ), {, return]
[{, return, finalK, ;, }, double, getRemA, (, ), {, return, finalRemA, ;, }, double, getRemB, (, ), {, return]
