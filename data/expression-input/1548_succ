[;, }, protected, abstract, OPTIM, getOptimizer, (, Collection, <, WeightedObservedPoint, >, points, ), ;, protected, static, class, TheoreticalValuesFunction, {, private]
[., getPoint, (, ), ;, }, protected, abstract, OPTIM, getOptimizer, (, Collection, <, WeightedObservedPoint, >, points, ), ;, protected, static]
[., optimize, (, ), ., getPoint, (, ), ;, }, protected, abstract, OPTIM, getOptimizer, (, Collection, <, WeightedObservedPoint, >, points]
[), ., optimize, (, ), ., getPoint, (, ), ;, }, protected, abstract, OPTIM, getOptimizer, (, Collection, <, WeightedObservedPoint, >]
[=, f, ;, final, int, len, =, observations, ., size, (, ), ;, this, ., points, =, new, double, []
[., f, =, f, ;, final, int, len, =, observations, ., size, (, ), ;, this, ., points, =, new]
[;, final, int, len, =, observations, ., size, (, ), ;, this, ., points, =, new, double, [, len, ]]
[;, this, ., points, =, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs]
[., size, (, ), ;, this, ., points, =, new, double, [, len, ], ;, int, i, =, 0, ;]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[., points, =, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations]
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, [, i, ++]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, [, i]
[;, for, (, WeightedObservedPoint, obs, :, observations, ), {, this, ., points, [, i, ++, ], =, obs, ., getX]
[), {, this, ., points, [, i, ++, ], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction]
[=, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return, new, MultivariateVectorFunction, (, )]
[[, i, ++, ], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return]
[., points, [, i, ++, ], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, )]
[], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return, new, MultivariateVectorFunction, (]
[++, ], =, obs, ., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return, new, MultivariateVectorFunction]
[;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public, double, [, ], value]
[., getX, (, ), ;, }, }, public, MultivariateVectorFunction, getModelFunction, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public]
[;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ]]
[;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[., length, ;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i]
[;, i, <, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, []
[;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p]
[<, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ]]
[;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p]
[), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p, ), ;, }]
[++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p, ), ;]
[=, f, ., value, (, points, [, i, ], ,, p, ), ;, }, return, values, ;, }, }, ;]
[[, i, ], =, f, ., value, (, points, [, i, ], ,, p, ), ;, }, return, values, ;]
[], =, f, ., value, (, points, [, i, ], ,, p, ), ;, }, return, values, ;, }, }]
[;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return, new, MultivariateMatrixFunction, (, )]
[., value, (, points, [, i, ], ,, p, ), ;, }, return, values, ;, }, }, ;, }, public]
[,, p, ), ;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return, new]
[[, i, ], ,, p, ), ;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, )]
[], ,, p, ), ;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return]
[), ;, }, return, values, ;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return, new, MultivariateMatrixFunction, (]
[;, }, }, ;, }, public, MultivariateMatrixFunction, getModelFunctionJacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, []
[;, }, }, }]
[;, final, double, [, ], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int]
[., length, ;, final, double, [, ], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ]]
[], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian]
[;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, []
[;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p]
[<, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ]]
[;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p]
[), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }]
[++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;]
[=, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }, return, jacobian, ;, }, }, ;]
[[, i, ], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }, return, jacobian, ;]
[], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }, return, jacobian, ;, }, }]
[;, }, return, jacobian, ;, }, }, ;, }, }, }]
[., gradient, (, points, [, i, ], ,, p, ), ;, }, return, jacobian, ;, }, }, ;, }, }]
[,, p, ), ;, }, return, jacobian, ;, }, }, ;, }, }, }]
[[, i, ], ,, p, ), ;, }, return, jacobian, ;, }, }, ;, }, }, }]
[], ,, p, ), ;, }, return, jacobian, ;, }, }, ;, }, }, }]
[), ;, }, return, jacobian, ;, }, }, ;, }, }, }]
[;, }, }, ;, }, }, }]
