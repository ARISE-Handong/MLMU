[;, NodeNameExtractor, (, char, delimiter, ), {, this, ., delimiter, =, delimiter, ;, }, String, getName, (, Node, node, )]
[=, delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {]
[., delimiter, =, delimiter, ;, }, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, )]
[;, }, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token]
[), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return, functionNameNode, ., getString]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;]
[:, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case, Token, .]
[., FUNCTION, :, Node, functionNameNode, =, node, ., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case]
[;, return, functionNameNode, ., getString, (, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (]
[., getFirstChild, (, ), ;, return, functionNameNode, ., getString, (, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =]
[;, case, Token, ., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, .]
[., getString, (, ), ;, case, Token, ., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node]
[:, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String]
[., GETPROP, :, Node, lhsOfDot, =, node, ., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, )]
[;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName]
[., getFirstChild, (, ), ;, Node, rhsOfDot, =, lhsOfDot, ., getNext, (, ), ;, String, lhsOfDotName, =, getName, (, lhsOfDot]
[;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype"]
[., getNext, (, ), ;, String, lhsOfDotName, =, getName, (, lhsOfDot, ), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, )]
[;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return]
[), ;, String, rhsOfDotName, =, getName, (, rhsOfDot, ), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {]
[;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return]
[), ;, if, (, "prototype", ., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {]
[), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token]
[., equals, (, rhsOfDotName, ), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +]
[), ), {, return, lhsOfDotName, +, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case]
[;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =]
[+, delimiter, ;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node]
[;, }, else, {, return, lhsOfDotName, +, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =]
[;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets]
[+, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets]
[+, delimiter, +, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;]
[+, rhsOfDotName, ;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets]
[;, }, case, Token, ., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets]
[:, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String]
[., GETELEM, :, Node, outsideBrackets, =, node, ., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, )]
[;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets]
[., getFirstChild, (, ), ;, Node, insideBrackets, =, outsideBrackets, ., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets]
[;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype"]
[., getNext, (, ), ;, String, nameOutsideBrackets, =, getName, (, outsideBrackets, ), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, )]
[;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return]
[), ;, String, nameInsideBrackets, =, getName, (, insideBrackets, ), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {]
[;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return]
[), ;, if, (, "prototype", ., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {]
[), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token]
[., equals, (, nameInsideBrackets, ), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +]
[), ), {, return, nameOutsideBrackets, +, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case]
[;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, .]
[+, delimiter, ;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return]
[;, }, else, {, return, nameOutsideBrackets, +, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, .]
[;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case]
[+, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING]
[+, delimiter, +, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token]
[+, nameInsideBrackets, ;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING]
[;, }, case, Token, ., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case]
[:, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream]
[., NAME, :, return, node, ., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :]
[;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (]
[., getString, (, ), ;, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (]
[:, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, .]
[., STRING, :, case, Token, ., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?]
[:, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (]
[., STRING_KEY, :, return, TokenStream, ., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, )]
[;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return]
[?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return]
[., isJSIdentifier, (, node, ., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt]
[), ?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :]
[., getString, (, ), ), ?, node, ., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case]
[:, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, )]
[., getString, (, ), :, (, "__", +, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, .]
[;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return]
[), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :]
[+, nextUniqueInt, ++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token]
[), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :]
[++, ), ;, case, Token, ., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS]
[:, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, .]
[., NUMBER, :, return, NodeUtil, ., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case]
[;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return, getName, (, node, ., getFirstChild]
[., getStringValue, (, node, ), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return]
[), ;, case, Token, ., THIS, :, return, "this", ;, case, Token, ., CALL, :, return, getName, (, node, .]
[:, return, "this", ;, case, Token, ., CALL, :, return, getName, (, node, ., getFirstChild, (, ), ), ;, default]
[., THIS, :, return, "this", ;, case, Token, ., CALL, :, return, getName, (, node, ., getFirstChild, (, ), )]
[;, case, Token, ., CALL, :, return, getName, (, node, ., getFirstChild, (, ), ), ;, default, :, StringBuilder, sb]
[:, return, getName, (, node, ., getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =, new, StringBuilder, (, )]
[., CALL, :, return, getName, (, node, ., getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =, new, StringBuilder]
[;, default, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild, (]
[), ;, default, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, =, node, ., getFirstChild]
[., getFirstChild, (, ), ), ;, default, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child]
[;, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, )]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >]
[;, child, =, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, )]
[=, child, ., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, ), {, sb]
[), {, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;]
[., getNext, (, ), ), {, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append]
[), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, ), ), ;]
[>, 0, ), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, )]
[., length, (, ), >, 0, ), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (]
[), {, sb, ., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, ), ), ;]
[;, }, sb, ., append, (, getName, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;]
[., append, (, delimiter, ), ;, }, sb, ., append, (, getName, (, child, ), ), ;, }, return, sb]
[), ;, }, sb, ., append, (, getName, (, child, ), ), ;, }, return, sb, ., toString, (, )]
[;, }, return, sb, ., toString, (, ), ;, }, }, }]
[., append, (, getName, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;, }, }, }]
[), ;, }, return, sb, ., toString, (, ), ;, }, }, }]
[), ), ;, }, return, sb, ., toString, (, ), ;, }, }, }]
[;, }, }, }]
[., toString, (, ), ;, }, }, }]
