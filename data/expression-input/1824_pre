[cachedP, ;, private, RealMatrix, cachedPt, ;, private, RealMatrix, cachedH, ;, public, HessenbergTransformer, (, final, RealMatrix, matrix, ), {, if, (]
[;, private, RealMatrix, cachedPt, ;, private, RealMatrix, cachedH, ;, public, HessenbergTransformer, (, final, RealMatrix, matrix, ), {, if, (, !]
[;, private, RealMatrix, cachedPt, ;, private, RealMatrix, cachedH, ;, public, HessenbergTransformer, (, final, RealMatrix, matrix, ), {, if, (, !]
[;, public, HessenbergTransformer, (, final, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw]
[(, final, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[(, final, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =]
[), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =]
[;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;]
[final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, ort, =]
[=, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, ort, =, new, double, []
[getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, ort, =, new, double, [, m, ], ;]
[), ;, householderVectors, =, matrix, ., getData, (, ), ;, ort, =, new, double, [, m, ], ;, cachedP, =]
[householderVectors, =, matrix, ., getData, (, ), ;, ort, =, new, double, [, m, ], ;, cachedP, =, null, ;]
[matrix, ., getData, (, ), ;, ort, =, new, double, [, m, ], ;, cachedP, =, null, ;, cachedPt, =]
[getData, (, ), ;, ort, =, new, double, [, m, ], ;, cachedP, =, null, ;, cachedPt, =, null, ;]
[), ;, ort, =, new, double, [, m, ], ;, cachedP, =, null, ;, cachedPt, =, null, ;, cachedH, =]
[ort, =, new, double, [, m, ], ;, cachedP, =, null, ;, cachedPt, =, null, ;, cachedH, =, null, ;]
[=, null, ;, cachedH, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getP, (, ), {, if, (]
[=, null, ;, cachedH, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getP, (, ), {, if, (]
[;, cachedH, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==]
[), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, final, int, n, =]
[), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, final, int, n, =]
[{, if, (, cachedP, ==, null, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =]
[{, if, (, cachedP, ==, null, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =]
[(, cachedP, ==, null, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =, n, -]
[householderVectors, ., length, ;, final, int, high, =, n, -, 1, ;, final, double, [, ], [, ], pa, =]
[;, final, int, high, =, n, -, 1, ;, final, double, [, ], [, ], pa, =, new, double, []
[high, =, n, -, 1, ;, final, double, [, ], [, ], pa, =, new, double, [, n, ], []
[[, ], [, ], pa, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =]
[[, ], pa, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[[, ], pa, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[pa, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, pa, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, pa, [, i, ], []
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =]
[=, 0, ;, j, <, n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =, (]
[=, 0, ;, j, <, n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =, (]
[;, j, <, n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =, (, i, ==]
[n, ;, j, ++, ), {, pa, [, i, ], [, j, ], =, (, i, ==, j, ), ?]
[j, ++, ), {, pa, [, i, ], [, j, ], =, (, i, ==, j, ), ?, 1, :]
[j, ], =, (, i, ==, j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =]
[j, ], =, (, i, ==, j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =]
[=, (, i, ==, j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -]
[i, ==, j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -, 1, ;]
[i, ==, j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -, 1, ;]
[j, ), ?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -, 1, ;, m, >=]
[?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;]
[?, 1, :, 0, ;, }, }, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;]
[}, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (]
[}, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (]
[}, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (]
[}, for, (, int, m, =, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (]
[(, int, m, =, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (, householderVectors, []
[=, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (, householderVectors, [, m, ], []
[=, high, -, 1, ;, m, >=, 1, ;, m, --, ), {, if, (, householderVectors, [, m, ], []
[-, 1, ;, m, >=, 1, ;, m, --, ), {, if, (, householderVectors, [, m, ], [, m, -]
[m, >=, 1, ;, m, --, ), {, if, (, householderVectors, [, m, ], [, m, -, 1, ], !=]
[if, (, householderVectors, [, m, ], [, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =]
[if, (, householderVectors, [, m, ], [, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =]
[householderVectors, [, m, ], [, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +]
[m, ], [, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +, 1, ;]
[m, ], [, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +, 1, ;]
[[, m, -, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +, 1, ;, i, <=]
[-, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +, 1, ;, i, <=, high, ;]
[-, 1, ], !=, 0.0, ), {, for, (, int, i, =, m, +, 1, ;, i, <=, high, ;]
[0.0, ), {, for, (, int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {]
[0.0, ), {, for, (, int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {]
[{, for, (, int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {, ort, []
[int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =]
[int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =]
[int, i, =, m, +, 1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =]
[=, m, +, 1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =, householderVectors, []
[1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =, householderVectors, [, i, ], []
[1, ;, i, <=, high, ;, i, ++, ), {, ort, [, i, ], =, householderVectors, [, i, ], []
[i, <=, high, ;, i, ++, ), {, ort, [, i, ], =, householderVectors, [, i, ], [, m, -]
[[, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], ;, }, for, (, int, j, =]
[], =, householderVectors, [, i, ], [, m, -, 1, ], ;, }, for, (, int, j, =, m, ;]
[], =, householderVectors, [, i, ], [, m, -, 1, ], ;, }, for, (, int, j, =, m, ;]
[householderVectors, [, i, ], [, m, -, 1, ], ;, }, for, (, int, j, =, m, ;, j, <=]
[i, ], [, m, -, 1, ], ;, }, for, (, int, j, =, m, ;, j, <=, high, ;]
[i, ], [, m, -, 1, ], ;, }, for, (, int, j, =, m, ;, j, <=, high, ;]
[;, }, for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {, double, g, =]
[m, ;, j, <=, high, ;, j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =]
[j, <=, high, ;, j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =, m, ;]
[j, <=, high, ;, j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =, m, ;]
[high, ;, j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =, m, ;, i, <=]
[j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[j, ++, ), {, double, g, =, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[double, g, =, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[=, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=]
[=, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=]
[=, 0.0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=]
[;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=, ort, []
[int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=, ort, [, i, ], *]
[int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=, ort, [, i, ], *]
[int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, g, +=, ort, [, i, ], *]
[=, m, ;, i, <=, high, ;, i, ++, ), {, g, +=, ort, [, i, ], *, pa, []
[i, <=, high, ;, i, ++, ), {, g, +=, ort, [, i, ], *, pa, [, i, ], []
[i, ++, ), {, g, +=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }]
[), {, g, +=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =]
[), {, g, +=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =]
[{, g, +=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =, (]
[{, g, +=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =, (]
[+=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =, (, g, /]
[+=, ort, [, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =, (, g, /]
[[, i, ], *, pa, [, i, ], [, j, ], ;, }, g, =, (, g, /, ort, []
[pa, [, i, ], [, j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /]
[pa, [, i, ], [, j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /]
[pa, [, i, ], [, j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /]
[i, ], [, j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /, householderVectors, []
[j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /, householderVectors, [, m, ], []
[j, ], ;, }, g, =, (, g, /, ort, [, m, ], ), /, householderVectors, [, m, ], []
[;, }, g, =, (, g, /, ort, [, m, ], ), /, householderVectors, [, m, ], [, m, -]
[[, m, ], ), /, householderVectors, [, m, ], [, m, -, 1, ], ;, for, (, int, i, =]
[], ), /, householderVectors, [, m, ], [, m, -, 1, ], ;, for, (, int, i, =, m, ;]
[], ), /, householderVectors, [, m, ], [, m, -, 1, ], ;, for, (, int, i, =, m, ;]
[/, householderVectors, [, m, ], [, m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=]
[[, m, ], [, m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[[, m, ], [, m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[m, -, 1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[1, ], ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, pa, []
[for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, pa, [, i, ], []
[i, =, m, ;, i, <=, high, ;, i, ++, ), {, pa, [, i, ], [, j, ], +=]
[i, =, m, ;, i, <=, high, ;, i, ++, ), {, pa, [, i, ], [, j, ], +=]
[m, ;, i, <=, high, ;, i, ++, ), {, pa, [, i, ], [, j, ], +=, g, *]
[m, ;, i, <=, high, ;, i, ++, ), {, pa, [, i, ], [, j, ], +=, g, *]
[i, <=, high, ;, i, ++, ), {, pa, [, i, ], [, j, ], +=, g, *, ort, []
[{, pa, [, i, ], [, j, ], +=, g, *, ort, [, i, ], ;, }, }, }, }]
[[, i, ], [, j, ], +=, g, *, ort, [, i, ], ;, }, }, }, }, cachedP, =]
[[, i, ], [, j, ], +=, g, *, ort, [, i, ], ;, }, }, }, }, cachedP, =]
[j, ], +=, g, *, ort, [, i, ], ;, }, }, }, }, cachedP, =, MatrixUtils, ., createRealMatrix, (]
[ort, [, i, ], ;, }, }, }, }, cachedP, =, MatrixUtils, ., createRealMatrix, (, pa, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, pa, ), ;, }, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, pa, ), ;, }, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (]
[createRealMatrix, (, pa, ), ;, }, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (, cachedPt, ==]
[), ;, }, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (, cachedPt, ==, null, ), {]
[}, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (, cachedPt, ==, null, ), {, cachedPt, =]
[}, return, cachedP, ;, }, public, RealMatrix, getPT, (, ), {, if, (, cachedPt, ==, null, ), {, cachedPt, =]
[{, if, (, cachedPt, ==, null, ), {, cachedPt, =, getP, (, ), ., transpose, (, ), ;, }, return]
[(, ), ., transpose, (, ), ;, }, return, cachedPt, ;, }, public, RealMatrix, getH, (, ), {, if, (]
[(, ), ., transpose, (, ), ;, }, return, cachedPt, ;, }, public, RealMatrix, getH, (, ), {, if, (]
[., transpose, (, ), ;, }, return, cachedPt, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==]
[cachedPt, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final, int, m, =]
[cachedPt, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final, int, m, =]
[==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, double, [, ], [, ], h, =]
[{, final, int, m, =, householderVectors, ., length, ;, final, double, [, ], [, ], h, =, new, double, []
[m, =, householderVectors, ., length, ;, final, double, [, ], [, ], h, =, new, double, [, m, ], []
[[, ], [, ], h, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =]
[[, ], h, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[[, ], h, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[h, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (]
[m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (, i, >]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {]
[=, 0, ;, i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {, h, []
[i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {, h, [, i, ], []
[i, <, m, ;, ++, i, ), {, if, (, i, >, 0, ), {, h, [, i, ], []
[m, ;, ++, i, ), {, if, (, i, >, 0, ), {, h, [, i, ], [, i, -]
[i, ), {, if, (, i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =]
[i, ), {, if, (, i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =]
[i, ), {, if, (, i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =]
[{, if, (, i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =, householderVectors, []
[i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =, householderVectors, [, i, ], []
[i, >, 0, ), {, h, [, i, ], [, i, -, 1, ], =, householderVectors, [, i, ], []
[0, ), {, h, [, i, ], [, i, -, 1, ], =, householderVectors, [, i, ], [, i, -]
[-, 1, ], =, householderVectors, [, i, ], [, i, -, 1, ], ;, }, for, (, int, j, =]
[], =, householderVectors, [, i, ], [, i, -, 1, ], ;, }, for, (, int, j, =, i, ;]
[], =, householderVectors, [, i, ], [, i, -, 1, ], ;, }, for, (, int, j, =, i, ;]
[householderVectors, [, i, ], [, i, -, 1, ], ;, }, for, (, int, j, =, i, ;, j, <]
[i, ], [, i, -, 1, ], ;, }, for, (, int, j, =, i, ;, j, <, m, ;]
[], [, i, -, 1, ], ;, }, for, (, int, j, =, i, ;, j, <, m, ;, ++]
[-, 1, ], ;, }, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {]
[-, 1, ], ;, }, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {]
[-, 1, ], ;, }, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, h, []
[for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, h, [, i, ], []
[j, =, i, ;, j, <, m, ;, ++, j, ), {, h, [, i, ], [, j, ], =]
[j, =, i, ;, j, <, m, ;, ++, j, ), {, h, [, i, ], [, j, ], =]
[j, =, i, ;, j, <, m, ;, ++, j, ), {, h, [, i, ], [, j, ], =]
[i, ;, j, <, m, ;, ++, j, ), {, h, [, i, ], [, j, ], =, householderVectors, []
[<, m, ;, ++, j, ), {, h, [, i, ], [, j, ], =, householderVectors, [, i, ], []
[), {, h, [, i, ], [, j, ], =, householderVectors, [, i, ], [, j, ], ;, }, }]
[h, [, i, ], [, j, ], =, householderVectors, [, i, ], [, j, ], ;, }, }, cachedH, =]
[h, [, i, ], [, j, ], =, householderVectors, [, i, ], [, j, ], ;, }, }, cachedH, =]
[[, j, ], =, householderVectors, [, i, ], [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (]
[[, i, ], [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, h, ), ;, }, return]
[createRealMatrix, (, h, ), ;, }, return, cachedH, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return]
[[, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, private, void, transform, (, ), {, final, int, n, =]
[[, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, private, void, transform, (, ), {, final, int, n, =]
[;, }, private, void, transform, (, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =]
[;, }, private, void, transform, (, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =]
[private, void, transform, (, ), {, final, int, n, =, householderVectors, ., length, ;, final, int, high, =, n, -]
[int, n, =, householderVectors, ., length, ;, final, int, high, =, n, -, 1, ;, for, (, int, m, =]
[=, householderVectors, ., length, ;, final, int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;]
[=, householderVectors, ., length, ;, final, int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;]
[., length, ;, final, int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;, m, <=]
[., length, ;, final, int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;, m, <=]
[;, final, int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;, m, <=, high, -]
[int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;, m, <=, high, -, 1, ;]
[int, high, =, n, -, 1, ;, for, (, int, m, =, 1, ;, m, <=, high, -, 1, ;]
[for, (, int, m, =, 1, ;, m, <=, high, -, 1, ;, m, ++, ), {, double, scale, =]
[m, <=, high, -, 1, ;, m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =]
[high, -, 1, ;, m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =, m, ;]
[high, -, 1, ;, m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =, m, ;]
[1, ;, m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =, m, ;, i, <=]
[m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[m, ++, ), {, double, scale, =, 0, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[double, scale, =, 0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=]
[=, 0, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=]
[(, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (]
[(, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (]
[(, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (]
[i, =, m, ;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (, householderVectors, []
[;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (, householderVectors, [, i, ], []
[;, i, <=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (, householderVectors, [, i, ], []
[<=, high, ;, i, ++, ), {, scale, +=, FastMath, ., abs, (, householderVectors, [, i, ], [, m, -]
[scale, +=, FastMath, ., abs, (, householderVectors, [, i, ], [, m, -, 1, ], ), ;, }, if, (]
[+=, FastMath, ., abs, (, householderVectors, [, i, ], [, m, -, 1, ], ), ;, }, if, (, !]
[+=, FastMath, ., abs, (, householderVectors, [, i, ], [, m, -, 1, ], ), ;, }, if, (, !]
[(, householderVectors, [, i, ], [, m, -, 1, ], ), ;, }, if, (, !, Precision, ., equals, (]
[[, i, ], [, m, -, 1, ], ), ;, }, if, (, !, Precision, ., equals, (, scale, ,]
[], ), ;, }, if, (, !, Precision, ., equals, (, scale, ,, 0, ), ), {, double, h, =]
[Precision, ., equals, (, scale, ,, 0, ), ), {, double, h, =, 0, ;, for, (, int, i, =]
[equals, (, scale, ,, 0, ), ), {, double, h, =, 0, ;, for, (, int, i, =, high, ;]
[equals, (, scale, ,, 0, ), ), {, double, h, =, 0, ;, for, (, int, i, =, high, ;]
[scale, ,, 0, ), ), {, double, h, =, 0, ;, for, (, int, i, =, high, ;, i, >=]
[0, ), ), {, double, h, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;]
[0, ), ), {, double, h, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;]
[double, h, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {]
[double, h, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {]
[=, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, []
[for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =]
[for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =]
[for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =]
[for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =]
[int, i, =, high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =, householderVectors, []
[high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =, householderVectors, [, i, ], []
[high, ;, i, >=, m, ;, i, --, ), {, ort, [, i, ], =, householderVectors, [, i, ], []
[i, >=, m, ;, i, --, ), {, ort, [, i, ], =, householderVectors, [, i, ], [, m, -]
[;, i, --, ), {, ort, [, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /]
[--, ), {, ort, [, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;]
[{, ort, [, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=]
[{, ort, [, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=]
[{, ort, [, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=]
[[, i, ], =, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=, ort, []
[=, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=, ort, [, i, ], *]
[=, householderVectors, [, i, ], [, m, -, 1, ], /, scale, ;, h, +=, ort, [, i, ], *]
[[, i, ], [, m, -, 1, ], /, scale, ;, h, +=, ort, [, i, ], *, ort, []
[/, scale, ;, h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =]
[/, scale, ;, h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =]
[scale, ;, h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =, (]
[scale, ;, h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =, (]
[scale, ;, h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =, (]
[h, +=, ort, [, i, ], *, ort, [, i, ], ;, }, final, double, g, =, (, ort, []
[[, i, ], *, ort, [, i, ], ;, }, final, double, g, =, (, ort, [, m, ], >]
[*, ort, [, i, ], ;, }, final, double, g, =, (, ort, [, m, ], >, 0, ), ?]
[ort, [, i, ], ;, }, final, double, g, =, (, ort, [, m, ], >, 0, ), ?, -]
[ort, [, i, ], ;, }, final, double, g, =, (, ort, [, m, ], >, 0, ), ?, -]
[;, }, final, double, g, =, (, ort, [, m, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[double, g, =, (, ort, [, m, ], >, 0, ), ?, -, FastMath, ., sqrt, (, h, ), :]
[double, g, =, (, ort, [, m, ], >, 0, ), ?, -, FastMath, ., sqrt, (, h, ), :]
[ort, [, m, ], >, 0, ), ?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =]
[0, ), ?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =]
[?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -]
[?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -]
[?, -, FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -]
[FastMath, ., sqrt, (, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -, ort, []
[(, h, ), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -, ort, [, m, ], *]
[), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;]
[), :, FastMath, ., sqrt, (, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;]
[FastMath, ., sqrt, (, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;, ort, []
[(, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;, ort, [, m, ], =]
[(, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;, ort, [, m, ], =]
[(, h, ), ;, h, =, h, -, ort, [, m, ], *, g, ;, ort, [, m, ], =]
[), ;, h, =, h, -, ort, [, m, ], *, g, ;, ort, [, m, ], =, ort, []
[=, h, -, ort, [, m, ], *, g, ;, ort, [, m, ], =, ort, [, m, ], -]
[*, g, ;, ort, [, m, ], =, ort, [, m, ], -, g, ;, for, (, int, j, =]
[;, ort, [, m, ], =, ort, [, m, ], -, g, ;, for, (, int, j, =, m, ;]
[;, ort, [, m, ], =, ort, [, m, ], -, g, ;, for, (, int, j, =, m, ;]
[[, m, ], =, ort, [, m, ], -, g, ;, for, (, int, j, =, m, ;, j, <]
[], =, ort, [, m, ], -, g, ;, for, (, int, j, =, m, ;, j, <, n, ;]
[], =, ort, [, m, ], -, g, ;, for, (, int, j, =, m, ;, j, <, n, ;]
[g, ;, for, (, int, j, =, m, ;, j, <, n, ;, j, ++, ), {, double, f, =]
[m, ;, j, <, n, ;, j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =]
[j, <, n, ;, j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =, high, ;]
[j, <, n, ;, j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =, high, ;]
[n, ;, j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =, high, ;, i, >=]
[j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;]
[j, ++, ), {, double, f, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;]
[double, f, =, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {]
[=, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=]
[=, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=]
[=, 0, ;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=]
[;, for, (, int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=, ort, []
[int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=, ort, [, i, ], *]
[int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=, ort, [, i, ], *]
[int, i, =, high, ;, i, >=, m, ;, i, --, ), {, f, +=, ort, [, i, ], *]
[=, high, ;, i, >=, m, ;, i, --, ), {, f, +=, ort, [, i, ], *, householderVectors, []
[i, >=, m, ;, i, --, ), {, f, +=, ort, [, i, ], *, householderVectors, [, i, ], []
[i, --, ), {, f, +=, ort, [, i, ], *, householderVectors, [, i, ], [, j, ], ;, }]
[), {, f, +=, ort, [, i, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =]
[), {, f, +=, ort, [, i, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =]
[f, +=, ort, [, i, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =, f, /]
[householderVectors, [, i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, i, =]
[i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, i, =, m, ;]
[i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, i, =, m, ;]
[[, j, ], ;, }, f, =, f, /, h, ;, for, (, int, i, =, m, ;, i, <=]
[], ;, }, f, =, f, /, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[], ;, }, f, =, f, /, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;]
[=, f, /, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[=, f, /, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[=, f, /, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {]
[/, h, ;, for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, []
[for, (, int, i, =, m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], []
[i, =, m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], [, j, ], -=]
[i, =, m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], [, j, ], -=]
[m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *]
[m, ;, i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *]
[i, <=, high, ;, i, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *, ort, []
[i, ], [, j, ], -=, f, *, ort, [, i, ], ;, }, }, for, (, int, i, =]
[[, j, ], -=, f, *, ort, [, i, ], ;, }, }, for, (, int, i, =, 0, ;]
[[, j, ], -=, f, *, ort, [, i, ], ;, }, }, for, (, int, i, =, 0, ;]
[], -=, f, *, ort, [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <=]
[f, *, ort, [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <=, high, ;]
[f, *, ort, [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <=, high, ;]
[}, }, for, (, int, i, =, 0, ;, i, <=, high, ;, i, ++, ), {, double, f, =]
[0, ;, i, <=, high, ;, i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =]
[i, <=, high, ;, i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =, high, ;]
[i, <=, high, ;, i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =, high, ;]
[high, ;, i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =, high, ;, j, >=]
[i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;]
[i, ++, ), {, double, f, =, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;]
[double, f, =, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;, j, --, ), {]
[=, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=]
[=, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=]
[=, 0, ;, for, (, int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=]
[;, for, (, int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=, ort, []
[int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=, ort, [, j, ], *]
[int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=, ort, [, j, ], *]
[int, j, =, high, ;, j, >=, m, ;, j, --, ), {, f, +=, ort, [, j, ], *]
[=, high, ;, j, >=, m, ;, j, --, ), {, f, +=, ort, [, j, ], *, householderVectors, []
[j, >=, m, ;, j, --, ), {, f, +=, ort, [, j, ], *, householderVectors, [, i, ], []
[j, --, ), {, f, +=, ort, [, j, ], *, householderVectors, [, i, ], [, j, ], ;, }]
[), {, f, +=, ort, [, j, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =]
[), {, f, +=, ort, [, j, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =]
[f, +=, ort, [, j, ], *, householderVectors, [, i, ], [, j, ], ;, }, f, =, f, /]
[householderVectors, [, i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, j, =]
[i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, j, =, m, ;]
[i, ], [, j, ], ;, }, f, =, f, /, h, ;, for, (, int, j, =, m, ;]
[[, j, ], ;, }, f, =, f, /, h, ;, for, (, int, j, =, m, ;, j, <=]
[], ;, }, f, =, f, /, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;]
[], ;, }, f, =, f, /, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;]
[=, f, /, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {]
[=, f, /, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {]
[=, f, /, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {]
[/, h, ;, for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, []
[for, (, int, j, =, m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], []
[j, =, m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], [, j, ], -=]
[j, =, m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], [, j, ], -=]
[m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *]
[m, ;, j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *]
[j, <=, high, ;, j, ++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *, ort, []
[++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *, ort, [, j, ], ;, }, }]
[++, ), {, householderVectors, [, i, ], [, j, ], -=, f, *, ort, [, j, ], ;, }, }]
[{, householderVectors, [, i, ], [, j, ], -=, f, *, ort, [, j, ], ;, }, }, ort, []
[i, ], [, j, ], -=, f, *, ort, [, j, ], ;, }, }, ort, [, m, ], =]
[i, ], [, j, ], -=, f, *, ort, [, j, ], ;, }, }, ort, [, m, ], =]
[[, j, ], -=, f, *, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *]
[[, j, ], -=, f, *, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *]
[], -=, f, *, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *, ort, []
[*, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;]
[*, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;]
[*, ort, [, j, ], ;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;]
[[, j, ], ;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;, householderVectors, []
[;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], []
[;, }, }, ort, [, m, ], =, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], []
[}, ort, [, m, ], =, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], [, m, -]
[m, ], =, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], [, m, -, 1, ], =]
[m, ], =, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], [, m, -, 1, ], =]
[=, scale, *, ort, [, m, ], ;, householderVectors, [, m, ], [, m, -, 1, ], =, scale, *]
