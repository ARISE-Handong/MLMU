[), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise]
[||, factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random]
[<, 0, ||, factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution]
[||, factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise]
[>, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise]
[;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, List, <, Vector2D]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0, *]
[,, 0.0, ,, noise, ,, 1e-9, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (]
[,, noise, ,, 1e-9, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;]
[,, 1e-9, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range]
[), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0]
[;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (, samples, /, 2.0, +]
[;, double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0]
[*, FastMath, ., PI, ;, double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (]
[;, double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0]
[., PI, ;, double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[/, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle]
[+, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {]
[/, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step]
[+, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle]
[;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (]
[;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath]
[<, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, )]
[;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath]
[+=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin]
[), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle]
[;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector]
[,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points]
[., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply]
[), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;]
[), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (]
[., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add]
[), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add]
[;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (]
[., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), )]
[), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add]
[;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle]
[., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (, innerCircle, .]
[), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (]
[), ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if]
[), ), ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }]
[;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (]
[), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, )]
[), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random]
[), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }]
[;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeMoons, (, int, samples, ,, boolean, shuffle, ,]
[., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List]
[,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeMoons]
[), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeMoons, (, int, samples, ,, boolean, shuffle]
[), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeMoons, (, int, samples, ,, boolean]
[;, }, public, static, List, <, Vector2D, >, makeMoons, (, int, samples, ,, boolean, shuffle, ,, double, noise, ,, RandomGenerator]
[;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >, points]
[,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -]
[,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;]
[,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <]
[), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >]
[;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (]
[/, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D]
[;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, .]
[-, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, .]
[;, double, range, =, FastMath, ., PI, ;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for]
[;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle]
[., PI, ;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[/, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle]
[/, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle]
[;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (]
[;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath]
[<, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, )]
[;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath]
[+=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin]
[), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle]
[;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range]
[,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist]
[., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, .]
[), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (]
[), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =]
[., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), )]
[), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step]
[;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle]
[., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /, (]
[), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, )]
[), ), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0]
[), ), ), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =]
[=, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =]
[/, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle]
[/, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {]
[), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle]
[;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, .]
[;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, )]
[<, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (]
[;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, )]
[+=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1]
[), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath]
[;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle]
[,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add]
[-, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;]
[,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add]
[., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, .]
[), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, .]
[), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (]
[-, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }]
[-, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector]
[-, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }]
[., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist]
[), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;]
[), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (]
[;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (]
[), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, )]
[), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random]
[), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }]
[;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeBlobs, (, int, samples, ,, int, centers, ,]
[., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List]
[,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeBlobs]
[), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeBlobs, (, int, samples, ,, int, centers]
[), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeBlobs, (, int, samples, ,, int]
[;, }, public, static, List, <, Vector2D, >, makeBlobs, (, int, samples, ,, int, centers, ,, double, clusterStd, ,, double]
[;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for]
[,, 0.0, ,, clusterStd, ,, 1e-9, ), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =]
[,, clusterStd, ,, 1e-9, ), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D]
[,, 1e-9, ), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers]
[), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;]
[;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;, i]
[-, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0]
[;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =, random]
[], ;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =]
[;, i, <, centers, ;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +]
[;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y]
[<, centers, ;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;]
[;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y]
[), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =, random, .]
[++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =, random]
[;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =, new]
[+, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ]]
[*, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, []
[., nextDouble, (, ), *, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +]
[+, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ]]
[;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =, new]
[;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =]
[+, min, ;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ]]
[*, range, +, min, ;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int]
[., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y]
[+, min, ;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ]]
[;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =]
[=, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ]]
[[, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int]
[], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers]
[;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /, centers, ;]
[,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples]
[), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /, centers]
[;, int, count, =, samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int]
[], ;, int, count, =, samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (]
[;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples]
[/, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i]
[;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples]
[;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {, nSamplesPerCenter, []
[., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers]
[,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {, nSamplesPerCenter]
[;, i, <, samples, %, centers, ;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <]
[;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList]
[<, samples, %, centers, ;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >]
[;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList]
[%, centers, ;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =]
[;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList]
[), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >]
[++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D]
[;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i]
[++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int]
[[, i, ], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;]
[], ++, ;, }, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j]
[;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, []
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j]
[<, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ]]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j]
[), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, )]
[;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, .]
[;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample]
[<, nSamplesPerCenter, [, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (]
[;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample]
[[, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,]
[], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, .]
[), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), )]
[++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, )]
[;, points, ., add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (]
[,, dist, ., sample, (, ), ), ;, points, ., add, (, point, ., add, (, centerPoints, [, i, ]]
[., sample, (, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (, point, ., add, (]
[), ;, points, ., add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if]
[., sample, (, ), ), ;, points, ., add, (, point, ., add, (, centerPoints, [, i, ], ), )]
[;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[., add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, )]
[), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, )]
[., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle]
[), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random]
[[, i, ], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new]
[], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (]
[), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }]
[;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator]
[., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List]
[,, new, RandomAdaptor, (, random, ), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeRandom]
[), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator]
[), ), ;, }, return, points, ;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {]
[;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =, new, SobolSequenceGenerator, (]
[;, generator, ., skipTo, (, 999999, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (]
[), ;, generator, ., skipTo, (, 999999, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =]
[., skipTo, (, 999999, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;]
[), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i]
[;, for, (, double, i, =, 0, ;, i, <, samples, ;, i, ++, ), {, double, [, ], vector]
[;, i, <, samples, ;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;]
[;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ]]
[<, samples, ;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, []
[;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ]]
[), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, []
[++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector]
[;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =]
[., nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector]
[=, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *]
[[, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, []
[], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ]]
[;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D]
[-, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =]
[*, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D]
[[, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -]
[], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;]
[-, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =]
[;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D]
[=, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points]
[[, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector]
[], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;]
[;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, ), ;, }, return, points]
[-, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, ), ;, }]
[*, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, )]
[[, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add]
[], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point]
[-, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, ), ;, }]
[;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, ), ;, }, return, points]
[;, points, ., add, (, point, ), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution]
[), ;, points, ., add, (, point, ), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution]
[;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (, distribution]
[., add, (, point, ), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {]
[), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (]
[;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (, distribution, ., sample, (, )]
[;, }, public, static, List, <, DoublePoint, >, normalize, (, final, List, <, Vector2D, >, input, ,, double, minX, ,]
[,, distribution, ., sample, (, ), ), ;, }, public, static, List, <, DoublePoint, >, normalize, (, final, List, <]
[., sample, (, ), ,, distribution, ., sample, (, ), ), ;, }, public, static, List, <, DoublePoint, >, normalize]
[), ;, }, public, static, List, <, DoublePoint, >, normalize, (, final, List, <, Vector2D, >, input, ,, double, minX]
[., sample, (, ), ), ;, }, public, static, List, <, DoublePoint, >, normalize, (, final, List, <, Vector2D, >]
[;, double, rangeY, =, maxY, -, minY, ;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (]
[-, minX, ;, double, rangeY, =, maxY, -, minY, ;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint]
[;, double, rangeY, =, maxY, -, minY, ;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (]
[;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D, p, :]
[-, minY, ;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D]
[;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D, p, :]
[;, for, (, Vector2D, p, :, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;]
[), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (, arr]
[;, arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1]
[., toArray, (, ), ;, arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX]
[=, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ]]
[[, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr]
[], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1]
[;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1]
[-, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2]
[*, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY]
[/, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, )]
[), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY]
[-, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ]]
[[, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr]
[], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1]
[), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY]
[*, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY]
[-, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2]
[;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1]
[=, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (]
[[, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points]
[], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add]
[;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @, SuppressWarnings, (]
[-, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @]
[*, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;]
[/, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return]
[), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }]
[-, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), )]
[[, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (]
[], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, )]
[), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }]
[*, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;]
[-, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @]
[;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @, SuppressWarnings, (]
[;, }, return, points, ;, }, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public, Display]
[., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @, SuppressWarnings, (, "serial", )]
[), ;, }, return, points, ;, }, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public]
[), ), ;, }, return, points, ;, }, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {]
[;, }, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle]
[public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (, 800]
[), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (]
[;, setSize, (, 800, ,, 800, ), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500]
[), ;, setSize, (, 800, ,, 800, ), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =]
[;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =, new, Well19937c, (]
[,, 800, ), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =]
[), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =, new, Well19937c]
[;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =, new, Well19937c, (, 0, ), ;, List, <, List, <, DoublePoint]
[), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =, new, Well19937c, (, 0, ), ;, List, <, List, <]
[;, RandomGenerator, rng, =, new, Well19937c, (, 0, ), ;, List, <, List, <, DoublePoint, >, >, datasets, =, new]
[;, List, <, List, <, DoublePoint, >, >, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (, )]
[), ;, List, <, List, <, DoublePoint, >, >, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (]
[;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,]
[;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1]
[., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1]
[), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -]
[,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons]
[,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, )]
[,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;]
[,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, .]
[,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (]
[), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (]
[,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,]
[,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,]
[,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,]
[,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng]
[,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng]
[), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,]
[;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,]
[., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2]
[), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10]
[,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs]
[,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;]
[,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, .]
[,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (]
[), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (]
[,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,]
[,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,]
[,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,]
[,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -]
[,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -]
[), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,]
[;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1, ,]
[., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,]
[), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1]
[,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom]
[,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,]
[,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12]
[,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12]
[,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;]
[,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;]
[,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, .]
[,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (]
[), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (]
[,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, )]
[,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, )]
[,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -]
[,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1]
[,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1]
[), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -]
[;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =, new, ArrayList, <, Pair, <]
[., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, )]
[), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =, new, ArrayList, <, Pair]
[,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer]
[), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, List, <, Pair, <, String, ,]
[,, 1, ,, -, 1, ,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >]
[,, 1, ,, -, 1, ,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >]
[,, -, 1, ,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >]
[,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =, new]
[,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =, new]
[), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =, new, ArrayList, <]
[;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer]
[;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer]
[., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint]
[), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new]
[,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,]
[), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)"]
[;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer]
[., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint]
[), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new]
[,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,]
[), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)"]
[;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer]
[., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint]
[), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new]
[,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), ), ), ;, algorithms, ., add, (, new, Pair]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,]
[,, 2, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >]
[), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)"]
[;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer]
[., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint]
[), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new]
[,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), ), ), ;, algorithms, ., add, (, new, Pair]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,]
[,, 10, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >]
[), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)"]
[;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx]
[., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint]
[), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, .]
[,, new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (]
[), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c]
[,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, .]
[), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;]
[;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0]
[=, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets]
[., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c]
[;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (]
[., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new]
[=, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,]
[., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,]
[;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,]
[=, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,, 2, ), ;, for]
[., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,, 2, )]
[;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,, 2, ), ;, for, (, Pair]
[=, new, Insets, (, 2, ,, 2, ,, 2, ,, 2, ), ;, for, (, Pair, <, String, ,, Clusterer]
[., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,, 2, ), ;, for, (, Pair, <, String]
[;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =]
[,, 2, ,, 2, ,, 2, ), ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair]
[,, 2, ,, 2, ), ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms]
[,, 2, ), ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {]
[), ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text]
[), {, JLabel, text, =, new, JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,]
[;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, for]
[), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;]
[+, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c]
[), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;]
[., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++]
[., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;]
[,, "<br>", ), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }, c, .]
[), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++]
[;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :]
[,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint]
[), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset]
[;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c, .]
[++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c]
[., gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, )]
[;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c, ., gridx, =, 0, ;, for, (]
[++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c, ., gridx, =, 0, ;, for]
[., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c, ., gridx, =, 0]
[), {, c, ., gridx, =, 0, ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair]
[=, 0, ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, long]
[., gridx, =, 0, ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, )]
[;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, long, start, =]
[), {, long, start, =, System, ., currentTimeMillis, (, ), ;, List, <, ?, extends, Cluster, <, DoublePoint, >, >]
[;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =, pair, ., getSecond, (, ), ., cluster, (]
[., currentTimeMillis, (, ), ;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =, pair, ., getSecond, (]
[;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start]
[., cluster, (, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (]
[., getSecond, (, ), ., cluster, (, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add]
[), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -]
[;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;, c, ., gridx, ++]
[., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;]
[;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial", )]
[,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings]
[,, end, -, start, ), ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;]
[), ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @]
[-, start, ), ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }]
[), ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @]
[), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial"]
[;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot, extends]
[++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot]
[., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static]
[;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot, extends, JComponent, {, private, static, double, PAD]
[++, ;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot, extends, JComponent, {, private, static, double]
[., gridy, ++, ;, }, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot, extends, JComponent, {, private]
[public, static, class, ClusterPlot, extends, JComponent, {, private, static, double, PAD, =, 10, ;, private, List, <, ?, extends, Cluster]
[), public, static, class, ClusterPlot, extends, JComponent, {, private, static, double, PAD, =, 10, ;, private, List, <, ?, extends]
[;, private, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ;, private, long, duration, ;, public, ClusterPlot, (]
[=, clusters, ;, this, ., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {]
[., clusters, =, clusters, ;, this, ., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g]
[;, this, ., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, .]
[=, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (, g, )]
[., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (]
[;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (, g, ), ;, Graphics2D]
[;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON]
[., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, .]
[), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, .]
[;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, )]
[;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, )]
[;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0]
[., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int]
[,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;]
[., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (]
[), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (]
[., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, .]
[;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, )]
[;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, .]
[;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -]
[., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, )]
[,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect]
[,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0]
[,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0]
[), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w]
[;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, ), ;, int, index]
[., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,]
[), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, ), ;, int]
[., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, )]
[;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,]
[., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, ), ;, int, index, =, 0]
[,, 0, ,, w, -, 1, ,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ]]
[,, w, -, 1, ,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =]
[,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ]]
[-, 1, ,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color]
[,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ]]
[), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red]
[-, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color]
[), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red]
[;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,, Color, ., blue, ,, Color]
[;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (, colors, [, index, ++]
[;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (, colors, [, index, ++]
[,, Color, ., blue, ,, Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >]
[., red, ,, Color, ., blue, ,, Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <]
[,, Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, )]
[., blue, ,, Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :]
[}, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (, colors, [, index]
[., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint]
[., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2]
[), {, g2, ., setPaint, (, colors, [, index, ++, ], ), ;, for, (, DoublePoint, point, :, cluster, .]
[;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (, point, ,]
[., setPaint, (, colors, [, index, ++, ], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, )]
[), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (, point]
[[, index, ++, ], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p]
[], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (]
[++, ], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform]
[), {, Clusterable, p, =, transform, (, point, ,, w, ,, h, ), ;, double, [, ], arr, =, p]
[., getPoints, (, ), ), {, Clusterable, p, =, transform, (, point, ,, w, ,, h, ), ;, double, []
[;, double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double]
[,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill]
[,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new]
[), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, .]
[;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1]
[., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1]
[;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?, >]
[., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -]
[), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?]
[,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster]
[-, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster]
[[, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }]
[], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (]
[,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster]
[,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (]
[-, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =]
[[, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {]
[], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p]
[,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (]
[,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (]
[), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <]
[), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter, (, )]
[instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter]
[;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (]
[,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =]
[., getCenter, (, ), ,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, )]
[), ., getCenter, (, ), ,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (]
[), ., getCenter, (, ), ,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (]
[,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D]
[), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double]
[;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, [, 1, ]]
[., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,]
[;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw]
[,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;]
[-, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s]
[[, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, .]
[], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (]
[,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;]
[,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black]
[-, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color]
[[, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, .]
[], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (]
[,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black]
[,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;]
[), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, .]
[;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }, g2]
[., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s]
[), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }]
[;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2]
[., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint]
[), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;]
[., black, ), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black]
[;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (]
[., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString]
[), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format]
[;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,]
[., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /]
[), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40]
[., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w]
[;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150, ,, 150, ), ;, }]
[., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,, h, -]
[,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return]
[., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,, h, -, 5, ), ;, }]
[,, duration, /, 1e3, ), ,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension]
[), ,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {]
[/, 1e3, ), ,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (]
[), ,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {]
[,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150]
[-, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension]
[,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150]
[), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150, ,, 150, ), ;]
[-, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150, ,, 150]
[), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150, ,, 150, ), ;]
[;, }, private, Clusterable, transform, (, Clusterable, point, ,, int, width, ,, int, height, ), {, double, [, ], arr]
[,, 150, ), ;, }, private, Clusterable, transform, (, Clusterable, point, ,, int, width, ,, int, height, ), {, double]
[), ;, }, private, Clusterable, transform, (, Clusterable, point, ,, int, width, ,, int, height, ), {, double, [, ]]
[;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, )]
[., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0]
[;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (, new, Display]
[), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (, new]
[), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (, new]
[,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2]
[+, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,]
[,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2]
[*, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1]
[/, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ]]
[), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1]
[+, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr]
[[, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD]
[], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (]
[), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1]
[*, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1]
[,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2]
[), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -]
[-, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0]
[), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -]
[*, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (]
[), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -]
[}, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (]
[-, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[-, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD]
[-, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[}, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (]
[*, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, []
[/, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (]
[), /, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main]
[+, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static]
[[, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }]
[], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public]
[), /, 2.0, *, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main]
[*, (, height, -, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, []
[}, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (]
[), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame]
[-, 2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, )]
[), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame]
[*, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils]
[), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame]
[;, }, }]
[., showExampleFrame, (, new, Display, (, ), ), ;, }, }]
[), ;, }, }]
