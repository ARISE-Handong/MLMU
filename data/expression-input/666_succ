[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {]
[==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1]
[||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, .]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;]
[), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator]
[=, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ]]
[., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair]
[;, this, ., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (]
[., starts, =, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {]
[;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==]
[=, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw]
[., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, )]
[;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }]
[==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, )]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }]
[;, }, return, optima, ., clone, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }]
[), ;, }, return, optima, ., clone, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;]
[., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return]
[;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (, ), {, return, totalEvaluations]
[., clone, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (]
[;, }, public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, ConvergenceChecker, <, PointVectorValuePair, >, getConvergenceChecker, (, )]
[;, }, public, ConvergenceChecker, <, PointVectorValuePair, >, getConvergenceChecker, (, ), {, return, optimizer, ., getConvergenceChecker, (, ), ;, }, public]
[;, }, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, double, [, ], target, ,, double, []
[., getConvergenceChecker, (, ), ;, }, public, PointVectorValuePair, optimize, (, int, maxEval, ,, final, FUNC, f, ,, double, [, ]]
[=, maxEval, ;, RuntimeException, lastException, =, null, ;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;]
[;, RuntimeException, lastException, =, null, ;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (]
[;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {]
[], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, )]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {]
[;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, optima, []
[;, i, <, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (]
[;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,]
[<, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -]
[;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,]
[), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target]
[), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target]
[=, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint]
[[, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==]
[], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?]
[;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue]
[., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :, generator]
[,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;]
[-, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, )]
[,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;]
[,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch]
[,, weights, ,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException]
[,, i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, )]
[), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException]
[?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i]
[==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima]
[?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i]
[:, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =]
[), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException]
[., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;]
[=, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null]
[[, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i]
[], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =]
[;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }]
[=, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }]
[;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (]
[=, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;]
[[, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,]
[], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, )]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (]
[+=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, [, 0]
[;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw]
[., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, [, 0, ], ==]
[;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ]]
[,, weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima]
[), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0]
[), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, double, []
[==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final]
[[, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void]
[], ==, null, ), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (]
[), {, throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, double, []
[;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final]
[;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights, ), {, Arrays]
[[, 0, ], ;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights]
[], ;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights, ), {]
[;, }, }]
[., sort, (, optima, ,, new, Comparator, <, PointVectorValuePair, >, (, ), {, public, int, compare, (, final, PointVectorValuePair, o1]
[,, new, Comparator, <, PointVectorValuePair, >, (, ), {, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2]
[), ;, }, }]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[:, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, .]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2]
[==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual]
[), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2]
[;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private]
[;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private]
[;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =, pv, ., getValueRef]
[., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final]
[,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, []
[), ,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double]
[), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =, pv, .]
[), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =, pv]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++]
[., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, value]
[;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double]
[;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -]
[;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum]
[<, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, []
[;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum]
[., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ]]
[), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=, weights, []
[), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=, weights, []
[;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;]
[-, target, [, i, ], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum]
[[, i, ], -, target, [, i, ], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;]
[], -, target, [, i, ], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return]
[;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;]
[[, i, ], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum, ;, }]
[], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum, ;, }, }, )]
[+=, weights, [, i, ], *, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[;, }, return, sum, ;, }, }, ), ;, }, }]
[*, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[*, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[[, i, ], *, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[], *, ri, *, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[*, ri, ;, }, return, sum, ;, }, }, ), ;, }, }]
[;, }, return, sum, ;, }, }, ), ;, }, }]
[;, }, }, ), ;, }, }]
