[., DecoratedDateTimeField, ;, import, org, ., joda, ., time, ., field, ., FieldUtils, ;, final, class, GJYearOfEraDateTimeField, extends, DecoratedDateTimeField, {]
[import, org, ., joda, ., time, ., field, ., FieldUtils, ;, final, class, GJYearOfEraDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[., FieldUtils, ;, final, class, GJYearOfEraDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[FieldUtils, ;, final, class, GJYearOfEraDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =, -]
[=, -, 5961050944769862059L, ;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (]
[5961050944769862059L, ;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,]
[5961050944769862059L, ;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,]
[GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,, DateTimeFieldType, ., yearOfEra, (, ), ), ;]
[DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,, DateTimeFieldType, ., yearOfEra, (, ), ), ;, iChronology, =]
[., yearOfEra, (, ), ), ;, iChronology, =, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[., yearOfEra, (, ), ), ;, iChronology, =, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[{, return, iChronology, ., eras, (, ), ;, }, public, int, get, (, long, instant, ), {, int, year, =]
[{, return, iChronology, ., eras, (, ), ;, }, public, int, get, (, long, instant, ), {, int, year, =]
[), ;, }, public, int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (]
[get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, year, <=]
[{, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {]
[year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, year, =]
[year, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, year, =]
[getWrappedField, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, year, =, 1, -]
[get, (, instant, ), ;, if, (, year, <=, 0, ), {, year, =, 1, -, year, ;, }, return]
[-, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return]
[-, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return]
[;, }, public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return]
[add, (, instant, ,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return]
[add, (, instant, ,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return]
[;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return]
[,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,]
[], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,]
[long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 1, ,]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (]
[., verifyValueBounds, (, this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (]
[this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=]
[,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {]
[,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =]
[,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =]
[(, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -]
[if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }, return]
[if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }, return]
[getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }, return, super, ., set, (]
[instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }, return, super, ., set, (, instant, ,]
[;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[{, return, getWrappedField, (, ), ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[{, return, getWrappedField, (, ), ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (]
[), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return]
[), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return]
