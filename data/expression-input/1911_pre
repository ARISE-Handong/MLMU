[BackgroundInitializer, <, MultiBackgroundInitializer, ., MultiBackgroundInitializerResults, >, {, private, final, Map, <, String, ,, BackgroundInitializer, <, ?, >, >, childInitializers, =]
[public, MultiBackgroundInitializer, (, ), {, super, (, ), ;, }, public, MultiBackgroundInitializer, (, final, ExecutorService, exec, ), {, super, (]
[;, }, public, void, addInitializer, (, final, String, name, ,, final, BackgroundInitializer, <, ?, >, init, ), {, if, (]
[;, }, public, void, addInitializer, (, final, String, name, ,, final, BackgroundInitializer, <, ?, >, init, ), {, if, (]
[public, void, addInitializer, (, final, String, name, ,, final, BackgroundInitializer, <, ?, >, init, ), {, if, (, name, ==]
[final, String, name, ,, final, BackgroundInitializer, <, ?, >, init, ), {, if, (, name, ==, null, ), {, throw]
[,, final, BackgroundInitializer, <, ?, >, init, ), {, if, (, name, ==, null, ), {, throw, new, IllegalArgumentException, (]
[init, ), {, if, (, name, ==, null, ), {, throw, new, IllegalArgumentException, (, "Name of child initializer must not be null!", ), ;, }, if, (]
[init, ), {, if, (, name, ==, null, ), {, throw, new, IllegalArgumentException, (, "Name of child initializer must not be null!", ), ;, }, if, (]
[{, if, (, name, ==, null, ), {, throw, new, IllegalArgumentException, (, "Name of child initializer must not be null!", ), ;, }, if, (, init, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Name of child initializer must not be null!", ), ;, }, if, (, init, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Name of child initializer must not be null!", ), ;, }, if, (, init, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, init, ==, null, ), {, throw, new, IllegalArgumentException, (, "Child initializer must not be null!", ), ;, }, synchronized, (]
[init, ==, null, ), {, throw, new, IllegalArgumentException, (, "Child initializer must not be null!", ), ;, }, synchronized, (, this, ), {, if, (]
[new, IllegalArgumentException, (, "Child initializer must not be null!", ), ;, }, synchronized, (, this, ), {, if, (, isStarted, (, ), ), {, throw]
["Child initializer must not be null!", ), ;, }, synchronized, (, this, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (]
[synchronized, (, this, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "addInitializer() must not be called after start()!", ), ;, }]
[synchronized, (, this, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "addInitializer() must not be called after start()!", ), ;, }]
[{, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "addInitializer() must not be called after start()!", ), ;, }, childInitializers, ., put, (]
[(, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "addInitializer() must not be called after start()!", ), ;, }, childInitializers, ., put, (, name, ,]
[put, (, name, ,, init, ), ;, }, }, @, Override, protected, int, getTaskCount, (, ), {, int, result, =]
[protected, int, getTaskCount, (, ), {, int, result, =, 1, ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :]
[protected, int, getTaskCount, (, ), {, int, result, =, 1, ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :]
[result, =, 1, ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, childInitializers, ., values, (, ), ), {]
[1, ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, childInitializers, ., values, (, ), ), {, result, +=]
[1, ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, childInitializers, ., values, (, ), ), {, result, +=]
[>, bi, :, childInitializers, ., values, (, ), ), {, result, +=, bi, ., getTaskCount, (, ), ;, }, return]
[MultiBackgroundInitializerResults, initialize, (, ), throws, Exception, {, Map, <, String, ,, BackgroundInitializer, <, ?, >, >, inits, ;, synchronized, (]
[), throws, Exception, {, Map, <, String, ,, BackgroundInitializer, <, ?, >, >, inits, ;, synchronized, (, this, ), {]
[Exception, {, Map, <, String, ,, BackgroundInitializer, <, ?, >, >, inits, ;, synchronized, (, this, ), {, inits, =]
[inits, ;, synchronized, (, this, ), {, inits, =, new, HashMap, <, String, ,, BackgroundInitializer, <, ?, >, >, (]
[=, new, HashMap, <, String, ,, BackgroundInitializer, <, ?, >, >, (, childInitializers, ), ;, }, final, ExecutorService, exec, =]
[), ;, }, final, ExecutorService, exec, =, getActiveExecutor, (, ), ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :]
[), ;, }, final, ExecutorService, exec, =, getActiveExecutor, (, ), ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :]
[), ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, inits, ., values, (, ), ), {, if, (]
[), ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, inits, ., values, (, ), ), {, if, (]
[), ;, for, (, final, BackgroundInitializer, <, ?, >, bi, :, inits, ., values, (, ), ), {, if, (]
[<, ?, >, bi, :, inits, ., values, (, ), ), {, if, (, bi, ., getExternalExecutor, (, ), ==]
[bi, :, inits, ., values, (, ), ), {, if, (, bi, ., getExternalExecutor, (, ), ==, null, ), {]
[bi, :, inits, ., values, (, ), ), {, if, (, bi, ., getExternalExecutor, (, ), ==, null, ), {]
[values, (, ), ), {, if, (, bi, ., getExternalExecutor, (, ), ==, null, ), {, bi, ., setExternalExecutor, (]
[{, if, (, bi, ., getExternalExecutor, (, ), ==, null, ), {, bi, ., setExternalExecutor, (, exec, ), ;, }]
[{, if, (, bi, ., getExternalExecutor, (, ), ==, null, ), {, bi, ., setExternalExecutor, (, exec, ), ;, }]
[exec, ), ;, }, bi, ., start, (, ), ;, }, final, Map, <, String, ,, Object, >, results, =]
[=, new, HashMap, <, String, ,, Object, >, (, ), ;, final, Map, <, String, ,, ConcurrentException, >, excepts, =]
[>, (, ), ;, for, (, final, Map, ., Entry, <, String, ,, BackgroundInitializer, <, ?, >, >, e, :]
[>, (, ), ;, for, (, final, Map, ., Entry, <, String, ,, BackgroundInitializer, <, ?, >, >, e, :]
[Entry, <, String, ,, BackgroundInitializer, <, ?, >, >, e, :, inits, ., entrySet, (, ), ), {, try, {]
[Entry, <, String, ,, BackgroundInitializer, <, ?, >, >, e, :, inits, ., entrySet, (, ), ), {, try, {]
[BackgroundInitializer, <, ?, >, >, e, :, inits, ., entrySet, (, ), ), {, try, {, results, ., put, (]
[BackgroundInitializer, <, ?, >, >, e, :, inits, ., entrySet, (, ), ), {, try, {, results, ., put, (]
[:, inits, ., entrySet, (, ), ), {, try, {, results, ., put, (, e, ., getKey, (, ), ,]
[:, inits, ., entrySet, (, ), ), {, try, {, results, ., put, (, e, ., getKey, (, ), ,]
[:, inits, ., entrySet, (, ), ), {, try, {, results, ., put, (, e, ., getKey, (, ), ,]
[,, e, ., getValue, (, ), ., get, (, ), ), ;, }, catch, (, final, ConcurrentException, cex, ), {]
[,, e, ., getValue, (, ), ., get, (, ), ), ;, }, catch, (, final, ConcurrentException, cex, ), {]
[(, ), ., get, (, ), ), ;, }, catch, (, final, ConcurrentException, cex, ), {, excepts, ., put, (]
[(, ), ., get, (, ), ), ;, }, catch, (, final, ConcurrentException, cex, ), {, excepts, ., put, (]
[), ;, }, catch, (, final, ConcurrentException, cex, ), {, excepts, ., put, (, e, ., getKey, (, ), ,]
[ConcurrentException, cex, ), {, excepts, ., put, (, e, ., getKey, (, ), ,, cex, ), ;, }, }, return]
[{, excepts, ., put, (, e, ., getKey, (, ), ,, cex, ), ;, }, }, return, new, MultiBackgroundInitializerResults, (]
[., put, (, e, ., getKey, (, ), ,, cex, ), ;, }, }, return, new, MultiBackgroundInitializerResults, (, inits, ,]
[(, e, ., getKey, (, ), ,, cex, ), ;, }, }, return, new, MultiBackgroundInitializerResults, (, inits, ,, results, ,]
[,, final, Map, <, String, ,, Object, >, results, ,, final, Map, <, String, ,, ConcurrentException, >, excepts, ), {]
[Map, <, String, ,, Object, >, results, ,, final, Map, <, String, ,, ConcurrentException, >, excepts, ), {, initializers, =]
[String, ,, Object, >, results, ,, final, Map, <, String, ,, ConcurrentException, >, excepts, ), {, initializers, =, inits, ;]
[Object, >, results, ,, final, Map, <, String, ,, ConcurrentException, >, excepts, ), {, initializers, =, inits, ;, resultObjects, =]
[results, ,, final, Map, <, String, ,, ConcurrentException, >, excepts, ), {, initializers, =, inits, ;, resultObjects, =, results, ;]
[final, Map, <, String, ,, ConcurrentException, >, excepts, ), {, initializers, =, inits, ;, resultObjects, =, results, ;, exceptions, =]
[results, ;, exceptions, =, excepts, ;, }, public, BackgroundInitializer, <, ?, >, getInitializer, (, final, String, name, ), {, return]
[exceptions, =, excepts, ;, }, public, BackgroundInitializer, <, ?, >, getInitializer, (, final, String, name, ), {, return, checkName, (]
[String, name, ), {, return, checkName, (, name, ), ;, }, public, Object, getResultObject, (, final, String, name, ), {]
[), {, return, checkName, (, name, ), ;, }, public, Object, getResultObject, (, final, String, name, ), {, checkName, (]
[(, name, ), ;, }, public, Object, getResultObject, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[(, name, ), ;, }, public, Object, getResultObject, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[}, public, Object, getResultObject, (, final, String, name, ), {, checkName, (, name, ), ;, return, resultObjects, ., get, (]
[), ;, return, resultObjects, ., get, (, name, ), ;, }, public, boolean, isException, (, final, String, name, ), {]
[return, resultObjects, ., get, (, name, ), ;, }, public, boolean, isException, (, final, String, name, ), {, checkName, (]
[(, name, ), ;, }, public, boolean, isException, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[(, name, ), ;, }, public, boolean, isException, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[}, public, boolean, isException, (, final, String, name, ), {, checkName, (, name, ), ;, return, exceptions, ., containsKey, (]
[), ;, return, exceptions, ., containsKey, (, name, ), ;, }, public, ConcurrentException, getException, (, final, String, name, ), {]
[return, exceptions, ., containsKey, (, name, ), ;, }, public, ConcurrentException, getException, (, final, String, name, ), {, checkName, (]
[(, name, ), ;, }, public, ConcurrentException, getException, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[(, name, ), ;, }, public, ConcurrentException, getException, (, final, String, name, ), {, checkName, (, name, ), ;, return]
[}, public, ConcurrentException, getException, (, final, String, name, ), {, checkName, (, name, ), ;, return, exceptions, ., get, (]
[;, return, exceptions, ., get, (, name, ), ;, }, public, Set, <, String, >, initializerNames, (, ), {, return]
[;, return, exceptions, ., get, (, name, ), ;, }, public, Set, <, String, >, initializerNames, (, ), {, return]
[get, (, name, ), ;, }, public, Set, <, String, >, initializerNames, (, ), {, return, Collections, ., unmodifiableSet, (]
[get, (, name, ), ;, }, public, Set, <, String, >, initializerNames, (, ), {, return, Collections, ., unmodifiableSet, (]
[return, Collections, ., unmodifiableSet, (, initializers, ., keySet, (, ), ), ;, }, public, boolean, isSuccessful, (, ), {, return]
[return, Collections, ., unmodifiableSet, (, initializers, ., keySet, (, ), ), ;, }, public, boolean, isSuccessful, (, ), {, return]
[}, private, BackgroundInitializer, <, ?, >, checkName, (, final, String, name, ), {, final, BackgroundInitializer, <, ?, >, init, =]
[}, private, BackgroundInitializer, <, ?, >, checkName, (, final, String, name, ), {, final, BackgroundInitializer, <, ?, >, init, =]
[?, >, checkName, (, final, String, name, ), {, final, BackgroundInitializer, <, ?, >, init, =, initializers, ., get, (]
[String, name, ), {, final, BackgroundInitializer, <, ?, >, init, =, initializers, ., get, (, name, ), ;, if, (]
[String, name, ), {, final, BackgroundInitializer, <, ?, >, init, =, initializers, ., get, (, name, ), ;, if, (]
[), {, final, BackgroundInitializer, <, ?, >, init, =, initializers, ., get, (, name, ), ;, if, (, init, ==]
[<, ?, >, init, =, initializers, ., get, (, name, ), ;, if, (, init, ==, null, ), {, throw]
[init, =, initializers, ., get, (, name, ), ;, if, (, init, ==, null, ), {, throw, new, NoSuchElementException, (]
[init, =, initializers, ., get, (, name, ), ;, if, (, init, ==, null, ), {, throw, new, NoSuchElementException, (]
[initializers, ., get, (, name, ), ;, if, (, init, ==, null, ), {, throw, new, NoSuchElementException, (, "No child initializer with name ", +]
[), ;, if, (, init, ==, null, ), {, throw, new, NoSuchElementException, (, "No child initializer with name ", +, name, ), ;, }, return]
