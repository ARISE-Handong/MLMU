[,, 1e-10, ,, 1e-10, ,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >]
[,, 1e-10, ,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, )]
[,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this]
[,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100]
[), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,, 1e-10]
[., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker]
[,, checker, ,, 1e-10, ,, 1e-10, ,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor]
[,, 1e-10, ,, 1e-10, ,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker]
[,, 1e-10, ,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker, <, PointVectorValuePair]
[,, 1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker]
[,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker, ,, double]
[), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance]
[., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker, ,, double, costRelativeTolerance, ,]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[=, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance]
[., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance]
[;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this]
[=, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold]
[., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold]
[;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }]
[=, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double]
[., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer]
[;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,]
[=, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double]
[., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance]
[;, this, ., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, )]
[=, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100]
[., qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this]
[;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,, costRelativeTolerance]
[,, costRelativeTolerance, ,, parRelativeTolerance, ,, orthoTolerance, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double]
[,, parRelativeTolerance, ,, orthoTolerance, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,]
[,, orthoTolerance, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance]
[,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double]
[), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold]
[., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[=, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance]
[., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance]
[;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this]
[=, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold]
[., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold]
[;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }]
[=, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair]
[., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override]
[;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (]
[=, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int]
[., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {]
[;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =]
[=, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =, getTarget, (, ), .]
[., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =, getTarget, (]
[;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =, getTarget, (, ), ., length, ;]
[;, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;, solvedCols]
[., length, ;, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length]
[;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;]
[;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;]
[., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC]
[=, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =]
[;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new]
[., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double]
[,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;]
[), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =]
[=, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, []
[;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new]
[], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =]
[=, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, []
[;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new]
[], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =]
[=, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new, double, []
[;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new, double, [, nC, ], ;, double, delta, =]
[], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new, double, [, nC, ], ;, double, delta]
[=, new, int, [, nC, ], ;, lmDir, =, new, double, [, nC, ], ;, double, delta, =, 0, ;]
[;, lmDir, =, new, double, [, nC, ], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double]
[], ;, lmDir, =, new, double, [, nC, ], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;]
[=, new, double, [, nC, ], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double, [, ]]
[;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double, [, ], diag, =, new, double, [, nC]
[], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double, [, ], diag, =, new, double, []
[;, double, xNorm, =, 0, ;, double, [, ], diag, =, new, double, [, nC, ], ;, double, [, ]]
[;, double, [, ], diag, =, new, double, [, nC, ], ;, double, [, ], oldX, =, new, double, []
[;, double, [, ], oldX, =, new, double, [, nC, ], ;, double, [, ], oldRes, =, new, double, []
[], ;, double, [, ], oldX, =, new, double, [, nC, ], ;, double, [, ], oldRes, =, new, double]
[;, double, [, ], oldRes, =, new, double, [, nR, ], ;, double, [, ], oldObj, =, new, double, []
[], ;, double, [, ], oldRes, =, new, double, [, nR, ], ;, double, [, ], oldObj, =, new, double]
[;, double, [, ], oldObj, =, new, double, [, nR, ], ;, double, [, ], qtf, =, new, double, []
[], ;, double, [, ], oldObj, =, new, double, [, nR, ], ;, double, [, ], qtf, =, new, double]
[;, double, [, ], qtf, =, new, double, [, nR, ], ;, double, [, ], work1, =, new, double, []
[], ;, double, [, ], qtf, =, new, double, [, nR, ], ;, double, [, ], work1, =, new, double]
[;, double, [, ], work1, =, new, double, [, nC, ], ;, double, [, ], work2, =, new, double, []
[], ;, double, [, ], work1, =, new, double, [, nC, ], ;, double, [, ], work2, =, new, double]
[;, double, [, ], work2, =, new, double, [, nC, ], ;, double, [, ], work3, =, new, double, []
[], ;, double, [, ], work2, =, new, double, [, nC, ], ;, double, [, ], work3, =, new, double]
[;, double, [, ], work3, =, new, double, [, nC, ], ;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, ), ;]
[], ;, double, [, ], work3, =, new, double, [, nC, ], ;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, )]
[;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, ), ;, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, double]
[], ;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, ), ;, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;]
[;, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, )]
[;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective]
[), ;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;]
[), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, )]
[;, double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =, 0, ;, boolean, firstIteration, =, true, ;, int, iter]
[,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =, 0, ;, boolean, firstIteration, =, true]
[), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =, 0, ;, boolean, firstIteration, =, true, ;, int]
[;, lmPar, =, 0, ;, boolean, firstIteration, =, true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >]
[), ;, lmPar, =, 0, ;, boolean, firstIteration, =, true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair]
[=, 0, ;, boolean, firstIteration, =, true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =]
[;, boolean, firstIteration, =, true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (]
[;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true]
[;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, ++, iter, ;]
[;, while, (, true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint]
[), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual]
[;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate]
[;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate]
[;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (]
[;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR]
[), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i]
[=, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ]]
[., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, [, i]
[;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }]
[;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, )]
[<, nR, ;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (]
[;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, )]
[), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (]
[++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for]
[=, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k]
[[, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =]
[], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;]
[;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k]
[[, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <, solvedCols]
[], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++]
[;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation]
[), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =]
[;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k]
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ]]
[<, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], []
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ]]
[), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, []
[), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, []
[;, weightedJacobian, [, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {]
[[, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (]
[], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, )]
[=, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k]
[[, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for]
[[, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =]
[], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;]
[], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int]
[;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[[, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0]
[], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k]
[), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, )]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, dk]
[;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm]
[;, k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk]
[;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {]
[<, nC, ;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0]
[;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {]
[), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0]
[), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0]
[;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, []
[[, k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk]
[], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint]
[), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk]
[==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm]
[), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk]
[=, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;]
[;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, []
[;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt]
[*, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }]
[;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt]
[[, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =]
[], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, .]
[+=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm]
[;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =]
[*, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;]
[;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =]
[=, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, )]
[[, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm]
[], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0]
[;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor]
[=, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor]
[;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine]
[., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm]
[), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double]
[=, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0]
[;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0]
[?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0]
[), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=]
[==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (]
[), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=]
[:, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {]
[;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0]
[), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =]
[*, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int]
[), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =]
[;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[!=, 0, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ]]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, []
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (]
[;, double, s, =, jacNorm, [, pj, ], ;, if, (, s, !=, 0, ), {, double, sum, =, 0]
[[, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (, s, !=, 0, ), {, double]
[], ;, double, s, =, jacNorm, [, pj, ], ;, if, (, s, !=, 0, ), {, double, sum, =]
[;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[[, pj, ], ;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i]
[], ;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i]
[!=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;]
[<=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =]
[+=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max]
[;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *]
[*, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum]
[[, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, .]
[[, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine]
[], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath]
[], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (]
[;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *]
[[, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /]
[], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s]
[=, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), )]
[;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =, current, .]
[., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }]
[,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (]
[), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =, current]
[/, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (]
[., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=]
[), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost]
[), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =, current]
[), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =]
[*, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;]
[), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for]
[<=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;]
[), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0]
[=, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <]
[;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {]
[., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, diag, [, j]
[;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, []
[;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm]
[<, nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ]]
[;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm]
[), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ]]
[), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ]]
[=, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double]
[[, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }]
[], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (]
[;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =]
[., max, (, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =]
[,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, )]
[[, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <]
[], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;]
[), ;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j]
[[, j, ], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for]
[], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int]
[;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[<, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, []
[), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;]
[), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;]
[;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, []
[[, j, ], ;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost]
[], ;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double]
[=, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;]
[[, pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec]
[], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual]
[;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes]
[[, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =]
[], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;]
[;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;]
[;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec]
[=, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter]
[;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf]
[=, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta]
[;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag]
[=, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1]
[;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2]
[=, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3]
[;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3, ), ;]
[=, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm]
[;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0]
[;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[,, delta, ,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int]
[,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =]
[,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir]
[), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ]]
[;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj]
[[, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =]
[], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, []
[=, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj]
[[, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +]
[], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, []
[;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag]
[;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag]
[[, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double]
[], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =]
[=, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir]
[[, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj]
[], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *]
[;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;]
[+, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm]
[[, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj]
[], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;]
[[, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s]
[], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s]
[;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration]
[*, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm]
[[, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, .]
[], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (]
[;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration]
[[, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;]
[], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (]
[+=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {]
[;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, .]
[*, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =]
[;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, .]
[=, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta]
[;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =]
[., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm]
[), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective]
[), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, )]
[=, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =]
[;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair]
[., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (]
[,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current]
[), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new]
[=, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =]
[), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost]
[=, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (]
[;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed]
[), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double]
[=, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -]
[;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <]
[,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1]
[), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost]
[=, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, )]
[;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost]
[), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =]
[;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0]
[;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0]
[), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (]
[<, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }]
[*, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r]
[<, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }]
[), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (]
[;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols]
[/, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j]
[;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols]
[=, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[-, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[*, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ]]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, []
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, []
[), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, []
[;, double, dirJ, =, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i]
[[, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for]
[], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int]
[;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++]
[[, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=]
[], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, []
[[, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, )]
[], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ]]
[;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj]
[;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;]
[<=, j, ;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *]
[;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;]
[), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double]
[), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double]
[+=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (]
[[, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0]
[], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for]
[;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[*, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols]
[[, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;]
[[, i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j]
[], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0]
[], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, []
[;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ]]
[;, ++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2]
[<, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }]
[;, ++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2]
[), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *]
[), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *]
[+=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1]
[;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *]
[*, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;]
[[, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1]
[], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2]
[;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *]
[[, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2]
[], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar]
[;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed]
[*, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;]
[;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed]
[=, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1]
[;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2]
[/, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2]
[;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2]
[;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;]
[/, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2]
[*, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1]
[*, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -]
[*, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1]
[/, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2]
[;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;]
[;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0]
[+, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==]
[;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0]
[*, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, )]
[;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0]
[;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio]
[;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio]
[), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (]
[+, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;]
[), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (]
[=, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25]
[;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *]
[?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (]
[), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =]
[==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double]
[), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =]
[:, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <]
[;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *]
[), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5]
[/, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?]
[), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5]
[), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5]
[<=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer]
[), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5]
[;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =]
[?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (]
[), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (]
[<, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;]
[), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (]
[:, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {]
[), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), )]
[/, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost]
[*, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost]
[/, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost]
[), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), )]
[), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, )]
[+, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (]
[), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, )]
[*, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <]
[), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, )]
[;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =]
[), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm]
[||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min]
[), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, .]
[>=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *]
[*, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =]
[>=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *]
[), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, .]
[), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm]
[), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *]
[<, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,]
[), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *]
[=, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar]
[;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp]
[=, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else]
[;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, )]
[*, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (]
[;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, )]
[., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar]
[,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||]
[), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75]
[*, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio]
[), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75]
[/=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {]
[;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =]
[), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {]
[||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if]
[), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }]
[==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5]
[), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }]
[), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {]
[), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, )]
[>=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=]
[), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, )]
[=, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false]
[;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0]
[*, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm]
[;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0]
[*=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for]
[;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int]
[), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC]
[>=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k]
[), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC]
[=, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k]
[;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK]
[;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag]
[;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k]
[;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=]
[<, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;]
[;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=]
[), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK]
[), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK]
[;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker]
[*, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm]
[[, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, .]
[], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (]
[;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker]
[[, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;]
[], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (]
[+=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null]
[;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged]
[*, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker]
[;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged]
[=, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,]
[;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost]
[., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,]
[), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =]
[!=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }]
[., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =, current, .]
[,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;]
[,, current, ), ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current]
[), ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;]
[), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost]
[=, current, ., getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (]
[;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;, j]
[., getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j]
[;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[=, previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, []
[), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;]
[), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;]
[;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;]
[[, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual]
[], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes]
[=, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec]
[[, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =]
[], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;]
[;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =]
[[, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective]
[], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective]
[=, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj]
[;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec]
[=, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current]
[;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new]
[=, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (]
[;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[=, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, )]
[;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }]
[=, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (]
[;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath]
[=, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs]
[;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed]
[=, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=]
[;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=]
[,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance]
[), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if]
[||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, )]
[), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (]
[&&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =]
[&&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost]
[<=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost]
[., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance]
[), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {]
[&&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost]
[&&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =]
[<=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;]
[&&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =]
[), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (]
[<=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, .]
[), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if]
[<=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if]
[*, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;]
[), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (]
[), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs]
[=, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, )]
[;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed]
[., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16]
[;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, )]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16]
[&&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }]
[&&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, .]
[), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[<=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException]
[., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, )]
[), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new]
[), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[&&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }]
[), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;]
[<=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance]
[), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=]
[<=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=]
[;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,]
[,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException]
[), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16]
[<=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16]
[*, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16]
[;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, )]
[,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE]
[., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, ), ;, }, }, }, }, private, void, determineLMParameter]
[<=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, ), ;, }, }, }, }, private]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, ), ;, }, }, }, }, private, void, determineLMParameter]
[;, }, }, }, }, private, void, determineLMParameter, (, double, [, ], qy, ,, double, delta, ,, double, [, ]]
[,, orthoTolerance, ), ;, }, }, }, }, private, void, determineLMParameter, (, double, [, ], qy, ,, double, delta, ,]
[., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, ), ;, }, }, }, }, private, void, determineLMParameter, (, double, [, ], qy, ,, double]
[), ;, }, }, }, }, private, void, determineLMParameter, (, double, [, ], qy, ,, double, delta, ,, double, []
[;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, []
[., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, []
[[, 0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, )]
[], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir]
[;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for]
[<, rank, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for]
[), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j]
[), {, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j]
[=, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j]
[[, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;]
[], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++]
[[, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <]
[], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;]
[;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, [, permutation]
[[, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, []
[;, j, <, nC, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k]
[<, nC, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k]
[), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -]
[), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -]
[=, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k, )]
[[, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k]
[], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k]
[[, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0]
[], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --]
[;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k, ), {, int]
[;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =]
[-, 1, ;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double]
[;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =]
[;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ]]
[>=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, []
[;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ]]
[), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, []
[), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, []
[;, double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0]
[[, k, ], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int]
[], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, []
[/, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, )]
[[, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;]
[], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, []
[[, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir]
[], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation]
[;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian]
[;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], []
[<, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i]
[;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], []
[), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;]
[), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;]
[-=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }]
[[, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, []
[], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;]
[[, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ]]
[], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk]
[;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =]
[*, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm]
[;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =]
[[, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (]
[[, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0]
[], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for]
[], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j]
[=, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[[, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j]
[], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols]
[;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ]]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, []
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s]
[[, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj]
[], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =]
[;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt]
[*, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }]
[[, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *]
[], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;]
[;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, .]
[=, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double]
[[, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm]
[], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;]
[;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =]
[+=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (]
[*, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (]
[=, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1]
[;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =, 0]
[., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *, delta]
[), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =]
[;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;]
[-, delta, ;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =, 0, ;, return, ;, }, double]
[;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;]
[), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank]
[<=, 0.1, *, delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0]
[), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank]
[*, delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if]
[), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank]
[=, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank, ==, solvedCols, )]
[;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank, ==, solvedCols, ), {, for]
[;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[==, solvedCols, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, []
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /]
[;, work1, [, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (]
[[, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0]
[], ;, work1, [, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for]
[*=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[[, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j]
[], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0]
[;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[/, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[[, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, )]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i]
[<, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;]
[+=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s]
[;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1]
[*, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum]
[[, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj]
[[, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (]
[], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, []
[], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -]
[;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1]
[[, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /]
[], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;]
[[, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, []
[], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ]]
[;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (]
[/, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }]
[), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;]
[-, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *]
[[, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2]
[], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s]
[), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;]
[;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =]
[], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /]
[=, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;]
[[, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *]
[], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, )]
[;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2]
[+=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0]
[;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int]
[*, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for]
[;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int]
[=, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0]
[;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[/, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j]
[;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[*, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, )]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;]
[<=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=]
[+=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj]
[;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath]
[*, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;]
[[, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum]
[[, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;]
[], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=]
[], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum]
[;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath]
[[, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double]
[], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =]
[/=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (]
[;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru]
[[, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, )]
[], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double]
[+=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm]
[;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if]
[*, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta]
[;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if]
[;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath]
[., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {]
[), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /]
[;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, )]
[/, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,]
[;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, )]
[), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, .]
[==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =]
[), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, .]
[=, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru]
[;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;]
[/, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath]
[;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;]
[., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max]
[,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl]
[), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), )]
[=, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar]
[;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =]
[., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0]
[,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =]
[), ;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown]
[., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /]
[,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for]
[), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int]
[), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;]
[==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=]
[), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;]
[=, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, )]
[;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar]
[/, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if]
[;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar]
[;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, .]
[;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,]
[>=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (]
[;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,]
[), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru]
[), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru]
[), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath]
[==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar]
[), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath]
[=, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (]
[;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;, j]
[., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, )]
[,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int]
[), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;]
[*, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =]
[), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj]
[;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,]
[[, j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy]
[], ;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1]
[=, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;]
[[, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,]
[], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, )]
[;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int]
[*, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =]
[;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int]
[[, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;]
[], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (]
[;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j]
[,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols]
[,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ]]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, []
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s]
[[, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj]
[], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =]
[;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt]
[*, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }]
[[, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *]
[], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;]
[;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt]
[[, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, .]
[=, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double]
[[, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm]
[], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;]
[;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =]
[+=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -]
[*, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -]
[=, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if]
[;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp]
[., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (]
[), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (]
[;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta]
[=, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||]
[;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==]
[-, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (]
[;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==]
[), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), )]
[), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, )]
[<=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (]
[., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp]
[), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&]
[), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, )]
[*, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <]
[), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, )]
[), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[&&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j]
[&&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (]
[), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for]
[==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;]
[), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for]
[&&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j]
[), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;]
[<=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =]
[), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;]
[), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, )]
[), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[<, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, []
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *]
[;, work1, [, pj, ], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for]
[[, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm]
[], ;, work1, [, pj, ], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }]
[=, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0]
[[, pj, ], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int]
[], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[/, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int]
[*, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[[, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j]
[], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols]
[/, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int]
[[, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, []
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;]
[;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for]
[[, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj]
[], ;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;]
[/=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j]
[[, pj, ], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int]
[], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =]
[;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <]
[[, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1]
[], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i]
[;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, []
[[, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, )]
[], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1]
[;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i]
[+, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian]
[;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i]
[;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ]]
[<, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], []
[;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ]]
[), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;]
[), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;]
[-=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int]
[[, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2]
[], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (]
[[, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0]
[], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for]
[;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[*, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[[, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j]
[[, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =]
[], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols]
[;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1]
[;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;]
[;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *]
[<, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=]
[;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *]
[), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }]
[), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }]
[;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if]
[[, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (]
[], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;]
[[, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *]
[], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, )]
[+=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp]
[;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {]
[*, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0]
[;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {]
[;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }]
[/, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (]
[;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }]
[), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;]
[*, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar]
[), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;]
[), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0]
[>, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp]
[), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0]
[=, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru]
[;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, )]
[., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath]
[,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru]
[), ;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar]
[), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (]
[<, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, .]
[), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (]
[=, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar]
[;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar, +, correction, ), ;, }, }, private, void, determineLMDirection]
[., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar, +, correction]
[,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar, +, correction, ), ;, }, }]
[), ;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar, +, correction, ), ;, }, }, private, void]
[=, FastMath, ., max, (, parl, ,, lmPar, +, correction, ), ;, }, }, private, void, determineLMDirection, (, double, []
[;, }, }, private, void, determineLMDirection, (, double, [, ], qy, ,, double, [, ], diag, ,, double, [, ]]
[., max, (, parl, ,, lmPar, +, correction, ), ;, }, }, private, void, determineLMDirection, (, double, [, ], qy]
[,, lmPar, +, correction, ), ;, }, }, private, void, determineLMDirection, (, double, [, ], qy, ,, double, [, ]]
[), ;, }, }, private, void, determineLMDirection, (, double, [, ], qy, ,, double, [, ], diag, ,, double, []
[+, correction, ), ;, }, }, private, void, determineLMDirection, (, double, [, ], qy, ,, double, [, ], diag, ,]
[), ;, }, }, private, void, determineLMDirection, (, double, [, ], qy, ,, double, [, ], diag, ,, double, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +]
[), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i]
[), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i]
[;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, []
[[, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, )]
[], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian]
[;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j]
[+, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian]
[;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j]
[;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, []
[<, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], []
[;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, []
[), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ]]
[), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ]]
[=, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, []
[[, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ]]
[[, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir]
[], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j]
[], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR]
[;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =, qy, [, j]
[[, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, []
[[, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ]]
[], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work]
[], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =, qy, []
[[, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ]]
[], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =, qy]
[=, diagR, [, pj, ], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int]
[[, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =, qy, [, j, ], ;, }]
[], =, diagR, [, pj, ], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (]
[;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j]
[[, pj, ], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =]
[], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;]
[=, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[[, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols]
[], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[[, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ]]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, []
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ]]
[), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (]
[;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (]
[[, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays]
[], ;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill]
[;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, .]
[[, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1]
[], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag]
[), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }]
[!=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, )]
[), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }]
[;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j]
[., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j]
[,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;]
[,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0]
[+, 1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj]
[,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0]
[,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int]
[., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for]
[), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =]
[=, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++]
[[, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <]
[], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;]
[;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++, k, )]
[;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation]
[;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag]
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k, ], !=]
[<, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k]
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k, ], !=]
[), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k, ], !=, 0, ), {]
[), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k, ], !=, 0, ), {]
[;, if, (, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double]
[[, k, ], ;, if, (, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double]
[], ;, if, (, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;]
[), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ]]
[!=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], []
[[, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, []
[], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ]]
[), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ]]
[;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), )]
[[, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k]
[[, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (]
[], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, []
[], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], )]
[), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt]
[<, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, []
[., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan]
[), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag]
[), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt]
[., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ]]
[), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, .]
[[, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0]
[], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath]
[;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *]
[/, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, )]
[;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *]
[[, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos]
[], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin]
[=, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;]
[;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk]
[/, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else]
[;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk]
[., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final]
[), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /]
[+, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag]
[), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /]
[*, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k]
[), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /]
[=, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos]
[;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath]
[*, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0]
[;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath]
[;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *]
[/, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =]
[[, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, )]
[], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin]
[;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *]
[=, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;]
[;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +]
[/, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian]
[;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +]
[., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k]
[), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk]
[+, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ]]
[), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk]
[*, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos]
[), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk]
[=, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *]
[;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ]]
[*, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, []
[;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ]]
[=, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, []
[[, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos]
[[, k, ], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double]
[], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =]
[], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work]
[;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin]
[+, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin]
[*, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ]]
[+, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin]
[;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin]
[*, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj]
[;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin]
[[, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj]
[], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -]
[;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =]
[+, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work]
[*, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +]
[+, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work]
[[, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *]
[], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;]
[;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =]
[*, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k]
[;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =]
[=, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;]
[;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols]
[+, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1]
[*, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int]
[*, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int]
[+, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1]
[[, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =]
[], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +]
[;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols]
[*, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i]
[;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols]
[=, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[[, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++]
[], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, )]
[;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik]
[;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;]
[+, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk]
[;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;]
[;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =]
[<, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double]
[;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =]
[), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik]
[), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik]
[;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ]]
[[, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag]
[[, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i]
[], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;]
[], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i]
[;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, []
[+, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *]
[*, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +]
[+, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *]
[;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, []
[*, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, []
[;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, []
[[, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ]]
[], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian]
[=, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ]]
[[, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ]]
[], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk]
[;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian]
[+, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }]
[*, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;]
[*, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;]
[+, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }]
[;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian]
[*, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag]
[;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian]
[[, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j]
[], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =]
[=, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ]]
[[, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation]
[[, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j]
[], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], []
[], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j]
[;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;]
[=, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j]
[[, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], []
[], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, []
[;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing]
[[, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, []
[[, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ]]
[], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir]
[], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int]
[[, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ]]
[], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }]
[=, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j]
[[, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (]
[[, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols]
[], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for]
[], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;]
[[, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j]
[], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0]
[;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j]
[[, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols]
[], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag]
[;, j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&]
[;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols]
[<, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing]
[;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols]
[), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {]
[), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {]
[), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0]
[&&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {]
[), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, )]
[==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <]
[[, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if]
[], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing]
[), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, )]
[), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0]
[), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =]
[==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j]
[), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =]
[=, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }]
[;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }, if, (]
[), {, work, [, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (]
[<, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {]
[), {, work, [, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (]
[=, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1]
[[, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =]
[], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -]
[;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;, j]
[), {, for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, ), {, int]
[>, 0, ), {, for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, )]
[), {, for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, ), {, int]
[;, j, >=, 0, ;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[-, 1, ;, j, >=, 0, ;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double]
[;, j, >=, 0, ;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[>=, 0, ;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;]
[;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;]
[;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=]
[;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work]
[+, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ]]
[;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;]
[<, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i]
[;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, []
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, []
[+=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =]
[;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag, [, j, ]]
[*, work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, )]
[[, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ]]
[[, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (, work]
[], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j]
[], *, work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum]
[;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag, [, j, ]]
[[, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag]
[], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag, [, j]
[=, (, work, [, j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int]
[[, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }]
[], =, (, work, [, j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (]
[;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {]
[/, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length]
[), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, .]
[-, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <]
[[, j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0]
[], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j]
[), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, .]
[;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {]
[[, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++]
[], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, )]
[;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work, [, j, ], ;, }, }]
[<, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work, [, j]
[;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work, [, j, ], ;, }, }]
[., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work, [, j, ], ;]
[), {, lmDir, [, permutation, [, j, ], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition]
[), {, lmDir, [, permutation, [, j, ], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition]
[=, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =]
[[, permutation, [, j, ], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian]
[], =, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian]
[[, j, ], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws]
[], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {]
[;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (, -]
[[, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =, jacobian, .]
[], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (]
[=, jacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length]
[;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;]
[., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, [, 0]
[., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final]
[), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, []
[), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, []
[;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k]
[., length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, permutation, [, k, ]]
[., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, permutation, []
[[, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, )]
[], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, permutation]
[;, k, <, nC, ;, ++, k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0]
[;, ++, k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int]
[<, nC, ;, ++, k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for]
[;, ++, k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int]
[), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0]
[), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0]
[=, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++]
[[, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;]
[;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, )]
[;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian]
[;, i, <, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;]
[;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *]
[<, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=]
[;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *]
[), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }]
[), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }]
[;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;]
[[, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (]
[[, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath]
[], [, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt]
[], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, )]
[+=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for]
[;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =]
[*, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int]
[;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =]
[=, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;]
[[, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k]
[], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <, nC]
[;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =]
[., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k]
[), ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn]
[;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, .]
[;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (]
[<, nC, ;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;]
[;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (]
[), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =]
[), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =]
[;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;, ++]
[;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;, ++]
[;, for, (, int, i, =, k, ;, i, <, nC, ;, ++, i, ), {, double, norm2, =, 0]
[., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;, ++, i, ), {, double, norm2]
[;, i, <, nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k]
[;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR]
[<, nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j]
[;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR]
[), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j]
[), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j]
[;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian]
[;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i]
[;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2]
[<, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ]]
[;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2]
[), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *]
[), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *]
[;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN]
[[, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (]
[[, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double]
[], [, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite]
[], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, .]
[[, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, )]
[], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double]
[+=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2]
[;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw]
[*, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), )]
[;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >]
[||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC]
[., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, .]
[), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >]
[., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2]
[;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if]
[,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =]
[., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;]
[,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;]
[), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }]
[), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank]
[>, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, )]
[), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank]
[=, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;]
[;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;]
[=, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int]
[;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =]
[), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn]
[<=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation]
[), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn]
[=, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation]
[;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k]
[;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk]
[[, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk]
[], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double]
[=, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ]]
[[, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian]
[], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k]
[;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double]
[[, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk]
[], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;]
[=, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >]
[[, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =]
[], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk]
[;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, )]
[;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, .]
[[, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, )]
[[, k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt]
[], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2]
[], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath]
[;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak]
[?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0]
[), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =]
[>, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double]
[), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =]
[:, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, )]
[:, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, )]
[., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2]
[), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha]
[;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak]
[., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta]
[), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =]
[;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], []
[/, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ]]
[;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], []
[), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ]]
[-, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;]
[), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ]]
[*, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, []
[), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ]]
[=, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;]
[[, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ]]
[], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha]
[;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (]
[=, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -]
[[, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk]
[], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC]
[;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -]
[-=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;, --, dk]
[[, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0]
[[, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;]
[], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >]
[], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;, --]
[;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;, --, dk, ), {]
[;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k]
[-, k, ;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j]
[-, 1, -, k, ;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (]
[-, k, ;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j]
[;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k]
[;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR]
[>, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j]
[;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR]
[), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j]
[), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j]
[;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, []
[;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian]
[;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], []
[<, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j]
[;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], []
[), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k]
[), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k]
[+=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ]]
[;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, )]
[*, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for]
[[, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=]
[[, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;]
[], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma]
[], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;]
[;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, )]
[[, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k]
[[, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int]
[], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =]
[], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j]
[[, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j]
[], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++]
[+, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR]
[], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++]
[*=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, []
[;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ]]
[;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ]]
[;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *]
[<, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=]
[;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *]
[), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j]
[), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j]
[-=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }, private]
[[, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }]
[[, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk]
[], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;]
[], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }]
[[, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }]
[], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;]
[+, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =]
[], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;]
[;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {, final]
[*, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy]
[;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {, final]
[[, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y]
[[, j, ], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double]
[], [, pk, ], ;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ]]
[], ;, }, }, }, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {]
[=, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {, final, int, nR, =, weightedJacobian, .]
[;, }, private, void, qTy, (, double, [, ], y, ), {, final, int, nR, =, weightedJacobian, ., length, ;]
[;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k]
[., length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, pk, =, permutation]
[., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, pk]
[[, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, )]
[], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int]
[;, k, <, nC, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =]
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (]
[<, nC, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;]
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (]
[), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =]
[), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =]
[;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, )]
[[, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;]
[], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i]
[;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, []
[;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y]
[;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;]
[<, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i]
[;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;]
[), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=]
[), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=]
[+=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk]
[;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;]
[*, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k]
[[, pk, ], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int]
[[, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;]
[], [, pk, ], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (]
[], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =]
[;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;]
[[, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i]
[], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR]
[*=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, )]
[;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ]]
[[, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y]
[], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i]
[;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ]]
[;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;]
[<, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk]
[;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;]
[), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }]
[), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }]
[-=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }, }]
[[, i, ], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }, }]
[], -=, gamma, *, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }, }]
[;, }, }, }, }]
[*, weightedJacobian, [, i, ], [, pk, ], ;, }, }, }, }]
[;, }, }, }, }]
[[, pk, ], ;, }, }, }, }]
[[, i, ], [, pk, ], ;, }, }, }, }]
[], [, pk, ], ;, }, }, }, }]
[], ;, }, }, }, }]
