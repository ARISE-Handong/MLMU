[math3, ., util, ., MathUtils, ;, public, class, Sum, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., MathUtils, ;, public, class, Sum, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[final, long, serialVersionUID, =, -, 8231831954703408316L, ;, private, long, n, ;, private, double, value, ;, public, Sum, (, ), {]
[serialVersionUID, =, -, 8231831954703408316L, ;, private, long, n, ;, private, double, value, ;, public, Sum, (, ), {, n, =]
[-, 8231831954703408316L, ;, private, long, n, ;, private, double, value, ;, public, Sum, (, ), {, n, =, 0, ;]
[;, private, long, n, ;, private, double, value, ;, public, Sum, (, ), {, n, =, 0, ;, value, =]
[), {, n, =, 0, ;, value, =, 0, ;, }, public, Sum, (, Sum, original, ), throws, NullArgumentException, {]
[n, =, 0, ;, value, =, 0, ;, }, public, Sum, (, Sum, original, ), throws, NullArgumentException, {, copy, (]
[0, ;, value, =, 0, ;, }, public, Sum, (, Sum, original, ), throws, NullArgumentException, {, copy, (, original, ,]
[{, copy, (, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {]
[(, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, value, +=]
[,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, value, +=, d, ;]
[,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, value, +=, d, ;]
[d, ), {, value, +=, d, ;, n, ++, ;, }, @, Override, public, double, getResult, (, ), {, return]
[}, @, Override, public, double, getResult, (, ), {, return, value, ;, }, public, long, getN, (, ), {, return]
[;, }, public, long, getN, (, ), {, return, n, ;, }, @, Override, public, void, clear, (, ), {]
[public, long, getN, (, ), {, return, n, ;, }, @, Override, public, void, clear, (, ), {, value, =]
[getN, (, ), {, return, n, ;, }, @, Override, public, void, clear, (, ), {, value, =, 0, ;]
[), {, return, n, ;, }, @, Override, public, void, clear, (, ), {, value, =, 0, ;, n, =]
[final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =]
[final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,]
[throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ,]
[sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ,, true, ), ), {]
[Double, ., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ,, true, ), ), {, sum, =]
[(, values, ,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =]
[,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;]
[,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;]
[,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, []
[i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, [, i, ], ;, }, }, return]
[final, double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =]
[final, double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (]
[final, int, length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,]
[length, ), throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,]
[throws, MathIllegalArgumentException, {, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,]
[{, double, sum, =, Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ,]
[Double, ., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ,, true, ), ), {]
[NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ,, true, ), ), {, sum, =]
[,, weights, ,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =]
[,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;]
[,, begin, ,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;]
[,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[,, length, ,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[,, true, ), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[), ), {, sum, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, []
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, [, i, ], *]
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, [, i, ], *]
[;, i, <, begin, +, length, ;, i, ++, ), {, sum, +=, values, [, i, ], *, weights, []
[;, i, ++, ), {, sum, +=, values, [, i, ], *, weights, [, i, ], ;, }, }, return]
[public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return]
[evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[[, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[,, 0, ,, values, ., length, ), ;, }, @, Override, public, Sum, copy, (, ), {, Sum, result, =]
[length, ), ;, }, @, Override, public, Sum, copy, (, ), {, Sum, result, =, new, Sum, (, ), ;]
[;, }, @, Override, public, Sum, copy, (, ), {, Sum, result, =, new, Sum, (, ), ;, copy, (]
[@, Override, public, Sum, copy, (, ), {, Sum, result, =, new, Sum, (, ), ;, copy, (, this, ,]
[copy, (, ), {, Sum, result, =, new, Sum, (, ), ;, copy, (, this, ,, result, ), ;, return]
[), ;, return, result, ;, }, public, static, void, copy, (, Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {]
[), ;, return, result, ;, }, public, static, void, copy, (, Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[static, void, copy, (, Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[static, void, copy, (, Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[Sum, source, ,, Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[Sum, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;]
[(, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., value, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., n, =, source, ., n, ;, dest, ., value, =]
