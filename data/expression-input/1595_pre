[,, StaticSymbolTable, <, Var, ,, ReferenceCollectingCallback, ., Reference, >, {, private, final, Map, <, Var, ,, ReferenceCollection, >, referenceMap, =]
[,, StaticSymbolTable, <, Var, ,, ReferenceCollectingCallback, ., Reference, >, {, private, final, Map, <, Var, ,, ReferenceCollection, >, referenceMap, =]
[Var, ,, ReferenceCollection, >, referenceMap, =, Maps, ., newHashMap, (, ), ;, private, final, Deque, <, BasicBlock, >, blockStack, =]
[;, private, final, Predicate, <, Var, >, varFilter, ;, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ), {, this, (]
[final, Predicate, <, Var, >, varFilter, ;, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ), {, this, (, compiler, ,]
[<, Var, >, varFilter, ;, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ), {, this, (, compiler, ,, behavior, ,]
[<, Var, >, varFilter, ;, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ), {, this, (, compiler, ,, behavior, ,]
[(, ), ), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {]
[(, ), ), ;, }, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {]
[}, ReferenceCollectingCallback, (, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =, compiler, ;]
[Behavior, behavior, ,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =, compiler, ;, this, ., behavior, =]
[,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =, compiler, ;, this, ., behavior, =, behavior, ;]
[,, Predicate, <, Var, >, varFilter, ), {, this, ., compiler, =, compiler, ;, this, ., behavior, =, behavior, ;]
[>, varFilter, ), {, this, ., compiler, =, compiler, ;, this, ., behavior, =, behavior, ;, this, ., varFilter, =]
[this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., varFilter, =, varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[varFilter, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[(, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[root, ), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[root, ), ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,]
[compiler, ,, scriptRoot, ,, this, ), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return]
[compiler, ,, scriptRoot, ,, this, ), ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return]
[{, return, referenceMap, ., keySet, (, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return]
[{, return, referenceMap, ., keySet, (, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return]
[var, ), {, return, var, ., scope, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, v, ), {, return]
[var, ), {, return, var, ., scope, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, v, ), {, return]
[var, ., scope, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, v, ), {, return, referenceMap, ., get, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, v, ;, if, (]
[n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, v, ;, if, (]
[n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, v, ;, if, (]
[n, ., isName, (, ), ), {, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (]
[), ), {, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {]
[{, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, v, =]
[{, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, v, =]
[{, Var, v, ;, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, v, =]
[(, "arguments", ), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {]
[), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =]
[), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =]
[), ), {, v, =, t, ., getScope, (, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =]
[(, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =, t, ., getScope, (, ), ., getVar, (]
[(, ), ., getArgumentsVar, (, ), ;, }, else, {, v, =, t, ., getScope, (, ), ., getVar, (]
[v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (]
[v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (]
[v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=]
[getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=, null, &&]
[getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=, null, &&]
[getVar, (, n, ., getString, (, ), ), ;, }, if, (, v, !=, null, &&, varFilter, ., apply, (]
[getString, (, ), ), ;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {]
[), ), ;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (]
[;, }, if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,]
[if, (, v, !=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,]
[!=, null, &&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (]
[&&, varFilter, ., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,]
[., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,]
[., apply, (, v, ), ), {, addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,]
[,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (]
[Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (]
[n, ,, t, ,, blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,]
[blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {]
[blockStack, ., peek, (, ), ), ), ;, }, }, if, (, isBlockBoundary, (, n, ,, parent, ), ), {]
[., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[., pop, (, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[NodeTraversal, t, ), {, Node, n, =, t, ., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =]
[NodeTraversal, t, ), {, Node, n, =, t, ., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =]
[NodeTraversal, t, ), {, Node, n, =, t, ., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =]
[=, t, ., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?]
[., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :]
[., getScope, (, ), ., getRootNode, (, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :]
[(, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;]
[(, ), ;, BasicBlock, parent, =, blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;]
[parent, =, blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;, blockStack, ., push, (]
[., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (]
[(, ), ?, null, :, blockStack, ., peek, (, ), ;, blockStack, ., push, (, new, BasicBlock, (, parent, ,]
[new, BasicBlock, (, parent, ,, n, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[new, BasicBlock, (, parent, ,, n, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;, if, (]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;, if, (]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, blockStack, ., pop, (, ), ;, if, (]
[{, blockStack, ., pop, (, ), ;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {]
[{, blockStack, ., pop, (, ), ;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {]
[(, ), ;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (]
[;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,]
[;, if, (, t, ., getScope, (, ), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,]
[), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;]
[), ., isGlobal, (, ), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;]
[), ), {, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (]
[{, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t, ,]
[{, compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), ), ;, behavior, ., afterExitScope, (, t, ,]
[(, ), ), ;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {]
[(, ), ), ;, behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {]
[behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (]
[afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (, t, ,]
[,, compiler, ., getGlobalVarReferences, (, ), ), ;, }, else, {, behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, isBlockBoundary, (]
[public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, isBlockBoundary, (, n, ,]
[NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, isBlockBoundary, (, n, ,, parent, ), ), {]
[NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, isBlockBoundary, (, n, ,, parent, ), ), {]
[n, ,, Node, parent, ), {, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., push, (]
[parent, ), {, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., push, (, new, BasicBlock, (]
[parent, ), {, if, (, isBlockBoundary, (, n, ,, parent, ), ), {, blockStack, ., push, (, new, BasicBlock, (]
[(, n, ,, parent, ), ), {, blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,]
[{, blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, ), ), ;, }, return]
[;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (]
[;, }, return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (]
[return, true, ;, }, private, static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (, parent, !=]
[static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (, parent, !=, null, ), {, switch, (]
[static, boolean, isBlockBoundary, (, Node, n, ,, Node, parent, ), {, if, (, parent, !=, null, ), {, switch, (]
[parent, ), {, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[parent, ), {, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case]
[parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case, Token, ., FOR, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., DO, :, case, Token, ., FOR, :, case]
[(, ), ), {, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case]
[(, ), ), {, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case]
[Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case]
[Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case]
[Token, ., FOR, :, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return]
[:, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case]
[:, case, Token, ., TRY, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case]
[:, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case]
[:, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case]
[:, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[:, case, Token, ., WITH, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return]
[Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return]
[AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return, n, !=]
[AND, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., OR, :, return, n, !=]
[., IF, :, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return]
[., IF, :, case, Token, ., OR, :, return, n, !=, parent, ., getFirstChild, (, ), ;, }, }, return]
[), ;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =]
[), ;, }, private, void, addReference, (, NodeTraversal, t, ,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =]
[void, addReference, (, NodeTraversal, t, ,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (]
[,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (, v, ), ;, if, (]
[,, Var, v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (, v, ), ;, if, (]
[v, ,, Reference, reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (, v, ), ;, if, (, referenceInfo, ==]
[reference, ), {, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (, v, ), ;, if, (, referenceInfo, ==, null, ), {]
[{, ReferenceCollection, referenceInfo, =, referenceMap, ., get, (, v, ), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =]
[., get, (, v, ), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;]
[., get, (, v, ), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;]
[), ;, if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (]
[if, (, referenceInfo, ==, null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,]
[null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }]
[null, ), {, referenceInfo, =, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }]
[=, new, ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (]
[ReferenceCollection, (, ), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (, reference, ,]
[), ;, referenceMap, ., put, (, v, ,, referenceInfo, ), ;, }, referenceInfo, ., add, (, reference, ,, t, ,]
[Map, <, Var, ,, ReferenceCollection, >, referenceMap, ;, public, ReferenceMapWrapper, (, Map, <, Var, ,, ReferenceCollection, >, referenceMap, ), {]
[Map, <, Var, ,, ReferenceCollection, >, referenceMap, ;, public, ReferenceMapWrapper, (, Map, <, Var, ,, ReferenceCollection, >, referenceMap, ), {]
[ReferenceCollection, >, referenceMap, ;, public, ReferenceMapWrapper, (, Map, <, Var, ,, ReferenceCollection, >, referenceMap, ), {, this, ., referenceMap, =]
[), {, this, ., referenceMap, =, referenceMap, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return]
[), {, this, ., referenceMap, =, referenceMap, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return]
[referenceMap, =, referenceMap, ;, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, return, referenceMap, ., get, (]
[}, }, interface, Behavior, {, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), ;, }, static, Behavior, DO_NOTHING_BEHAVIOR, =]
[), {, }, }, ;, static, class, ReferenceCollection, implements, Iterable, <, Reference, >, {, List, <, Reference, >, references, =]
[), {, }, }, ;, static, class, ReferenceCollection, implements, Iterable, <, Reference, >, {, List, <, Reference, >, references, =]
[references, =, Lists, ., newArrayList, (, ), ;, @, Override, public, Iterator, <, Reference, >, iterator, (, ), {, return]
[references, =, Lists, ., newArrayList, (, ), ;, @, Override, public, Iterator, <, Reference, >, iterator, (, ), {, return]
[references, ., iterator, (, ), ;, }, void, add, (, Reference, reference, ,, NodeTraversal, t, ,, Var, v, ), {]
[references, ., iterator, (, ), ;, }, void, add, (, Reference, reference, ,, NodeTraversal, t, ,, Var, v, ), {]
[), ;, }, void, add, (, Reference, reference, ,, NodeTraversal, t, ,, Var, v, ), {, references, ., add, (]
[v, ), {, references, ., add, (, reference, ), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =]
[v, ), {, references, ., add, (, reference, ), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =]
[), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[), ;, }, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[}, protected, boolean, isWellDefined, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, ==]
[(, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, ==, 0, ), {, return]
[references, ., size, (, ), ;, if, (, size, ==, 0, ), {, return, false, ;, }, Reference, init, =]
[if, (, size, ==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (]
[if, (, size, ==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (]
[size, ==, 0, ), {, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==]
[{, return, false, ;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return]
[;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }]
[;, }, Reference, init, =, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }]
[=, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[=, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[=, getInitializingReference, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[;, if, (, init, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, references, ., get, (]
[}, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =]
[}, Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =]
[., isDeclaration, (, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =]
[(, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;]
[(, ), ), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;]
[), ;, BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;]
[BasicBlock, initBlock, =, init, ., getBasicBlock, (, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;]
[(, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (]
[), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !]
[), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !]
[int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (]
[int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (]
[int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (]
[;, i, <, size, ;, i, ++, ), {, if, (, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (]
[(, !, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, ), ), ), {, return]
[(, references, ., get, (, i, ), ., getBasicBlock, (, ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =]
[}, return, true, ;, }, boolean, isEscaped, (, ), {, Scope, scope, =, null, ;, for, (, Reference, ref, :]
[boolean, isEscaped, (, ), {, Scope, scope, =, null, ;, for, (, Reference, ref, :, references, ), {, if, (]
[boolean, isEscaped, (, ), {, Scope, scope, =, null, ;, for, (, Reference, ref, :, references, ), {, if, (]
[(, ), {, Scope, scope, =, null, ;, for, (, Reference, ref, :, references, ), {, if, (, scope, ==]
[Scope, scope, =, null, ;, for, (, Reference, ref, :, references, ), {, if, (, scope, ==, null, ), {]
[=, null, ;, for, (, Reference, ref, :, references, ), {, if, (, scope, ==, null, ), {, scope, =]
[=, null, ;, for, (, Reference, ref, :, references, ), {, if, (, scope, ==, null, ), {, scope, =]
[references, ), {, if, (, scope, ==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (]
[references, ), {, if, (, scope, ==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (]
[{, if, (, scope, ==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=]
[{, if, (, scope, ==, null, ), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=]
[), {, scope, =, ref, ., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return]
[., scope, ;, }, else, if, (, scope, !=, ref, ., scope, ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =]
[return, true, ;, }, }, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =]
[}, return, false, ;, }, private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =, references, ., get, (]
[private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (]
[private, boolean, isInitializingDeclarationAt, (, int, index, ), {, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (]
[Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, ., isInitializingDeclaration, (, ), ), {, return]
[., get, (, index, ), ;, if, (, maybeInit, ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (]
[), {, return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (]
[return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <]
[return, true, ;, }, return, false, ;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <]
[;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <, references, ., size, (, ), &&]
[;, }, private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <, references, ., size, (, ), &&]
[private, boolean, isInitializingAssignmentAt, (, int, index, ), {, if, (, index, <, references, ., size, (, ), &&, index, >]
[), {, if, (, index, <, references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =]
[), {, if, (, index, <, references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =]
[index, <, references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (]
[index, <, references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (]
[references, ., size, (, ), &&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -]
[&&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (]
[&&, index, >, 0, ), {, Reference, maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (]
[maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {]
[maybeDecl, =, references, ., get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {]
[get, (, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (]
[(, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !]
[(, index, -, 1, ), ;, if, (, maybeDecl, ., isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !]
[isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =]
[isVarDeclaration, (, ), ), {, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =]
[{, Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get, (]
[!, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (]
[!, maybeDecl, ., isInitializingDeclaration, (, ), ), ;, Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (]
[Reference, maybeInit, =, references, ., get, (, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {, return]
[(, index, ), ;, if, (, maybeInit, ., isSimpleAssignmentToName, (, ), ), {, return, true, ;, }, }, }, return]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (]
[{, return, true, ;, }, }, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (]
[}, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (, 0, ), ), {, return]
[}, }, return, false, ;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (, 0, ), ), {, return]
[;, }, Reference, getInitializingReference, (, ), {, if, (, isInitializingDeclarationAt, (, 0, ), ), {, return, references, ., get, (]
[if, (, isInitializingDeclarationAt, (, 0, ), ), {, return, references, ., get, (, 0, ), ;, }, else, if, (]
[isInitializingDeclarationAt, (, 0, ), ), {, return, references, ., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (]
[{, return, references, ., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return]
[{, return, references, ., get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return]
[get, (, 0, ), ;, }, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return, references, ., get, (]
[}, else, if, (, isInitializingAssignmentAt, (, 1, ), ), {, return, references, ., get, (, 1, ), ;, }, return]
[references, ., get, (, 1, ), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =]
[references, ., get, (, 1, ), ;, }, return, null, ;, }, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =]
[}, Reference, getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =]
[getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[getInitializingReferenceForConstants, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (]
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||]
[=, 0, ;, i, <, size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (]
[size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return]
[size, ;, i, ++, ), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return]
[), {, if, (, isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get, (]
[i, ), ||, isInitializingAssignmentAt, (, i, ), ), {, return, references, ., get, (, i, ), ;, }, }, return]
[., get, (, i, ), ;, }, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =]
[}, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if, (]
[}, }, return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if, (]
[return, null, ;, }, boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if, (, ref, ==]
[boolean, isAssignedOnceInLifetime, (, ), {, Reference, ref, =, getOneAndOnlyAssignment, (, ), ;, if, (, ref, ==, null, ), {, return]
[getOneAndOnlyAssignment, (, ), ;, if, (, ref, ==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =]
[getOneAndOnlyAssignment, (, ), ;, if, (, ref, ==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =]
[ref, ==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;]
[ref, ==, null, ), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;]
[null, ), {, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=]
[{, return, false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null, ;]
[false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null, ;, block, =]
[false, ;, }, for, (, BasicBlock, block, =, ref, ., getBasicBlock, (, ), ;, block, !=, null, ;, block, =]
[., getBasicBlock, (, ), ;, block, !=, null, ;, block, =, block, ., getParent, (, ), ), {, if, (]
[., getBasicBlock, (, ), ;, block, !=, null, ;, block, =, block, ., getParent, (, ), ), {, if, (]
[block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }, else, if, (]
[block, ., getParent, (, ), ), {, if, (, block, ., isFunction, ), {, break, ;, }, else, if, (]
[{, if, (, block, ., isFunction, ), {, break, ;, }, else, if, (, block, ., isLoop, ), {, return]
[isFunction, ), {, break, ;, }, else, if, (, block, ., isLoop, ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =]
[}, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =, null, ;, int, size, =]
[}, }, return, true, ;, }, private, Reference, getOneAndOnlyAssignment, (, ), {, Reference, assignment, =, null, ;, int, size, =]
[{, Reference, assignment, =, null, ;, int, size, =, references, ., size, (, ), ;, for, (, int, i, =]
[assignment, =, null, ;, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[assignment, =, null, ;, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[null, ;, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =]
[), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =]
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[i, ), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (]
[i, ), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (]
[;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==]
[ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {]
[isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {, assignment, =]
[isInitializingDeclaration, (, ), ), {, if, (, assignment, ==, null, ), {, assignment, =, ref, ;, }, else, {, return]
[(, assignment, ==, null, ), {, assignment, =, ref, ;, }, else, {, return, null, ;, }, }, }, return]
[else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean, isNeverAssigned, (, ), {, int, size, =]
[else, {, return, null, ;, }, }, }, return, assignment, ;, }, boolean, isNeverAssigned, (, ), {, int, size, =]
[}, boolean, isNeverAssigned, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =]
[isNeverAssigned, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[isNeverAssigned, (, ), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[int, size, =, references, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =]
[), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =]
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[i, <, size, ;, i, ++, ), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[), {, Reference, ref, =, references, ., get, (, i, ), ;, if, (, ref, ., isLvalue, (, ), ||]
[(, i, ), ;, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, return]
[(, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =]
[), ), {, return, false, ;, }, }, return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =]
[return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[return, true, ;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (]
[;, }, boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, >]
[boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, >, 0, &&]
[boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, >, 0, &&]
[boolean, firstReferenceIsAssigningDeclaration, (, ), {, int, size, =, references, ., size, (, ), ;, if, (, size, >, 0, &&]
[{, int, size, =, references, ., size, (, ), ;, if, (, size, >, 0, &&, references, ., get, (]
[;, if, (, size, >, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return]
[>, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, ), ), {, return, true, ;, }, return]
[}, static, final, class, Reference, implements, StaticReference, <, JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =]
[}, static, final, class, Reference, implements, StaticReference, <, JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =]
[Reference, implements, StaticReference, <, JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (]
[Reference, implements, StaticReference, <, JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (]
[JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (, Token, ., VAR, ,]
[JSType, >, {, private, static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (, Token, ., VAR, ,]
[static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (, Token, ., VAR, ,, Token, ., FUNCTION, ,]
[static, final, Set, <, Integer, >, DECLARATION_PARENTS, =, ImmutableSet, ., of, (, Token, ., VAR, ,, Token, ., FUNCTION, ,]
[;, private, final, StaticSourceFile, sourceFile, ;, Reference, (, Node, nameNode, ,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (]
[final, StaticSourceFile, sourceFile, ;, Reference, (, Node, nameNode, ,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,]
[sourceFile, ;, Reference, (, Node, nameNode, ,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,, basicBlock, ,]
[sourceFile, ;, Reference, (, Node, nameNode, ,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,, basicBlock, ,]
[,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,, basicBlock, ,, t, ., getScope, (, ), ,]
[,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,, basicBlock, ,, t, ., getScope, (, ), ,]
[,, NodeTraversal, t, ,, BasicBlock, basicBlock, ), {, this, (, nameNode, ,, basicBlock, ,, t, ., getScope, (, ), ,]
[(, ), ), ;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, ), {, return]
[;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference, (]
[;, }, static, Reference, newBleedingFunction, (, NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference, (]
[NodeTraversal, t, ,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,]
[,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,]
[,, BasicBlock, basicBlock, ,, Node, func, ), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,]
[), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,, t, ., getScope, (, ), ,]
[), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,, t, ., getScope, (, ), ,]
[), {, return, new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,, t, ., getScope, (, ), ,]
[(, ), ., getInputId, (, ), ), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return]
[getInputId, (, ), ), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (]
[), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (]
[), ;, }, @, VisibleForTesting, static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (]
[static, Reference, createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (, Token, ., NAME, ), ,]
[createRefForTest, (, CompilerInput, input, ), {, return, new, Reference, (, new, Node, (, Token, ., NAME, ), ,, null, ,]
[CompilerInput, input, ), {, return, new, Reference, (, new, Node, (, Token, ., NAME, ), ,, null, ,, null, ,]
[CompilerInput, input, ), {, return, new, Reference, (, new, Node, (, Token, ., NAME, ), ,, null, ,, null, ,]
[), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {]
[), ), ;, }, private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {]
[private, Reference, (, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =]
[(, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;]
[(, Node, nameNode, ,, BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;]
[BasicBlock, basicBlock, ,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =]
[,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;]
[,, Scope, scope, ,, InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;]
[InputId, inputId, ), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =]
[), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;]
[), {, this, ., nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;]
[nameNode, =, nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =]
[nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;]
[nameNode, ;, this, ., basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;]
[basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =]
[basicBlock, =, basicBlock, ;, this, ., scope, =, scope, ;, this, ., inputId, =, inputId, ;, this, ., sourceFile, =]
[;, this, ., sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return]
[sourceFile, =, nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (]
[nameNode, ., getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode, ,]
[getStaticSourceFile, (, ), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode, ,, basicBlock, ,]
[), ;, }, Reference, cloneWithNewScope, (, Scope, newScope, ), {, return, new, Reference, (, nameNode, ,, basicBlock, ,, newScope, ,]
[(, nameNode, ,, basicBlock, ,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return]
[(, nameNode, ,, basicBlock, ,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return]
[,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (]
[,, newScope, ,, inputId, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, scope, ., getVar, (]
[., getVar, (, nameNode, ., getString, (, ), ), ;, }, @, Override, public, Node, getNode, (, ), {, return]
[}, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, public, InputId, getInputId, (, ), {, return]
[}, public, InputId, getInputId, (, ), {, return, inputId, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return]
[@, Override, public, StaticSourceFile, getSourceFile, (, ), {, return, sourceFile, ;, }, boolean, isDeclaration, (, ), {, Node, parent, =]
[{, return, sourceFile, ;, }, boolean, isDeclaration, (, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =]
[{, return, sourceFile, ;, }, boolean, isDeclaration, (, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =]
[(, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, return]
[parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (]
[parent, =, getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (]
[grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||]
[grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||]
[grandparent, =, parent, ., getParent, (, ), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||]
[), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList, (, ), &&]
[), ;, return, DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList, (, ), &&]
[||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return]
[||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, ), ;, }, boolean, isVarDeclaration, (, ), {, return]
[isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (, ), {, return]
[isVarDeclaration, (, ), {, return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (, ), {, return]
[return, getParent, (, ), ., isVar, (, ), ;, }, boolean, isHoistedFunction, (, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (]
[(, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return]
[(, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return]
[(, ), {, return, NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return]
[NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&]
[., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !]
[., isHoistedFunctionDeclaration, (, getParent, (, ), ), ;, }, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !]
[}, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, ), ||]
[}, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, ), ||]
[}, boolean, isInitializingDeclaration, (, ), {, return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, ), ||]
[return, isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, ), ||, nameNode, ., getFirstChild, (, ), !=]
[(, ), ||, nameNode, ., getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =]
[getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[getFirstChild, (, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[(, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (]
[(, ), !=, null, ;, }, Node, getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (]
[getAssignedValue, (, ), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (, ), ), ?]
[), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (, ), ), ?, parent, :]
[), {, Node, parent, =, getParent, (, ), ;, return, (, parent, ., isFunction, (, ), ), ?, parent, :]
[=, getParent, (, ), ;, return, (, parent, ., isFunction, (, ), ), ?, parent, :, NodeUtil, ., getAssignedValue, (]
[(, ), ), ?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return]
[(, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, ), {, return]
[(, nameNode, ), ;, }, BasicBlock, getBasicBlock, (, ), {, return, basicBlock, ;, }, Node, getParent, (, ), {, return]
[), {, return, getNode, (, ), ., getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =]
[), ., getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[), ., getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[), ., getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[getParent, (, ), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ==]
[), ;, }, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ==, null, ?]
[}, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ==, null, ?, null, :]
[}, Node, getGrandparent, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ==, null, ?, null, :]
[:, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =]
[:, parent, ., getParent, (, ), ;, }, private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =]
[private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[private, static, boolean, isLhsOfForInExpression, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[{, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), ), {, return]
[parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (]
[(, ), ;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return]
[(, ), ;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return]
[(, ), ;, if, (, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return]
[(, parent, ., isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (]
[isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&]
[isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&]
[isVar, (, ), ), {, return, isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&]
[isLhsOfForInExpression, (, parent, ), ;, }, return, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =]
[getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[getFirstChild, (, ), ==, n, ;, }, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return]
[}, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, ), &&]
[}, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, ), &&]
[}, boolean, isSimpleAssignmentToName, (, ), {, Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, ), &&]
[Node, parent, =, getParent, (, ), ;, return, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[(, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =]
[), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =]
[), ==, nameNode, ;, }, boolean, isLvalue, (, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =]
[(, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return]
[(, ), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return]
[), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (]
[), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (]
[), {, Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (]
[Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==]
[Node, parent, =, getParent, (, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==]
[(, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&]
[(, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&]
[(, ), ;, int, parentType, =, parent, ., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&]
[parent, ., getType, (, ), ;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=]
[(, ), ;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||]
[(, ), ;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||]
[;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==]
[;, return, (, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==]
[==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||]
[==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||]
[., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==]
[., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==]
[., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||]
[getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (]
[getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (]
[getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (]
[null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (]
[parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (]
[., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, ), ;, }, Scope, getScope, (, ), {, return]
[;, private, final, boolean, isFunction, ;, private, final, boolean, isLoop, ;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {]
[;, private, final, boolean, isFunction, ;, private, final, boolean, isLoop, ;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {]
[isFunction, ;, private, final, boolean, isLoop, ;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {, this, ., parent, =]
[private, final, boolean, isLoop, ;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {, this, ., parent, =, parent, ;]
[private, final, boolean, isLoop, ;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {, this, ., parent, =, parent, ;]
[;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {, this, ., parent, =, parent, ;, this, ., isHoisted, =]
[;, BasicBlock, (, BasicBlock, parent, ,, Node, root, ), {, this, ., parent, =, parent, ;, this, ., isHoisted, =]
[parent, ,, Node, root, ), {, this, ., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (]
[root, ), {, this, ., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;]
[root, ), {, this, ., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;]
[., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =]
[., parent, =, parent, ;, this, ., isHoisted, =, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =]
[=, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (]
[=, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (]
[=, NodeUtil, ., isHoistedFunctionDeclaration, (, root, ), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (]
[), ;, this, ., isFunction, =, root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=]
[root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType, =]
[root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType, =]
[root, ., isFunction, (, ), ;, if, (, root, ., getParent, (, ), !=, null, ), {, int, pType, =]
[getParent, (, ), !=, null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;]
[getParent, (, ), !=, null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;]
[null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =]
[null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =]
[null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =]
[null, ), {, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =]
[{, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==]
[{, int, pType, =, root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==]
[root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||]
[root, ., getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||]
[getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==]
[getParent, (, ), ., getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==]
[getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||]
[getType, (, ), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||]
[), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==]
[), ;, this, ., isLoop, =, pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==]
[==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {]
[==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {]
[||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR, ;, }, else, {, this, ., isLoop, =]
[., FOR, ;, }, else, {, this, ., isLoop, =, false, ;, }, }, BasicBlock, getParent, (, ), {, return]
[=, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, ), {, return]
[=, false, ;, }, }, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, ), {, return]
[}, BasicBlock, getParent, (, ), {, return, parent, ;, }, boolean, isGlobalScopeBlock, (, ), {, return, getParent, (, ), ==]
[return, getParent, (, ), ==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (]
[(, ), ==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =]
[==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;]
[==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;]
[==, null, ;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;]
[;, }, boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=]
[boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&]
[boolean, provablyExecutesBefore, (, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&]
[(, BasicBlock, thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&, currentBlock, !=]
[thatBlock, ), {, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&, currentBlock, !=, this, ;]
[{, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =]
[{, BasicBlock, currentBlock, ;, for, (, currentBlock, =, thatBlock, ;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =]
[;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (]
[;, currentBlock, !=, null, &&, currentBlock, !=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (]
[!=, this, ;, currentBlock, =, currentBlock, ., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return]
[., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (]
[., getParent, (, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (]
[(, ), ), {, if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (, currentBlock, ==]
[if, (, currentBlock, ., isHoisted, ), {, return, false, ;, }, }, if, (, currentBlock, ==, this, ), {, return]
[), {, return, false, ;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (]
[), {, return, false, ;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (]
[;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&]
[;, }, }, if, (, currentBlock, ==, this, ), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&]
[), {, return, true, ;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return]
[;, }, if, (, isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, ), ), {, return, true, ;, }, return]
