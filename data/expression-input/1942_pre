[., util, ., Map, ;, import, java, ., util, ., Set, ;, class, FunctionArgumentInjector, {, static, final, String, THIS_MARKER, =]
[(, AbstractCompiler, compiler, ,, Node, node, ,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ), {, return]
[compiler, ,, Node, node, ,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ), {, return, inject, (]
[Node, node, ,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ), {, return, inject, (, compiler, ,]
[,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ), {, return, inject, (, compiler, ,, node, ,]
[parent, ,, Map, <, String, ,, Node, >, replacements, ), {, return, inject, (, compiler, ,, node, ,, parent, ,]
[Map, <, String, ,, Node, >, replacements, ), {, return, inject, (, compiler, ,, node, ,, parent, ,, replacements, ,]
[Node, node, ,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ,, boolean, replaceThis, ), {, if, (]
[Node, node, ,, Node, parent, ,, Map, <, String, ,, Node, >, replacements, ,, boolean, replaceThis, ), {, if, (]
[Node, >, replacements, ,, boolean, replaceThis, ), {, if, (, node, ., isName, (, ), ), {, Node, replacementTemplate, =]
[Node, >, replacements, ,, boolean, replaceThis, ), {, if, (, node, ., isName, (, ), ), {, Node, replacementTemplate, =]
[boolean, replaceThis, ), {, if, (, node, ., isName, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (]
[boolean, replaceThis, ), {, if, (, node, ., isName, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (]
[(, ), ), {, Node, replacementTemplate, =, replacements, ., get, (, node, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Node, replacementTemplate, =, replacements, ., get, (, node, ., getString, (, ), ), ;, if, (]
[), {, Node, replacementTemplate, =, replacements, ., get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=]
[replacementTemplate, =, replacements, ., get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {]
[replacementTemplate, =, replacements, ., get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {]
[get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (]
[get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (]
[get, (, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (]
[(, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (, !]
[(, node, ., getString, (, ), ), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (, !]
[), ;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||]
[;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||, !]
[;, if, (, replacementTemplate, !=, null, ), {, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||, !]
[), {, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||, !, parent, ., isVar, (, ), ||]
[{, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||, !, parent, ., isVar, (, ), ||, !]
[{, Preconditions, ., checkState, (, !, parent, ., isFunction, (, ), ||, !, parent, ., isVar, (, ), ||, !]
[), ||, !, parent, ., isVar, (, ), ||, !, parent, ., isCatch, (, ), ), ;, Node, replacement, =]
[), ||, !, parent, ., isVar, (, ), ||, !, parent, ., isCatch, (, ), ), ;, Node, replacement, =]
[(, ), ||, !, parent, ., isCatch, (, ), ), ;, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;]
[(, ), ||, !, parent, ., isCatch, (, ), ), ;, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;]
[parent, ., isCatch, (, ), ), ;, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (]
[isCatch, (, ), ), ;, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,]
[;, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, return]
[(, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, return, replacement, ;, }, }, else, if, (]
[(, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, return, replacement, ;, }, }, else, if, (]
[;, parent, ., replaceChild, (, node, ,, replacement, ), ;, return, replacement, ;, }, }, else, if, (, replaceThis, &&]
[;, parent, ., replaceChild, (, node, ,, replacement, ), ;, return, replacement, ;, }, }, else, if, (, replaceThis, &&]
[return, replacement, ;, }, }, else, if, (, replaceThis, &&, node, ., isThis, (, ), ), {, Node, replacementTemplate, =]
[return, replacement, ;, }, }, else, if, (, replaceThis, &&, node, ., isThis, (, ), ), {, Node, replacementTemplate, =]
[}, else, if, (, replaceThis, &&, node, ., isThis, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (]
[(, replaceThis, &&, node, ., isThis, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;]
[(, replaceThis, &&, node, ., isThis, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;]
[., isThis, (, ), ), {, Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;, Preconditions, ., checkNotNull, (]
[{, Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;, Preconditions, ., checkNotNull, (, replacementTemplate, ), ;, if, (]
[Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;, Preconditions, ., checkNotNull, (, replacementTemplate, ), ;, if, (, !]
[Node, replacementTemplate, =, replacements, ., get, (, THIS_MARKER, ), ;, Preconditions, ., checkNotNull, (, replacementTemplate, ), ;, if, (, !]
[Preconditions, ., checkNotNull, (, replacementTemplate, ), ;, if, (, !, replacementTemplate, ., isThis, (, ), ), {, Node, replacement, =]
[Preconditions, ., checkNotNull, (, replacementTemplate, ), ;, if, (, !, replacementTemplate, ., isThis, (, ), ), {, Node, replacement, =]
[;, if, (, !, replacementTemplate, ., isThis, (, ), ), {, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;]
[;, if, (, !, replacementTemplate, ., isThis, (, ), ), {, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;]
[replacementTemplate, ., isThis, (, ), ), {, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (]
[isThis, (, ), ), {, Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,]
[Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, if, (]
[Node, replacement, =, replacementTemplate, ., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, if, (]
[., cloneTree, (, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, if, (, NodeUtil, ., mayHaveSideEffects, (]
[(, ), ;, parent, ., replaceChild, (, node, ,, replacement, ), ;, if, (, NodeUtil, ., mayHaveSideEffects, (, replacementTemplate, ,]
[., replaceChild, (, node, ,, replacement, ), ;, if, (, NodeUtil, ., mayHaveSideEffects, (, replacementTemplate, ,, compiler, ), ), {]
[., replaceChild, (, node, ,, replacement, ), ;, if, (, NodeUtil, ., mayHaveSideEffects, (, replacementTemplate, ,, compiler, ), ), {]
[,, replacement, ), ;, if, (, NodeUtil, ., mayHaveSideEffects, (, replacementTemplate, ,, compiler, ), ), {, replacements, ., remove, (]
[(, NodeUtil, ., mayHaveSideEffects, (, replacementTemplate, ,, compiler, ), ), {, replacements, ., remove, (, THIS_MARKER, ), ;, }, return]
[compiler, ), ), {, replacements, ., remove, (, THIS_MARKER, ), ;, }, return, replacement, ;, }, }, else, if, (]
[compiler, ), ), {, replacements, ., remove, (, THIS_MARKER, ), ;, }, return, replacement, ;, }, }, else, if, (]
[(, THIS_MARKER, ), ;, }, return, replacement, ;, }, }, else, if, (, node, ., isFunction, (, ), ), {]
[), ;, }, return, replacement, ;, }, }, else, if, (, node, ., isFunction, (, ), ), {, replaceThis, =]
[else, if, (, node, ., isFunction, (, ), ), {, replaceThis, =, false, ;, }, for, (, Node, c, =]
[else, if, (, node, ., isFunction, (, ), ), {, replaceThis, =, false, ;, }, for, (, Node, c, =]
[(, ), ), {, replaceThis, =, false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;]
[(, ), ), {, replaceThis, =, false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;]
[), {, replaceThis, =, false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=]
[replaceThis, =, false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;]
[false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[false, ;, }, for, (, Node, c, =, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, node, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, inject, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, inject, (, compiler, ,]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, c, =, inject, (, compiler, ,, c, ,]
[;, c, =, c, ., getNext, (, ), ), {, c, =, inject, (, compiler, ,, c, ,, node, ,]
[=, c, ., getNext, (, ), ), {, c, =, inject, (, compiler, ,, c, ,, node, ,, replacements, ,]
[), ), {, c, =, inject, (, compiler, ,, c, ,, node, ,, replacements, ,, replaceThis, ), ;, }, return]
[fnNode, ,, Node, callNode, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, LinkedHashMap, <, String, ,, Node, >, argMap, =]
[fnNode, ,, Node, callNode, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, LinkedHashMap, <, String, ,, Node, >, argMap, =]
[safeNameIdSupplier, ), {, LinkedHashMap, <, String, ,, Node, >, argMap, =, Maps, ., newLinkedHashMap, (, ), ;, Node, cArg, =]
[safeNameIdSupplier, ), {, LinkedHashMap, <, String, ,, Node, >, argMap, =, Maps, ., newLinkedHashMap, (, ), ;, Node, cArg, =]
[safeNameIdSupplier, ), {, LinkedHashMap, <, String, ,, Node, >, argMap, =, Maps, ., newLinkedHashMap, (, ), ;, Node, cArg, =]
[., newLinkedHashMap, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[., newLinkedHashMap, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[., newLinkedHashMap, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[(, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, cArg, !=]
[;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, cArg, !=, null, &&]
[;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, cArg, !=, null, &&]
[callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, cArg, !=, null, &&, NodeUtil, ., isFunctionObjectCall, (]
[), ., getNext, (, ), ;, if, (, cArg, !=, null, &&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {]
[), ., getNext, (, ), ;, if, (, cArg, !=, null, &&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {]
[), ;, if, (, cArg, !=, null, &&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, argMap, ., put, (]
[if, (, cArg, !=, null, &&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, argMap, ., put, (, THIS_MARKER, ,]
[!=, null, &&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, argMap, ., put, (, THIS_MARKER, ,, cArg, ), ;]
[&&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, argMap, ., put, (, THIS_MARKER, ,, cArg, ), ;, cArg, =]
[&&, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, argMap, ., put, (, THIS_MARKER, ,, cArg, ), ;, cArg, =]
[argMap, ., put, (, THIS_MARKER, ,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {]
[argMap, ., put, (, THIS_MARKER, ,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {]
[THIS_MARKER, ,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !]
[,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !]
[cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (]
[getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;]
[getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;]
[}, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, argMap, ., put, (]
[{, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, argMap, ., put, (, THIS_MARKER, ,]
[{, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, argMap, ., put, (, THIS_MARKER, ,]
[(, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, argMap, ., put, (, THIS_MARKER, ,, NodeUtil, ., newUndefinedNode, (]
[argMap, ., put, (, THIS_MARKER, ,, NodeUtil, ., newUndefinedNode, (, callNode, ), ), ;, }, for, (, Node, fnArg, :]
[argMap, ., put, (, THIS_MARKER, ,, NodeUtil, ., newUndefinedNode, (, callNode, ), ), ;, }, for, (, Node, fnArg, :]
[argMap, ., put, (, THIS_MARKER, ,, NodeUtil, ., newUndefinedNode, (, callNode, ), ), ;, }, for, (, Node, fnArg, :]
[THIS_MARKER, ,, NodeUtil, ., newUndefinedNode, (, callNode, ), ), ;, }, for, (, Node, fnArg, :, NodeUtil, ., getFunctionParameters, (]
[}, for, (, Node, fnArg, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, if, (]
[}, for, (, Node, fnArg, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, if, (]
[(, Node, fnArg, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, if, (, cArg, !=]
[:, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, if, (, cArg, !=, null, ), {]
[:, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, if, (, cArg, !=, null, ), {]
[(, fnNode, ), ., children, (, ), ), {, if, (, cArg, !=, null, ), {, argMap, ., put, (]
[(, fnNode, ), ., children, (, ), ), {, if, (, cArg, !=, null, ), {, argMap, ., put, (]
[), ), {, if, (, cArg, !=, null, ), {, argMap, ., put, (, fnArg, ., getString, (, ), ,]
[if, (, cArg, !=, null, ), {, argMap, ., put, (, fnArg, ., getString, (, ), ,, cArg, ), ;]
[cArg, !=, null, ), {, argMap, ., put, (, fnArg, ., getString, (, ), ,, cArg, ), ;, cArg, =]
[cArg, !=, null, ), {, argMap, ., put, (, fnArg, ., getString, (, ), ,, cArg, ), ;, cArg, =]
[(, ), ,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Node, srcLocation, =]
[,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Node, srcLocation, =, callNode, ;]
[,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Node, srcLocation, =, callNode, ;]
[cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Node, srcLocation, =, callNode, ;, argMap, ., put, (]
[cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Node, srcLocation, =, callNode, ;, argMap, ., put, (]
[), ;, }, else, {, Node, srcLocation, =, callNode, ;, argMap, ., put, (, fnArg, ., getString, (, ), ,]
[), ;, }, else, {, Node, srcLocation, =, callNode, ;, argMap, ., put, (, fnArg, ., getString, (, ), ,]
[{, Node, srcLocation, =, callNode, ;, argMap, ., put, (, fnArg, ., getString, (, ), ,, NodeUtil, ., newUndefinedNode, (]
[(, fnArg, ., getString, (, ), ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, }, int, anonArg, =]
[(, ), ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, }, int, anonArg, =, 0, ;, while, (]
[(, ), ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, }, int, anonArg, =, 0, ;, while, (]
[,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, }, int, anonArg, =, 0, ;, while, (, cArg, !=]
[), ), ;, }, }, int, anonArg, =, 0, ;, while, (, cArg, !=, null, ), {, String, uniquePlaceholder, =]
[;, }, }, int, anonArg, =, 0, ;, while, (, cArg, !=, null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (]
[int, anonArg, =, 0, ;, while, (, cArg, !=, null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;]
[int, anonArg, =, 0, ;, while, (, cArg, !=, null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;]
[;, while, (, cArg, !=, null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;, argMap, ., put, (]
[(, cArg, !=, null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;, argMap, ., put, (, uniquePlaceholder, ,]
[null, ), {, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;, argMap, ., put, (, uniquePlaceholder, ,, cArg, ), ;]
[{, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;, argMap, ., put, (, uniquePlaceholder, ,, cArg, ), ;, cArg, =]
[{, String, uniquePlaceholder, =, getUniqueAnonymousParameterName, (, safeNameIdSupplier, ), ;, argMap, ., put, (, uniquePlaceholder, ,, cArg, ), ;, cArg, =]
[;, argMap, ., put, (, uniquePlaceholder, ,, cArg, ), ;, cArg, =, cArg, ., getNext, (, ), ;, }, return]
[), ;, }, return, argMap, ;, }, private, static, String, getUniqueAnonymousParameterName, (, Supplier, <, String, >, safeNameIdSupplier, ), {, return]
[), ;, }, return, argMap, ;, }, private, static, String, getUniqueAnonymousParameterName, (, Supplier, <, String, >, safeNameIdSupplier, ), {, return]
[}, return, argMap, ;, }, private, static, String, getUniqueAnonymousParameterName, (, Supplier, <, String, >, safeNameIdSupplier, ), {, return, "JSCompiler_inline_anon_param_", +]
[}, return, argMap, ;, }, private, static, String, getUniqueAnonymousParameterName, (, Supplier, <, String, >, safeNameIdSupplier, ), {, return, "JSCompiler_inline_anon_param_", +]
[), ;, }, static, Set, <, String, >, findModifiedParameters, (, Node, fnNode, ), {, Set, <, String, >, names, =]
[}, static, Set, <, String, >, findModifiedParameters, (, Node, fnNode, ), {, Set, <, String, >, names, =, getFunctionParameterSet, (]
[fnNode, ), {, Set, <, String, >, names, =, getFunctionParameterSet, (, fnNode, ), ;, Set, <, String, >, unsafeNames, =]
[fnNode, ), {, Set, <, String, >, names, =, getFunctionParameterSet, (, fnNode, ), ;, Set, <, String, >, unsafeNames, =]
[names, =, getFunctionParameterSet, (, fnNode, ), ;, Set, <, String, >, unsafeNames, =, Sets, ., newHashSet, (, ), ;, return]
[getFunctionParameterSet, (, fnNode, ), ;, Set, <, String, >, unsafeNames, =, Sets, ., newHashSet, (, ), ;, return, findModifiedParameters, (]
[getFunctionParameterSet, (, fnNode, ), ;, Set, <, String, >, unsafeNames, =, Sets, ., newHashSet, (, ), ;, return, findModifiedParameters, (]
[<, String, >, unsafeNames, =, Sets, ., newHashSet, (, ), ;, return, findModifiedParameters, (, fnNode, ., getLastChild, (, ), ,]
[>, unsafeNames, =, Sets, ., newHashSet, (, ), ;, return, findModifiedParameters, (, fnNode, ., getLastChild, (, ), ,, null, ,]
[=, Sets, ., newHashSet, (, ), ;, return, findModifiedParameters, (, fnNode, ., getLastChild, (, ), ,, null, ,, names, ,]
[., newHashSet, (, ), ;, return, findModifiedParameters, (, fnNode, ., getLastChild, (, ), ,, null, ,, names, ,, unsafeNames, ,]
[,, Node, parent, ,, Set, <, String, >, names, ,, Set, <, String, >, unsafe, ,, boolean, inInnerFunction, ), {]
[,, Node, parent, ,, Set, <, String, >, names, ,, Set, <, String, >, unsafe, ,, boolean, inInnerFunction, ), {]
[Set, <, String, >, names, ,, Set, <, String, >, unsafe, ,, boolean, inInnerFunction, ), {, Preconditions, ., checkArgument, (]
[Set, <, String, >, names, ,, Set, <, String, >, unsafe, ,, boolean, inInnerFunction, ), {, Preconditions, ., checkArgument, (]
[String, >, names, ,, Set, <, String, >, unsafe, ,, boolean, inInnerFunction, ), {, Preconditions, ., checkArgument, (, unsafe, !=]
[<, String, >, unsafe, ,, boolean, inInnerFunction, ), {, Preconditions, ., checkArgument, (, unsafe, !=, null, ), ;, if, (]
[<, String, >, unsafe, ,, boolean, inInnerFunction, ), {, Preconditions, ., checkArgument, (, unsafe, !=, null, ), ;, if, (]
[Preconditions, ., checkArgument, (, unsafe, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, if, (]
[Preconditions, ., checkArgument, (, unsafe, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, if, (]
[unsafe, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, if, (, names, ., contains, (]
[unsafe, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, if, (, names, ., contains, (]
[(, ), ), {, if, (, names, ., contains, (, n, ., getString, (, ), ), ), {, if, (]
[(, ), ), {, if, (, names, ., contains, (, n, ., getString, (, ), ), ), {, if, (]
[), {, if, (, names, ., contains, (, n, ., getString, (, ), ), ), {, if, (, inInnerFunction, ||]
[if, (, names, ., contains, (, n, ., getString, (, ), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (]
[names, ., contains, (, n, ., getString, (, ), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (, n, ,]
[n, ., getString, (, ), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (, n, ,, parent, ), ), {]
[n, ., getString, (, ), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (, n, ,, parent, ), ), {]
[), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (, n, ,, parent, ), ), {, unsafe, ., add, (]
[), ), ), {, if, (, inInnerFunction, ||, canNameValueChange, (, n, ,, parent, ), ), {, unsafe, ., add, (]
[), ), {, unsafe, ., add, (, n, ., getString, (, ), ), ;, }, }, }, else, if, (]
[), ), {, unsafe, ., add, (, n, ., getString, (, ), ), ;, }, }, }, else, if, (]
[n, ., getString, (, ), ), ;, }, }, }, else, if, (, n, ., isFunction, (, ), ), {]
[getString, (, ), ), ;, }, }, }, else, if, (, n, ., isFunction, (, ), ), {, inInnerFunction, =]
[else, if, (, n, ., isFunction, (, ), ), {, inInnerFunction, =, true, ;, }, for, (, Node, c, :]
[else, if, (, n, ., isFunction, (, ), ), {, inInnerFunction, =, true, ;, }, for, (, Node, c, :]
[), ), {, inInnerFunction, =, true, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {]
[{, inInnerFunction, =, true, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, findModifiedParameters, (]
[=, true, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, findModifiedParameters, (, c, ,]
[;, }, for, (, Node, c, :, n, ., children, (, ), ), {, findModifiedParameters, (, c, ,, n, ,]
[for, (, Node, c, :, n, ., children, (, ), ), {, findModifiedParameters, (, c, ,, n, ,, names, ,]
[Node, c, :, n, ., children, (, ), ), {, findModifiedParameters, (, c, ,, n, ,, names, ,, unsafe, ,]
[children, (, ), ), {, findModifiedParameters, (, c, ,, n, ,, names, ,, unsafe, ,, inInnerFunction, ), ;, }, return]
[}, return, unsafe, ;, }, private, static, boolean, canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =]
[}, return, unsafe, ;, }, private, static, boolean, canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =]
[boolean, canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return]
[canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (]
[canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (]
[canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (]
[canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (]
[canNameValueChange, (, Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (]
[Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==]
[Node, n, ,, Node, parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==]
[parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||]
[parent, ), {, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||]
[{, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==]
[{, int, type, =, parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==]
[parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||]
[parent, ., getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||]
[getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==]
[getType, (, ), ;, return, (, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==]
[return, (, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||]
[(, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (]
[(, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (]
[(, type, ==, Token, ., VAR, ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (]
[., VAR, ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (]
[type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[type, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[Map, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesNeedingTemps, ,, CodingConvention, convention, ), {, if, (]
[Map, <, String, ,, Node, >, argMap, ,, Set, <, String, >, namesNeedingTemps, ,, CodingConvention, convention, ), {, if, (]
[String, >, namesNeedingTemps, ,, CodingConvention, convention, ), {, if, (, argMap, ., isEmpty, (, ), ), {, return, ;, }]
[String, >, namesNeedingTemps, ,, CodingConvention, convention, ), {, if, (, argMap, ., isEmpty, (, ), ), {, return, ;, }]
[CodingConvention, convention, ), {, if, (, argMap, ., isEmpty, (, ), ), {, return, ;, }, Preconditions, ., checkArgument, (]
[CodingConvention, convention, ), {, if, (, argMap, ., isEmpty, (, ), ), {, return, ;, }, Preconditions, ., checkArgument, (]
[), ), {, return, ;, }, Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), ), ;, Node, block, =]
[), ), {, return, ;, }, Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), ), ;, Node, block, =]
[isFunction, (, ), ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, Set, <, String, >, parameters, =]
[isFunction, (, ), ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, Set, <, String, >, parameters, =]
[), ;, Set, <, String, >, parameters, =, argMap, ., keySet, (, ), ;, Set, <, String, >, namesAfterSideEffects, =]
[Set, <, String, >, parameters, =, argMap, ., keySet, (, ), ;, Set, <, String, >, namesAfterSideEffects, =, findParametersReferencedAfterSideEffect, (]
[String, >, parameters, =, argMap, ., keySet, (, ), ;, Set, <, String, >, namesAfterSideEffects, =, findParametersReferencedAfterSideEffect, (, parameters, ,]
[=, findParametersReferencedAfterSideEffect, (, parameters, ,, block, ), ;, for, (, Map, ., Entry, <, String, ,, Node, >, entry, :]
[=, findParametersReferencedAfterSideEffect, (, parameters, ,, block, ), ;, for, (, Map, ., Entry, <, String, ,, Node, >, entry, :]
[Map, ., Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, ), ), {, String, argName, =]
[Map, ., Entry, <, String, ,, Node, >, entry, :, argMap, ., entrySet, (, ), ), {, String, argName, =]
[entry, :, argMap, ., entrySet, (, ), ), {, String, argName, =, entry, ., getKey, (, ), ;, if, (]
[entry, :, argMap, ., entrySet, (, ), ), {, String, argName, =, entry, ., getKey, (, ), ;, if, (]
[entrySet, (, ), ), {, String, argName, =, entry, ., getKey, (, ), ;, if, (, namesNeedingTemps, ., contains, (]
[getKey, (, ), ;, if, (, namesNeedingTemps, ., contains, (, argName, ), ), {, continue, ;, }, Node, cArg, =]
[getKey, (, ), ;, if, (, namesNeedingTemps, ., contains, (, argName, ), ), {, continue, ;, }, Node, cArg, =]
[(, argName, ), ), {, continue, ;, }, Node, cArg, =, entry, ., getValue, (, ), ;, boolean, safe, =]
[continue, ;, }, Node, cArg, =, entry, ., getValue, (, ), ;, boolean, safe, =, true, ;, int, references, =]
[continue, ;, }, Node, cArg, =, entry, ., getValue, (, ), ;, boolean, safe, =, true, ;, int, references, =]
[cArg, =, entry, ., getValue, (, ), ;, boolean, safe, =, true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (]
[entry, ., getValue, (, ), ;, boolean, safe, =, true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (, block, ,]
[;, boolean, safe, =, true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (]
[;, boolean, safe, =, true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (]
[;, boolean, safe, =, true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (]
[true, ;, int, references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (]
[references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ), &&]
[references, =, NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ), &&]
[NodeUtil, ., getNameReferenceCount, (, block, ,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ), &&, references, >]
[(, block, ,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ), &&, references, >, 0, ), {]
[,, argName, ), ;, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ), &&, references, >, 0, ), {, safe, =]
[NodeUtil, ., mayEffectMutableState, (, cArg, ), &&, references, >, 0, ), {, safe, =, false, ;, }, else, if, (]
[NodeUtil, ., mayEffectMutableState, (, cArg, ), &&, references, >, 0, ), {, safe, =, false, ;, }, else, if, (]
[cArg, ), &&, references, >, 0, ), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., mayHaveSideEffects, (]
[>, 0, ), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {]
[), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {, safe, =]
[}, else, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {, safe, =, false, ;, }, else, if, (]
[}, else, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {, safe, =, false, ;, }, else, if, (]
[}, else, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {, safe, =, false, ;, }, else, if, (]
[NodeUtil, ., mayHaveSideEffects, (, cArg, ), ), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., canBeSideEffected, (]
[(, cArg, ), ), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., canBeSideEffected, (, cArg, ), &&]
[(, cArg, ), ), {, safe, =, false, ;, }, else, if, (, NodeUtil, ., canBeSideEffected, (, cArg, ), &&]
[{, safe, =, false, ;, }, else, if, (, NodeUtil, ., canBeSideEffected, (, cArg, ), &&, namesAfterSideEffects, ., contains, (]
[;, }, else, if, (, NodeUtil, ., canBeSideEffected, (, cArg, ), &&, namesAfterSideEffects, ., contains, (, argName, ), ), {]
[else, if, (, NodeUtil, ., canBeSideEffected, (, cArg, ), &&, namesAfterSideEffects, ., contains, (, argName, ), ), {, safe, =]
[(, cArg, ), &&, namesAfterSideEffects, ., contains, (, argName, ), ), {, safe, =, false, ;, }, else, if, (]
[(, cArg, ), &&, namesAfterSideEffects, ., contains, (, argName, ), ), {, safe, =, false, ;, }, else, if, (]
[), &&, namesAfterSideEffects, ., contains, (, argName, ), ), {, safe, =, false, ;, }, else, if, (, references, >]
[(, argName, ), ), {, safe, =, false, ;, }, else, if, (, references, >, 1, ), {, switch, (]
[(, argName, ), ), {, safe, =, false, ;, }, else, if, (, references, >, 1, ), {, switch, (]
[;, }, else, if, (, references, >, 1, ), {, switch, (, cArg, ., getType, (, ), ), {, case]
[;, }, else, if, (, references, >, 1, ), {, switch, (, cArg, ., getType, (, ), ), {, case]
[1, ), {, switch, (, cArg, ., getType, (, ), ), {, case, Token, ., NAME, :, String, name, =]
[1, ), {, switch, (, cArg, ., getType, (, ), ), {, case, Token, ., NAME, :, String, name, =]
[., getType, (, ), ), {, case, Token, ., NAME, :, String, name, =, cArg, ., getString, (, ), ;]
[(, ), ), {, case, Token, ., NAME, :, String, name, =, cArg, ., getString, (, ), ;, safe, =]
[), ), {, case, Token, ., NAME, :, String, name, =, cArg, ., getString, (, ), ;, safe, =, !]
[), {, case, Token, ., NAME, :, String, name, =, cArg, ., getString, (, ), ;, safe, =, !, (]
[), {, case, Token, ., NAME, :, String, name, =, cArg, ., getString, (, ), ;, safe, =, !, (]
[., NAME, :, String, name, =, cArg, ., getString, (, ), ;, safe, =, !, (, convention, ., isExported, (]
[., getString, (, ), ;, safe, =, !, (, convention, ., isExported, (, name, ), ), ;, break, ;, case]
[., getString, (, ), ;, safe, =, !, (, convention, ., isExported, (, name, ), ), ;, break, ;, case]
[;, safe, =, !, (, convention, ., isExported, (, name, ), ), ;, break, ;, case, Token, ., THIS, :]
[=, !, (, convention, ., isExported, (, name, ), ), ;, break, ;, case, Token, ., THIS, :, safe, =]
[isExported, (, name, ), ), ;, break, ;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case]
[isExported, (, name, ), ), ;, break, ;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case]
[), ;, break, ;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :]
[break, ;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :, safe, =]
[;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :, safe, =, (]
[;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :, safe, =, (]
[;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :, safe, =, (]
[;, case, Token, ., THIS, :, safe, =, true, ;, break, ;, case, Token, ., STRING, :, safe, =, (]
[break, ;, case, Token, ., STRING, :, safe, =, (, cArg, ., getString, (, ), ., length, (, ), <]
[safe, =, (, cArg, ., getString, (, ), ., length, (, ), <, 2, ), ;, break, ;, default, :]
[(, cArg, ., getString, (, ), ., length, (, ), <, 2, ), ;, break, ;, default, :, safe, =]
[(, cArg, ., getString, (, ), ., length, (, ), <, 2, ), ;, break, ;, default, :, safe, =]
[(, ), ., length, (, ), <, 2, ), ;, break, ;, default, :, safe, =, NodeUtil, ., isImmutableValue, (]
[;, break, ;, default, :, safe, =, NodeUtil, ., isImmutableValue, (, cArg, ), ;, break, ;, }, }, if, (]
[break, ;, default, :, safe, =, NodeUtil, ., isImmutableValue, (, cArg, ), ;, break, ;, }, }, if, (, !]
[:, safe, =, NodeUtil, ., isImmutableValue, (, cArg, ), ;, break, ;, }, }, if, (, !, safe, ), {]
[:, safe, =, NodeUtil, ., isImmutableValue, (, cArg, ), ;, break, ;, }, }, if, (, !, safe, ), {]
[., isImmutableValue, (, cArg, ), ;, break, ;, }, }, if, (, !, safe, ), {, namesNeedingTemps, ., add, (]
[String, >, findParametersReferencedAfterSideEffect, (, Set, <, String, >, parameters, ,, Node, root, ), {, Set, <, String, >, locals, =]
[String, >, findParametersReferencedAfterSideEffect, (, Set, <, String, >, parameters, ,, Node, root, ), {, Set, <, String, >, locals, =]
[Set, <, String, >, parameters, ,, Node, root, ), {, Set, <, String, >, locals, =, Sets, ., newHashSet, (]
[>, parameters, ,, Node, root, ), {, Set, <, String, >, locals, =, Sets, ., newHashSet, (, parameters, ), ;]
[,, Node, root, ), {, Set, <, String, >, locals, =, Sets, ., newHashSet, (, parameters, ), ;, gatherLocalNames, (]
[root, ), {, Set, <, String, >, locals, =, Sets, ., newHashSet, (, parameters, ), ;, gatherLocalNames, (, root, ,]
[>, locals, =, Sets, ., newHashSet, (, parameters, ), ;, gatherLocalNames, (, root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =]
[Sets, ., newHashSet, (, parameters, ), ;, gatherLocalNames, (, root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (]
[newHashSet, (, parameters, ), ;, gatherLocalNames, (, root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,]
[), ;, gatherLocalNames, (, root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;]
[), ;, gatherLocalNames, (, root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;]
[root, ,, locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;, NodeUtil, ., visitPostOrder, (]
[locals, ), ;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;, NodeUtil, ., visitPostOrder, (, root, ,]
[;, ReferencedAfterSideEffect, collector, =, new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;, NodeUtil, ., visitPostOrder, (, root, ,, collector, ,]
[new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;, NodeUtil, ., visitPostOrder, (, root, ,, collector, ,, collector, ), ;, return]
[new, ReferencedAfterSideEffect, (, parameters, ,, locals, ), ;, NodeUtil, ., visitPostOrder, (, root, ,, collector, ,, collector, ), ;, return]
[private, final, Set, <, String, >, parameters, ;, private, final, Set, <, String, >, locals, ;, private, boolean, sideEffectSeen, =]
[final, Set, <, String, >, locals, ;, private, boolean, sideEffectSeen, =, false, ;, private, Set, <, String, >, parametersReferenced, =]
[final, Set, <, String, >, locals, ;, private, boolean, sideEffectSeen, =, false, ;, private, Set, <, String, >, parametersReferenced, =]
[=, false, ;, private, Set, <, String, >, parametersReferenced, =, Sets, ., newHashSet, (, ), ;, private, int, loopsEntered, =]
[int, loopsEntered, =, 0, ;, ReferencedAfterSideEffect, (, Set, <, String, >, parameters, ,, Set, <, String, >, locals, ), {]
[int, loopsEntered, =, 0, ;, ReferencedAfterSideEffect, (, Set, <, String, >, parameters, ,, Set, <, String, >, locals, ), {]
[;, ReferencedAfterSideEffect, (, Set, <, String, >, parameters, ,, Set, <, String, >, locals, ), {, this, ., parameters, =]
[(, Set, <, String, >, parameters, ,, Set, <, String, >, locals, ), {, this, ., parameters, =, parameters, ;]
[(, Set, <, String, >, parameters, ,, Set, <, String, >, locals, ), {, this, ., parameters, =, parameters, ;]
[>, parameters, ,, Set, <, String, >, locals, ), {, this, ., parameters, =, parameters, ;, this, ., locals, =]
[parameters, =, parameters, ;, this, ., locals, =, locals, ;, }, Set, <, String, >, getResults, (, ), {, return]
[getResults, (, ), {, return, parametersReferenced, ;, }, @, Override, public, boolean, apply, (, Node, node, ), {, if, (]
[getResults, (, ), {, return, parametersReferenced, ;, }, @, Override, public, boolean, apply, (, Node, node, ), {, if, (]
[return, parametersReferenced, ;, }, @, Override, public, boolean, apply, (, Node, node, ), {, if, (, NodeUtil, ., isLoopStructure, (]
[@, Override, public, boolean, apply, (, Node, node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {]
[@, Override, public, boolean, apply, (, Node, node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {]
[(, Node, node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return]
[Node, node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !]
[node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !, (]
[node, ), {, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !, (]
[{, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !, (, sideEffectSeen, &&]
[{, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !, (, sideEffectSeen, &&]
[{, if, (, NodeUtil, ., isLoopStructure, (, node, ), ), {, loopsEntered, ++, ;, }, return, !, (, sideEffectSeen, &&]
[(, node, ), ), {, loopsEntered, ++, ;, }, return, !, (, sideEffectSeen, &&, parameters, ., size, (, ), ==]
[(, node, ), ), {, loopsEntered, ++, ;, }, return, !, (, sideEffectSeen, &&, parameters, ., size, (, ), ==]
[parameters, ., size, (, ), ==, parametersReferenced, ., size, (, ), ), ;, }, boolean, inLoop, (, ), {, return]
[parameters, ., size, (, ), ==, parametersReferenced, ., size, (, ), ), ;, }, boolean, inLoop, (, ), {, return]
[size, (, ), ==, parametersReferenced, ., size, (, ), ), ;, }, boolean, inLoop, (, ), {, return, loopsEntered, !=]
[), {, return, loopsEntered, !=, 0, ;, }, @, Override, public, void, visit, (, Node, n, ), {, if, (]
[), {, return, loopsEntered, !=, 0, ;, }, @, Override, public, void, visit, (, Node, n, ), {, if, (]
[!=, 0, ;, }, @, Override, public, void, visit, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (]
[@, Override, public, void, visit, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {]
[@, Override, public, void, visit, (, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {]
[(, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (]
[(, Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (]
[Node, n, ), {, if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (, !]
[if, (, NodeUtil, ., isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (, !, inLoop, (, ), &&]
[(, NodeUtil, ., isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (, !, inLoop, (, ), &&, !]
[isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (, !, inLoop, (, ), &&, !, sideEffectSeen, ), {]
[isLoopStructure, (, n, ), ), {, loopsEntered, --, ;, if, (, !, inLoop, (, ), &&, !, sideEffectSeen, ), {]
[(, !, inLoop, (, ), &&, !, sideEffectSeen, ), {, parametersReferenced, ., clear, (, ), ;, }, }, if, (]
[!, inLoop, (, ), &&, !, sideEffectSeen, ), {, parametersReferenced, ., clear, (, ), ;, }, }, if, (, !]
[!, sideEffectSeen, ), {, parametersReferenced, ., clear, (, ), ;, }, }, if, (, !, sideEffectSeen, ), {, if, (]
[), {, parametersReferenced, ., clear, (, ), ;, }, }, if, (, !, sideEffectSeen, ), {, if, (, hasNonLocalSideEffect, (]
[clear, (, ), ;, }, }, if, (, !, sideEffectSeen, ), {, if, (, hasNonLocalSideEffect, (, n, ), ), {]
[), ;, }, }, if, (, !, sideEffectSeen, ), {, if, (, hasNonLocalSideEffect, (, n, ), ), {, sideEffectSeen, =]
[!, sideEffectSeen, ), {, if, (, hasNonLocalSideEffect, (, n, ), ), {, sideEffectSeen, =, true, ;, }, }, if, (]
[!, sideEffectSeen, ), {, if, (, hasNonLocalSideEffect, (, n, ), ), {, sideEffectSeen, =, true, ;, }, }, if, (]
[if, (, hasNonLocalSideEffect, (, n, ), ), {, sideEffectSeen, =, true, ;, }, }, if, (, inLoop, (, ), ||]
[), ), {, sideEffectSeen, =, true, ;, }, }, if, (, inLoop, (, ), ||, sideEffectSeen, ), {, if, (]
[), ), {, sideEffectSeen, =, true, ;, }, }, if, (, inLoop, (, ), ||, sideEffectSeen, ), {, if, (]
[(, inLoop, (, ), ||, sideEffectSeen, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[(, inLoop, (, ), ||, sideEffectSeen, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, parameters, ., contains, (]
[{, String, name, =, n, ., getString, (, ), ;, if, (, parameters, ., contains, (, name, ), ), {]
[{, String, name, =, n, ., getString, (, ), ;, if, (, parameters, ., contains, (, name, ), ), {]
[n, ., getString, (, ), ;, if, (, parameters, ., contains, (, name, ), ), {, parametersReferenced, ., add, (]
[parameters, ., contains, (, name, ), ), {, parametersReferenced, ., add, (, name, ), ;, }, }, else, if, (]
[parameters, ., contains, (, name, ), ), {, parametersReferenced, ., add, (, name, ), ;, }, }, else, if, (]
[{, parametersReferenced, ., add, (, name, ), ;, }, }, else, if, (, n, ., isThis, (, ), ), {]
[{, parametersReferenced, ., add, (, name, ), ;, }, }, else, if, (, n, ., isThis, (, ), ), {]
[(, name, ), ;, }, }, else, if, (, n, ., isThis, (, ), ), {, parametersReferenced, ., add, (]
[., add, (, THIS_MARKER, ), ;, }, }, }, private, boolean, hasNonLocalSideEffect, (, Node, n, ), {, boolean, sideEffect, =]
[;, }, }, }, private, boolean, hasNonLocalSideEffect, (, Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =]
[;, }, }, }, private, boolean, hasNonLocalSideEffect, (, Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =]
[Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =, n, ., getType, (, ), ;, if, (]
[Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =, n, ., getType, (, ), ;, if, (]
[Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =, n, ., getType, (, ), ;, if, (]
[Node, n, ), {, boolean, sideEffect, =, false, ;, int, type, =, n, ., getType, (, ), ;, if, (]
[boolean, sideEffect, =, false, ;, int, type, =, n, ., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (]
[false, ;, int, type, =, n, ., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||]
[false, ;, int, type, =, n, ., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||]
[int, type, =, n, ., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==]
[int, type, =, n, ., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==]
[., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==, Token, ., INC, ||]
[., getType, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==, Token, ., INC, ||]
[(, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==, Token, ., INC, ||, type, ==]
[(, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ||, type, ==, Token, ., INC, ||, type, ==]
[(, n, ), ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, Node, lhs, =]
[(, n, ), ||, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, Node, lhs, =]
[INC, ||, type, ==, Token, ., DEC, ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[||, type, ==, Token, ., DEC, ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !]
[==, Token, ., DEC, ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, isLocalName, (]
[), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, isLocalName, (, lhs, ), ), {]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, isLocalName, (, lhs, ), ), {, sideEffect, =]
[), ;, if, (, !, isLocalName, (, lhs, ), ), {, sideEffect, =, true, ;, }, }, else, if, (]
[), ;, if, (, !, isLocalName, (, lhs, ), ), {, sideEffect, =, true, ;, }, }, else, if, (]
[if, (, !, isLocalName, (, lhs, ), ), {, sideEffect, =, true, ;, }, }, else, if, (, type, ==]
[if, (, !, isLocalName, (, lhs, ), ), {, sideEffect, =, true, ;, }, }, else, if, (, type, ==]
[lhs, ), ), {, sideEffect, =, true, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {]
[), {, sideEffect, =, true, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, sideEffect, =]
[), {, sideEffect, =, true, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, sideEffect, =]
[true, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (]
[type, ==, Token, ., CALL, ), {, sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (]
[type, ==, Token, ., CALL, ), {, sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (]
[Token, ., CALL, ), {, sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==]
[Token, ., CALL, ), {, sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==]
[sideEffect, =, NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==, Token, ., NEW, ), {]
[NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==, Token, ., NEW, ), {, sideEffect, =]
[NodeUtil, ., functionCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==, Token, ., NEW, ), {, sideEffect, =]
[n, ), ;, }, else, if, (, type, ==, Token, ., NEW, ), {, sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (]
[type, ==, Token, ., NEW, ), {, sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (]
[type, ==, Token, ., NEW, ), {, sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (]
[Token, ., NEW, ), {, sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==]
[Token, ., NEW, ), {, sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==]
[sideEffect, =, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==, Token, ., DELPROP, ), {]
[NodeUtil, ., constructorCallHasSideEffects, (, n, ), ;, }, else, if, (, type, ==, Token, ., DELPROP, ), {, sideEffect, =]
[n, ), ;, }, else, if, (, type, ==, Token, ., DELPROP, ), {, sideEffect, =, true, ;, }, return]
[{, sideEffect, =, true, ;, }, return, sideEffect, ;, }, private, boolean, isLocalName, (, Node, node, ), {, if, (]
[{, sideEffect, =, true, ;, }, return, sideEffect, ;, }, private, boolean, isLocalName, (, Node, node, ), {, if, (]
[private, boolean, isLocalName, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, String, name, =]
[private, boolean, isLocalName, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, String, name, =]
[{, if, (, node, ., isName, (, ), ), {, String, name, =, node, ., getString, (, ), ;, return]
[{, if, (, node, ., isName, (, ), ), {, String, name, =, node, ., getString, (, ), ;, return]
[., isName, (, ), ), {, String, name, =, node, ., getString, (, ), ;, return, locals, ., contains, (]
[{, String, name, =, node, ., getString, (, ), ;, return, locals, ., contains, (, name, ), ;, }, return]
[;, }, }, private, static, void, gatherLocalNames, (, Node, n, ,, Set, <, String, >, names, ), {, if, (]
[;, }, }, private, static, void, gatherLocalNames, (, Node, n, ,, Set, <, String, >, names, ), {, if, (]
[n, ,, Set, <, String, >, names, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[n, ,, Set, <, String, >, names, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[String, >, names, ), {, if, (, n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (]
[{, if, (, n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[{, if, (, n, ., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, names, ., add, (]
[., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, names, ., add, (]
[., isFunction, (, ), ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, names, ., add, (]
[add, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, return, ;, }, else, if, (]
[add, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, return, ;, }, else, if, (]
[(, ), ), ;, }, return, ;, }, else, if, (, n, ., isName, (, ), ), {, switch, (]
[(, ), ), ;, }, return, ;, }, else, if, (, n, ., isName, (, ), ), {, switch, (]
[(, ), ), ;, }, return, ;, }, else, if, (, n, ., isName, (, ), ), {, switch, (]
[., isName, (, ), ), {, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case]
[., isName, (, ), ), {, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case]
[{, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[{, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., CATCH, :]
[., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., CATCH, :]
[., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., CATCH, :, names, ., add, (]
[., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., CATCH, :, names, ., add, (]
[CATCH, :, names, ., add, (, n, ., getString, (, ), ), ;, }, }, for, (, Node, c, =]
[CATCH, :, names, ., add, (, n, ., getString, (, ), ), ;, }, }, for, (, Node, c, =]
[n, ., getString, (, ), ), ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[n, ., getString, (, ), ), ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[getString, (, ), ), ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[), ), ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, gatherLocalNames, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, gatherLocalNames, (, c, ,]
[}, }, private, static, Set, <, String, >, getFunctionParameterSet, (, Node, fnNode, ), {, Set, <, String, >, set, =]
[}, }, private, static, Set, <, String, >, getFunctionParameterSet, (, Node, fnNode, ), {, Set, <, String, >, set, =]
[fnNode, ), {, Set, <, String, >, set, =, Sets, ., newHashSet, (, ), ;, for, (, Node, n, :]
[fnNode, ), {, Set, <, String, >, set, =, Sets, ., newHashSet, (, ), ;, for, (, Node, n, :]
[fnNode, ), {, Set, <, String, >, set, =, Sets, ., newHashSet, (, ), ;, for, (, Node, n, :]
[<, String, >, set, =, Sets, ., newHashSet, (, ), ;, for, (, Node, n, :, NodeUtil, ., getFunctionParameters, (]
[(, ), ;, for, (, Node, n, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {]
[(, ), ;, for, (, Node, n, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {]
[(, Node, n, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, set, ., add, (]
[(, Node, n, :, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., children, (, ), ), {, set, ., add, (]
[), ., children, (, ), ), {, set, ., add, (, n, ., getString, (, ), ), ;, }, return]
