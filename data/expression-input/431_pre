[;, import, java, ., util, ., Set, ;, class, VarCheck, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =]
[;, import, java, ., util, ., Set, ;, class, VarCheck, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =]
[util, ., Set, ;, class, VarCheck, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =, DiagnosticType, ., error, (]
[Set, ;, class, VarCheck, extends, AbstractPostOrderCallback, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,]
[{, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =]
[{, static, final, DiagnosticType, UNDEFINED_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =]
[UNDEFINED_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,]
[DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,]
[error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +]
[final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =]
[final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =]
[DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (]
[error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,]
[error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,]
["JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +]
[final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =]
[final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =]
[DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (]
[warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,]
[warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,]
["JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +]
[final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =]
[final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =]
[DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (]
[disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,]
[;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =]
[;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =]
[NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,]
[), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =]
[(, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >, varsToDeclareInExterns, =]
[(, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >, varsToDeclareInExterns, =]
[compiler, ;, private, final, boolean, sanityCheck, ;, private, final, boolean, strictExternCheck, ;, VarCheck, (, AbstractCompiler, compiler, ), {, this, (]
[private, final, boolean, sanityCheck, ;, private, final, boolean, strictExternCheck, ;, VarCheck, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[compiler, ), {, this, (, compiler, ,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {]
[compiler, ), {, this, (, compiler, ,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {]
[(, compiler, ,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =]
[,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;]
[,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;]
[}, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =]
[}, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =]
[}, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =]
[compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (]
[compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (]
[), {, this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (]
[this, ., compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,]
[compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,]
[compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,]
[strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==]
[strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==]
[getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;]
[getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;]
[make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =]
[sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[=, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, !]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, !, sanityCheck, ), {]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, !, sanityCheck, ), {]
[void, process, (, Node, externs, ,, Node, root, ), {, if, (, !, sanityCheck, ), {, NodeTraversal, ., traverse, (]
[(, Node, externs, ,, Node, root, ), {, if, (, !, sanityCheck, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[externs, ,, Node, root, ), {, if, (, !, sanityCheck, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[(, !, sanityCheck, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }]
[(, !, sanityCheck, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }]
[{, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (]
[., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,]
[., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,]
[,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[(, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[(, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String, varName, :]
[Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {]
[newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (]
[createSynthesizedExternVar, (, varName, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[createSynthesizedExternVar, (, varName, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Preconditions, ., checkState, (]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Preconditions, ., checkState, (]
[scriptRoot, ,, Node, originalRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =]
[originalRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (]
[{, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;]
[checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;]
[isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (]
[), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,]
[), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,]
[t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, varName, =]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, varName, =]
[., isName, (, ), ), {, return, ;, }, String, varName, =, n, ., getString, (, ), ;, if, (]
[., isName, (, ), ), {, return, ;, }, String, varName, =, n, ., getString, (, ), ;, if, (]
[;, }, String, varName, =, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (, ), ), {]
[;, }, String, varName, =, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (, ), ), {]
[=, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (]
[=, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (]
[if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;]
[if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;]
[isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[{, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (]
[), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (]
[), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (]
[), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (]
[), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (]
[), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (]
[NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||]
[NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||]
[parent, ), ), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (]
[return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&]
[return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&]
[(, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (]
[isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {]
[), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (]
[., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;]
[., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;]
[), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (]
[varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =]
[varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =]
[addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (]
[t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (]
[getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (, var, ==]
[., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (, var, ==, null, ), {, if, (]
[., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (, var, ==, null, ), {, if, (]
[scope, ., getVar, (, varName, ), ;, if, (, var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (]
[var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (]
[var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (]
[==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !]
[), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||]
[{, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||, !]
[{, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||, !]
[{, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||, !]
[}, else, {, if, (, !, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {]
[}, else, {, if, (, !, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {]
[(, !, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (]
[strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (, n, ,]
[!, t, ., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,]
[., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (]
[), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw]
[., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (]
[., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (]
[(, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +]
[), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {]
[}, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar, (]
[sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;]
[sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;]
[sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;]
[+, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (]
[), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,]
[}, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,]
[{, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,, null, ,]
[(, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput, currInput, =]
[(, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput, currInput, =]
[), ), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =]
[), ), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =]
[;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (]
[;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (]
[;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (]
[;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (]
[CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==]
[=, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||]
[=, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||]
[., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==]
[(, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||]
[(, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||]
[;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==]
[(, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =]
[(, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =]
[varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =]
[varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =]
[currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =]
[currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =]
[JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !]
[varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&]
[varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&]
[getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=]
[), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&]
[), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&]
[JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=]
[=, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&]
[=, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&]
[., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=]
[if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (]
[if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (]
[&&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (]
[!=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,]
[null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (]
[null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (]
[currModule, ,, varModule, ), ), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (]
[currModule, ,, varModule, ), ), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (]
[), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (]
[}, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,]
[(, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {]
[(, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {]
[(, ), ), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (]
[), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (, n, ,]
[if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,]
[if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,]
[varModule, ,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[varModule, ,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,]
[VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {]
[VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {]
[getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (]
[), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (, n, ,]
[varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,]
[varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,]
[varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,]
[,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {]
[,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {]
[(, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (]
[,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,]
[., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,]
[., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,]
[), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,]
[), ,, varName, ), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =]
[), ,, varName, ), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =]
[;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name, (]
[private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name, (, varName, ), ;, if, (]
[private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name, (, varName, ), ;, if, (]
[private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name, (, varName, ), ;, if, (]
[Node, nameNode, =, IR, ., name, (, varName, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (]
[., name, (, varName, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {]
[., name, (, varName, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (]
[compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }]
[), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (]
[putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (]
[IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;]
[IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;]
[;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (]
[(, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;]
[(, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, switch, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, switch, (]
[{, if, (, n, ., isName, (, ), ), {, switch, (, parent, ., getType, (, ), ), {, case]
[{, if, (, n, ., isName, (, ), ), {, switch, (, parent, ., getType, (, ), ), {, case]
[isName, (, ), ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[isName, (, ), ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case]
[), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case]
[:, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (]
[:, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (]
[Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (, n, ==]
[Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (, n, ==]
[;, case, Token, ., GETPROP, :, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, Scope, scope, =]
[;, case, Token, ., GETPROP, :, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, Scope, scope, =]
[., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==]
[var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {]
[var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {]
[getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report, (]
[n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report, (, n, ,]
[getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,]
[getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,]
[var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;]
[var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;]
[{, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (]
[{, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (]
[), ), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :]
[), ), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :]
[., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (]
[(, n, ., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (, n, ,]
[., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,]
[., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,]
[default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, ), ), ;, Scope, scope, =]
[default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, ), ), ;, Scope, scope, =]
[., getString, (, ), ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[., getString, (, ), ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==]
[var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {]
[var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {]
[getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add, (]
[getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add, (]
[., getString, (, ), ), ;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput, (, ), {, return]
[., getString, (, ), ), ;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput, (, ), {, return]
[getSynthesizedExternsInput, (, ), {, return, compiler, ., getSynthesizedExternsInput, (, ), ;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (]
[getSynthesizedExternsInput, (, ), {, return, compiler, ., getSynthesizedExternsInput, (, ), ;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (]
[), {, return, compiler, ., getSynthesizedExternsInput, (, ), ;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==]
[(, ), ;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =]
[private, Node, getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;]
[getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =]
[getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =]
[if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (]
[), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (, compiler, ), ;, }, return]
