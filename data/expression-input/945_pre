[commons, ., math3, ., util, ., FastMath, ;, public, class, MullerSolver2, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, MullerSolver2, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, MullerSolver2, (, ), {, this, (]
[public, MullerSolver2, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, MullerSolver2, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, MullerSolver2, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, MullerSolver2, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =]
[), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =, getMin, (, ), ;, final, double, max, =]
[NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;]
[NoBracketingException, {, final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, verifyInterval, (]
[final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, verifyInterval, (, min, ,]
[;, final, double, max, =, getMax, (, ), ;, verifyInterval, (, min, ,, max, ), ;, final, double, relativeAccuracy, =]
[;, verifyInterval, (, min, ,, max, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =]
[final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =]
[getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =]
[), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (]
[=, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (]
[=, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (]
[=, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (]
[;, double, x0, =, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (, FastMath, ., abs, (]
[=, min, ;, double, y0, =, computeObjectiveValue, (, x0, ), ;, if, (, FastMath, ., abs, (, y0, ), <]
[y0, =, computeObjectiveValue, (, x0, ), ;, if, (, FastMath, ., abs, (, y0, ), <, functionValueAccuracy, ), {, return]
[;, if, (, FastMath, ., abs, (, y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =]
[abs, (, y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =]
[y0, ), <, functionValueAccuracy, ), {, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (]
[{, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[{, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[{, return, x0, ;, }, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[}, double, x1, =, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (, FastMath, ., abs, (]
[=, max, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, if, (, FastMath, ., abs, (, y1, ), <]
[y1, =, computeObjectiveValue, (, x1, ), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (]
[if, (, FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *]
[FastMath, ., abs, (, y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >]
[y1, ), <, functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw]
[functionValueAccuracy, ), {, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (]
[{, return, x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0, ,]
[x1, ;, }, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,]
[}, if, (, y0, *, y1, >, 0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,]
[0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =]
[0, ), {, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =]
[{, throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *]
[throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (]
[throw, new, NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (]
[NoBracketingException, (, x0, ,, x1, ,, y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +]
[y0, ,, y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2, =]
[y1, ), ;, }, double, x2, =, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (]
[=, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =]
[=, 0.5, *, (, x0, +, x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =]
[x1, ), ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (]
[(, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =]
[(, x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =]
[x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (]
[x2, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -]
[=, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /]
[Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /, (]
[Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /, (]
[POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, q, =, (, x2, -, x1, ), /, (, x1, -]
[final, double, q, =, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =]
[final, double, q, =, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =]
[q, =, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *]
[=, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (]
[=, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (]
[=, (, x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (]
[x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -]
[x2, -, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -]
[-, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (]
[-, x1, ), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (]
[), /, (, x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +]
[x1, -, x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *]
[x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +]
[x0, ), ;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +]
[;, final, double, a, =, q, *, (, y2, -, (, 1, +, q, ), *, y1, +, q, *]
[(, y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =]
[(, y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =]
[(, y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =]
[(, y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =]
[y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (]
[y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (]
[y2, -, (, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (]
[(, 1, +, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *]
[+, q, ), *, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +]
[*, y1, +, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[+, q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -]
[q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (]
[q, *, y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (]
[y0, ), ;, final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +]
[final, double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, ), *]
[double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, ), *, (]
[double, b, =, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, ), *, (]
[=, (, 2, *, q, +, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +]
[*, q, +, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *]
[+, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +]
[+, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +]
[+, 1, ), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +]
[), *, y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *]
[y2, -, (, 1, +, q, ), *, (, 1, +, q, ), *, y1, +, q, *, q, *]
[), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =]
[), *, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =]
[*, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (]
[*, (, 1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (]
[1, +, q, ), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +]
[), *, y1, +, q, *, q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *]
[q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =]
[q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =]
[q, *, y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =]
[y0, ;, final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *]
[final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b, -]
[final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b, -]
[final, double, c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b, -]
[c, =, (, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b, -, 4, *]
[(, 1, +, q, ), *, y2, ;, final, double, delta, =, b, *, b, -, 4, *, a, *]
[=, b, *, b, -, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (]
[=, b, *, b, -, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (]
[*, b, -, 4, *, a, *, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=]
[*, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =]
[*, c, ;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =]
[;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +]
[;, double, x, ;, final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +]
[final, double, denominator, ;, if, (, delta, >=, 0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (]
[delta, >=, 0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =]
[delta, >=, 0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =]
[0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -]
[0.0, ), {, double, dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -]
[dplus, =, b, +, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (]
[+, FastMath, ., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;]
[., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =]
[., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =]
[., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =]
[., sqrt, (, delta, ), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =]
[), ;, double, dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (]
[dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >]
[dminus, =, b, -, FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >]
[FastMath, ., sqrt, (, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (]
[(, delta, ), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?]
[), ;, denominator, =, FastMath, ., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :]
[., abs, (, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {]
[(, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =]
[(, dplus, ), >, FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =]
[FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (]
[FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (]
[FastMath, ., abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (]
[abs, (, dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *]
[dminus, ), ?, dplus, :, dminus, ;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -]
[;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (]
[;, }, else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (]
[else, {, denominator, =, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=]
[=, FastMath, ., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {]
[., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =]
[., sqrt, (, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =]
[(, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -]
[(, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -]
[(, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -]
[(, b, *, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -]
[*, b, -, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *]
[-, delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *]
[delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (]
[delta, ), ;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (]
[;, }, if, (, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2, -]
[(, denominator, !=, 0, ), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /]
[), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (]
[), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (]
[), {, x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (]
[x, =, x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==]
[x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||]
[x2, -, 2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||]
[2.0, *, c, *, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==]
[*, (, x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {]
[x2, -, x1, ), /, denominator, ;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=]
[;, while, (, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {]
[(, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =]
[(, x, ==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =]
[==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +]
[==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +]
[==, x1, ||, x, ==, x2, ), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +]
[), {, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *]
[{, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (]
[{, x, +=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (]
[+=, absoluteAccuracy, ;, }, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -]
[}, }, else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -, min, ), ;]
[else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -, min, ), ;, oldx, =]
[else, {, x, =, min, +, FastMath, ., random, (, ), *, (, max, -, min, ), ;, oldx, =]
[(, ), *, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =]
[*, (, max, -, min, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (]
[oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[oldx, =, Double, ., POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[POSITIVE_INFINITY, ;, }, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[}, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[}, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[=, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (]
[x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (]
[if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=]
[abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return]
[-, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }]
[), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =]
[tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;]
[FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =]
[abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;]
[y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =]
[<=, functionValueAccuracy, ), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;]
[), {, return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =]
[return, x, ;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;]
[;, }, x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =]
[x0, =, x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;]
[x1, ;, y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =]
[y0, =, y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;]
[y1, ;, x1, =, x2, ;, y1, =, y2, ;, x2, =, x, ;, y2, =, y, ;, oldx, =]
