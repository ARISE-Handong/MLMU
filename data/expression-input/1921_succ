[), {, case, 0, :, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;]
[:, return, EMPTY, ;, case, 1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return]
[;, case, 1, :, return, TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default]
[:, return, TRUE, ;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new]
[;, case, 2, :, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: "]
[:, return, FALSE, ;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: ", +, ordinal, )]
[;, case, 3, :, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }]
[:, return, BOTH, ;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection]
[;, default, :, throw, new, IllegalArgumentException, (, "Ordinal: ", +, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that]
[;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), &]
[), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, )]
[+, ordinal, ), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal]
[), ;, }, }, public, BooleanLiteralSet, intersection, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, )]
[;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), |, that]
[), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), |]
[&, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (]
[., ordinal, (, ), &, that, ., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, )]
[), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, ., ordinal, (, ), |]
[., ordinal, (, ), ), ;, }, public, BooleanLiteralSet, union, (, BooleanLiteralSet, that, ), {, return, fromOrdinal, (, this, .]
[;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {, case]
[), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {]
[|, that, ., ordinal, (, ), ), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this]
[., ordinal, (, ), |, that, ., ordinal, (, ), ), ;, }, public, boolean, contains, (, boolean, literalValue, )]
[), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal, (, ), ), {]
[., ordinal, (, ), ), ;, }, public, boolean, contains, (, boolean, literalValue, ), {, switch, (, this, ., ordinal]
[), {, case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return, !, literalValue]
[., ordinal, (, ), ), {, case, 0, :, return, false, ;, case, 1, :, return, literalValue, ;, case, 2]
[:, return, false, ;, case, 1, :, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case, 3, :]
[;, case, 1, :, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;]
[:, return, literalValue, ;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw]
[;, case, 2, :, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (]
[:, return, !, literalValue, ;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +, this]
[;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +, this, ., ordinal, (, )]
[;, case, 3, :, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +, this, ., ordinal, (, )]
[:, return, true, ;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +, this, ., ordinal, (, ), ), ;, }]
[;, default, :, throw, new, IndexOutOfBoundsException, (, "Ordinal: ", +, this, ., ordinal, (, ), ), ;, }, }, public, static]
[;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?, TRUE, :, FALSE, ;, }]
[), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?, TRUE, :, FALSE, ;]
[+, this, ., ordinal, (, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return]
[), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?, TRUE, :, FALSE, ;]
[., ordinal, (, ), ), ;, }, }, public, static, BooleanLiteralSet, get, (, boolean, literalValue, ), {, return, literalValue, ?]
[;, }, }]
[?, TRUE, :, FALSE, ;, }, }]
[:, FALSE, ;, }, }]
[;, }, }]
