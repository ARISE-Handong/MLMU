[@, Deprecated, public, class, SimplexOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, AbstractSimplex, simplex, ;, @, Deprecated, public]
[), @, Deprecated, public, class, SimplexOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, AbstractSimplex, simplex, ;, @, Deprecated]
[), ;, }, public, SimplexOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (, checker, ), ;, }, public]
[), ;, }, public, SimplexOptimizer, (, double, rel, ,, double, abs, ), {, this, (, new, SimpleValueChecker, (, rel, ,]
[), ;, }, @, Deprecated, public, void, setSimplex, (, AbstractSimplex, simplex, ), {, parseOptimizationData, (, simplex, ), ;, }, @]
[,, abs, ), ), ;, }, @, Deprecated, public, void, setSimplex, (, AbstractSimplex, simplex, ), {, parseOptimizationData, (, simplex, )]
[), ), ;, }, @, Deprecated, public, void, setSimplex, (, AbstractSimplex, simplex, ), {, parseOptimizationData, (, simplex, ), ;, }]
[;, }, @, Override, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData]
[), ;, }, @, Override, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ...]
[;, return, super, ., optimizeInternal, (, maxEval, ,, f, ,, goalType, ,, optData, ), ;, }, private, void, parseOptimizationData, (]
[), ;, return, super, ., optimizeInternal, (, maxEval, ,, f, ,, goalType, ,, optData, ), ;, }, private, void, parseOptimizationData]
[;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if]
[., optimizeInternal, (, maxEval, ,, f, ,, goalType, ,, optData, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData]
[,, f, ,, goalType, ,, optData, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (]
[,, goalType, ,, optData, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data]
[,, optData, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData]
[), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {]
[), {, if, (, data, instanceof, AbstractSimplex, ), {, simplex, =, (, AbstractSimplex, ), data, ;, continue, ;, }, }]
[), {, simplex, =, (, AbstractSimplex, ), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (]
[instanceof, AbstractSimplex, ), {, simplex, =, (, AbstractSimplex, ), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair]
[=, (, AbstractSimplex, ), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if]
[;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (, simplex, ==, null, )]
[;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (, simplex, ==, null, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, MultivariateFunction, evalFunc, =, new, MultivariateFunction, (, ), {, public, double]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, MultivariateFunction, evalFunc, =, new, MultivariateFunction, (, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, MultivariateFunction, evalFunc, =, new, MultivariateFunction, (, ), {, public, double]
[;, }, final, MultivariateFunction, evalFunc, =, new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, )]
[;, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, Comparator, <, PointValuePair, >, comparator, =]
[;, }, }, ;, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, Comparator, <, PointValuePair]
[), ;, }, }, ;, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, Comparator, <]
[;, final, Comparator, <, PointValuePair, >, comparator, =, new, Comparator, <, PointValuePair, >, (, ), {, public, int, compare, (]
[==, GoalType, ., MINIMIZE, ;, final, Comparator, <, PointValuePair, >, comparator, =, new, Comparator, <, PointValuePair, >, (, ), {]
[;, final, Comparator, <, PointValuePair, >, comparator, =, new, Comparator, <, PointValuePair, >, (, ), {, public, int, compare, (]
[., MINIMIZE, ;, final, Comparator, <, PointValuePair, >, comparator, =, new, Comparator, <, PointValuePair, >, (, ), {, public, int]
[;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair]
[;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,]
[., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, .]
[;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1]
[., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare]
[;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,, comparator]
[?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }]
[:, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, )]
[., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;]
[,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (]
[), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (]
[;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,, comparator]
[., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;]
[,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (]
[), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,]
[;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =]
[., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ]]
[), ;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration]
[;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =, 0, ;]
[,, comparator, ), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair]
[), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker]
[;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true]
[;, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, if, (, iteration]
[;, while, (, true, ), {, if, (, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (]
[), {, if, (, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0]
[), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <, simplex, ., getSize, (]
[>, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <, simplex, .]
[), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <, simplex, ., getSize, (]
[;, for, (, int, i, =, 0, ;, i, <, simplex, ., getSize, (, ), ;, i, ++, ), {]
[;, i, <, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ]]
[;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged]
[<, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged]
[;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged]
[., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged]
[), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,]
[++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration]
[;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), )]
[[, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (]
[], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, )]
[=, converged, &&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }]
[;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =, simplex]
[&&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (]
[;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =, simplex]
[., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, )]
[,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return, simplex, .]
[,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (]
[), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =]
[., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, )]
[), ), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous]
[), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;]
[;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;]
[., getPoint, (, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (]
[), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, )]
[=, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;, ++, iteration, ;, }]
[;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;, ++, iteration, ;, }, }, }]
[., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;, ++, iteration, ;, }, }, }]
[;, ++, iteration, ;, }, }, }]
[., iterate, (, evalFunc, ,, comparator, ), ;, ++, iteration, ;, }, }, }]
[,, comparator, ), ;, ++, iteration, ;, }, }, }]
[), ;, ++, iteration, ;, }, }, }]
[;, }, }, }]
[;, }, }, }]
