[;, public, BigFractionFormat, (, ), {, }, public, BigFractionFormat, (, final, NumberFormat, format, ), {, super, (, format, ), ;]
[;, public, BigFractionFormat, (, ), {, }, public, BigFractionFormat, (, final, NumberFormat, format, ), {, super, (, format, ), ;]
[), ;, }, public, BigFractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat]
[,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return, NumberFormat, ., getAvailableLocales, (, )]
[), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return, NumberFormat, ., getAvailableLocales, (, ), ;, }]
[;, }, public, static, String, formatBigFraction, (, final, BigFraction, f, ), {, return, getImproperInstance, (, ), ., format, (, f]
[., getAvailableLocales, (, ), ;, }, public, static, String, formatBigFraction, (, final, BigFraction, f, ), {, return, getImproperInstance, (, )]
[;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault, (, ), ), ;, }]
[., format, (, f, ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault]
[), ;, }, public, static, BigFractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault, (, ), ), ;]
[;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, BigFractionFormat, (, getDefaultNumberFormat, (, locale, )]
[), ;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, BigFractionFormat, (, getDefaultNumberFormat, (, locale]
[., getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, BigFractionFormat]
[;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), ), ;, }]
[), ;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), ), ;]
[), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), )]
[;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperBigFractionFormat, (, getDefaultNumberFormat, (, locale, )]
[), ;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperBigFractionFormat, (, getDefaultNumberFormat, (, locale]
[., getDefault, (, ), ), ;, }, public, static, BigFractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperBigFractionFormat]
[;, }, public, StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos]
[), ;, }, public, StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[), ), ;, }, public, StringBuffer, format, (, final, BigFraction, BigFraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, )]
[;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,]
[., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction]
[), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, )]
[;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, .]
[., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,]
[), ;, getNumeratorFormat, (, ), ., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,]
[., format, (, BigFraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", )]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction]
[., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, )]
[,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator]
[), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, )]
[;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,]
[), ;, getDenominatorFormat, (, ), ., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return]
[;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final]
[., format, (, BigFraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override]
[,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,]
[., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (]
[,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer]
[), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,]
[;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, )]
[), {, ret, =, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[instanceof, BigFraction, ), {, ret, =, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else]
[=, format, (, (, BigFraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger]
[;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, )]
[,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new]
[,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new]
[,, pos, ), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (]
[), ;, }, else, if, (, obj, instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger]
[), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,, pos, ), ;]
[instanceof, BigInteger, ), {, ret, =, format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,, pos]
[=, format, (, new, BigFraction, (, (, BigInteger, ), obj, ), ,, toAppendTo, ,, pos, ), ;, }, else, if]
[;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (, (, (, Number]
[,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new]
[), ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (]
[), ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (]
[), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (, (, (]
[), {, ret, =, format, (, new, BigFraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), )]
[instanceof, Number, ), {, ret, =, format, (, new, BigFraction, (, (, (, Number, ), obj, ), ., doubleValue, (]
[=, format, (, new, BigFraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,]
[;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @, Override]
[,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return]
[), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }]
[., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;]
[), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @]
[;, }, return, ret, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ), throws, MathParseException, {, final]
[), ;, }, return, ret, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ), throws, MathParseException, {]
[., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ), throws]
[;, }, @, Override, public, BigFraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new]
[;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==]
[), ;, final, BigFraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, )]
[;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, .]
[,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source]
[), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition]
[), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, BigFraction, ., class, ), ;, }]
[==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, BigFraction, ., class, )]
[., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,]
[), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, BigFraction, ., class, ), ;, }]
[;, }, return, result, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, )]
[,, parsePosition, ., getErrorIndex, (, ), ,, BigFraction, ., class, ), ;, }, return, result, ;, }, @, Override, public]
[,, BigFraction, ., class, ), ;, }, return, result, ;, }, @, Override, public, BigFraction, parse, (, final, String, source]
[., getErrorIndex, (, ), ,, BigFraction, ., class, ), ;, }, return, result, ;, }, @, Override, public, BigFraction, parse]
[), ;, }, return, result, ;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos]
[;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if]
[., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,]
[;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos]
[,, pos, ), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null]
[), ;, final, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final]
[,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :]
[., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, )]
[;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case]
[), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :]
[), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos]
[:, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex]
[;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final]
[., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source]
[), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;]
[;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos]
[,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return]
[,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (, num, ,, den]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (, num]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (, num, ,, den]
[;, return, null, ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, protected, BigInteger, parseNextBigInteger, (, final]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }]
[), ;, return, null, ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, protected, BigInteger, parseNextBigInteger, (]
[;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,]
[;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos]
[,, den, ), ;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int]
[), ;, }, protected, BigInteger, parseNextBigInteger, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, )]
[., getIndex, (, ), ;, int, end, =, (, source, ., charAt, (, start, ), ==, '-', ), ?, (]
[;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt]
[?, (, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, ), )]
[), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, )]
[==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length]
[., charAt, (, start, ), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (]
[), ==, '-', ), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <, source, .]
[), ?, (, start, +, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, )]
[:, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (, source]
[), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (]
[+, 1, ), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, .]
[), :, start, ;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (]
[;, while, (, (, end, <, source, ., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt]
[), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,]
[&&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {]
[), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++, end, ;, }, try]
[<, source, ., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), )]
[), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++, end, ;, }, try]
[., length, (, ), ), &&, Character, ., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++]
[), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,]
[., isDigit, (, source, ., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {, BigInteger, n]
[), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start]
[., charAt, (, end, ), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (]
[), ), ), {, ++, end, ;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (]
[;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;]
[;, }, try, {, BigInteger, n, =, new, BigInteger, (, source, ., substring, (, start, ,, end, ), ), ;]
[;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, .]
[), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos]
[., substring, (, start, ,, end, ), ), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }]
[,, end, ), ), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe]
[), ), ;, pos, ., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {]
[;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (, start, ), ;, return, null]
[., setIndex, (, end, ), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (]
[), ;, return, n, ;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (, start, ), ;, return]
[;, }, catch, (, NumberFormatException, nfe, ), {, pos, ., setErrorIndex, (, start, ), ;, return, null, ;, }, }]
[;, return, null, ;, }, }, }]
[., setErrorIndex, (, start, ), ;, return, null, ;, }, }, }]
[), ;, return, null, ;, }, }, }]
[;, }, }, }]
