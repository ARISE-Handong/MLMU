[), ;, }, public, GaussNewtonOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, true, ,, checker, ), ;]
[,, checker, ), ;, }, @, Deprecated, public, GaussNewtonOptimizer, (, final, boolean, useLU, ), {, this, (, useLU, ,, new]
[), ;, }, @, Deprecated, public, GaussNewtonOptimizer, (, final, boolean, useLU, ), {, this, (, useLU, ,, new, SimpleVectorValueChecker, (]
[,, new, SimpleVectorValueChecker, (, ), ), ;, }, public, GaussNewtonOptimizer, (, final, boolean, useLU, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker]
[), ;, }, public, GaussNewtonOptimizer, (, final, boolean, useLU, ,, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, super, (, checker]
[), ;, this, ., useLU, =, useLU, ;, }, @, Override, public, PointVectorValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <]
[=, useLU, ;, }, @, Override, public, PointVectorValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker]
[., useLU, =, useLU, ;, }, @, Override, public, PointVectorValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointVectorValuePair, >, checker]
[;, }, @, Override, public, PointVectorValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, )]
[;, if, (, checker, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, double, [, ], targetValues]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, double, [, ], targetValues, =, getTarget, (, ), ;, final]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, double, [, ], targetValues, =, getTarget, (, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, double, [, ], targetValues, =, getTarget, (, ), ;, final]
[;, }, final, double, [, ], targetValues, =, getTarget, (, ), ;, final, int, nR, =, targetValues, ., length, ;]
[;, final, int, nR, =, targetValues, ., length, ;, final, RealMatrix, weightMatrix, =, getWeight, (, ), ;, final, double, []
[;, final, RealMatrix, weightMatrix, =, getWeight, (, ), ;, final, double, [, ], residualsWeights, =, new, double, [, nR, ]]
[., length, ;, final, RealMatrix, weightMatrix, =, getWeight, (, ), ;, final, double, [, ], residualsWeights, =, new, double, []
[;, final, double, [, ], residualsWeights, =, new, double, [, nR, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, residualsWeights, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, residualsWeights, [, i]
[;, i, <, nR, ;, i, ++, ), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,]
[;, i, ++, ), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }]
[<, nR, ;, i, ++, ), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, )]
[;, i, ++, ), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }]
[), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }, final, double, []
[++, ), {, residualsWeights, [, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }, final, double]
[=, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }, final, double, [, ], currentPoint, =, getStartPoint, (, )]
[[, i, ], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }, final, double, [, ], currentPoint, =]
[], =, weightMatrix, ., getEntry, (, i, ,, i, ), ;, }, final, double, [, ], currentPoint, =, getStartPoint, (]
[;, }, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;]
[., getEntry, (, i, ,, i, ), ;, }, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final]
[,, i, ), ;, }, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint]
[), ;, }, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length]
[;, final, int, nC, =, currentPoint, ., length, ;, PointVectorValuePair, current, =, null, ;, int, iter, =, 0, ;, for]
[;, PointVectorValuePair, current, =, null, ;, int, iter, =, 0, ;, for, (, boolean, converged, =, false, ;, !, converged]
[., length, ;, PointVectorValuePair, current, =, null, ;, int, iter, =, 0, ;, for, (, boolean, converged, =, false, ;]
[;, int, iter, =, 0, ;, for, (, boolean, converged, =, false, ;, !, converged, ;, ), {, ++, iter]
[;, for, (, boolean, converged, =, false, ;, !, converged, ;, ), {, ++, iter, ;, PointVectorValuePair, previous, =, current]
[;, !, converged, ;, ), {, ++, iter, ;, PointVectorValuePair, previous, =, current, ;, final, double, [, ], currentObjective, =]
[;, ), {, ++, iter, ;, PointVectorValuePair, previous, =, current, ;, final, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint]
[;, ), {, ++, iter, ;, PointVectorValuePair, previous, =, current, ;, final, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint]
[;, PointVectorValuePair, previous, =, current, ;, final, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, final, double, []
[;, PointVectorValuePair, previous, =, current, ;, final, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, final, double, []
[;, final, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, final, double, [, ], currentResiduals, =, computeResiduals, (]
[;, final, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, currentPoint, )]
[), ;, final, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, currentPoint]
[;, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, currentPoint, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;]
[), ;, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, currentPoint, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, )]
[;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, final, double, [, ], b, =, new, double, []
[), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, final, double, [, ], b, =, new, double]
[=, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, final, double, [, ], b, =, new, double, [, nC, ]]
[;, final, double, [, ], b, =, new, double, [, nC, ], ;, final, double, [, ], [, ], a]
[,, currentObjective, ), ;, final, double, [, ], b, =, new, double, [, nC, ], ;, final, double, [, ]]
[), ;, final, double, [, ], b, =, new, double, [, nC, ], ;, final, double, [, ], [, ]]
[;, final, double, [, ], [, ], a, =, new, double, [, nC, ], [, nC, ], ;, for, (]
[], ;, final, double, [, ], [, ], a, =, new, double, [, nC, ], [, nC, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, final, double, [, ]]
[], [, nC, ], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, final, double, []
[;, i, <, nR, ;, ++, i, ), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i]
[;, ++, i, ), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i, ), ;, final, double]
[<, nR, ;, ++, i, ), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i, ), ;]
[;, ++, i, ), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i, ), ;, final, double]
[), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i, ), ;, final, double, weight, =, residualsWeights]
[), {, final, double, [, ], grad, =, weightedJacobian, ., getRow, (, i, ), ;, final, double, weight, =, residualsWeights]
[;, final, double, weight, =, residualsWeights, [, i, ], ;, final, double, residual, =, currentResiduals, [, i, ], ;, final]
[., getRow, (, i, ), ;, final, double, weight, =, residualsWeights, [, i, ], ;, final, double, residual, =, currentResiduals]
[), ;, final, double, weight, =, residualsWeights, [, i, ], ;, final, double, residual, =, currentResiduals, [, i, ], ;]
[;, final, double, residual, =, currentResiduals, [, i, ], ;, final, double, wr, =, weight, *, residual, ;, for, (]
[[, i, ], ;, final, double, residual, =, currentResiduals, [, i, ], ;, final, double, wr, =, weight, *, residual]
[], ;, final, double, residual, =, currentResiduals, [, i, ], ;, final, double, wr, =, weight, *, residual, ;, for]
[;, final, double, wr, =, weight, *, residual, ;, for, (, int, j, =, 0, ;, j, <, nC, ;]
[[, i, ], ;, final, double, wr, =, weight, *, residual, ;, for, (, int, j, =, 0, ;, j]
[], ;, final, double, wr, =, weight, *, residual, ;, for, (, int, j, =, 0, ;, j, <, nC]
[;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, b, [, j, ]]
[*, residual, ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, b, []
[;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, b, [, j, ]]
[;, j, <, nC, ;, ++, j, ), {, b, [, j, ], +=, wr, *, grad, [, j, ]]
[;, ++, j, ), {, b, [, j, ], +=, wr, *, grad, [, j, ], ;, }, for, (]
[<, nC, ;, ++, j, ), {, b, [, j, ], +=, wr, *, grad, [, j, ], ;, }]
[;, ++, j, ), {, b, [, j, ], +=, wr, *, grad, [, j, ], ;, }, for, (]
[), {, b, [, j, ], +=, wr, *, grad, [, j, ], ;, }, for, (, int, k, =]
[), {, b, [, j, ], +=, wr, *, grad, [, j, ], ;, }, for, (, int, k, =]
[+=, wr, *, grad, [, j, ], ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;]
[[, j, ], +=, wr, *, grad, [, j, ], ;, }, for, (, int, k, =, 0, ;, k]
[], +=, wr, *, grad, [, j, ], ;, }, for, (, int, k, =, 0, ;, k, <, nC]
[;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, [, ]]
[*, grad, [, j, ], ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k]
[;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, [, ]]
[[, j, ], ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {]
[], ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, []
[;, k, <, nC, ;, ++, k, ), {, double, [, ], ak, =, a, [, k, ], ;, double]
[;, ++, k, ), {, double, [, ], ak, =, a, [, k, ], ;, double, wgk, =, weight, *]
[<, nC, ;, ++, k, ), {, double, [, ], ak, =, a, [, k, ], ;, double, wgk, =]
[;, ++, k, ), {, double, [, ], ak, =, a, [, k, ], ;, double, wgk, =, weight, *]
[), {, double, [, ], ak, =, a, [, k, ], ;, double, wgk, =, weight, *, grad, [, k]
[), {, double, [, ], ak, =, a, [, k, ], ;, double, wgk, =, weight, *, grad, [, k]
[;, double, wgk, =, weight, *, grad, [, k, ], ;, for, (, int, l, =, 0, ;, l, <]
[[, k, ], ;, double, wgk, =, weight, *, grad, [, k, ], ;, for, (, int, l, =, 0]
[], ;, double, wgk, =, weight, *, grad, [, k, ], ;, for, (, int, l, =, 0, ;, l]
[;, for, (, int, l, =, 0, ;, l, <, nC, ;, ++, l, ), {, ak, [, l, ]]
[*, grad, [, k, ], ;, for, (, int, l, =, 0, ;, l, <, nC, ;, ++, l, )]
[;, for, (, int, l, =, 0, ;, l, <, nC, ;, ++, l, ), {, ak, [, l, ]]
[[, k, ], ;, for, (, int, l, =, 0, ;, l, <, nC, ;, ++, l, ), {, ak]
[], ;, for, (, int, l, =, 0, ;, l, <, nC, ;, ++, l, ), {, ak, [, l]
[;, l, <, nC, ;, ++, l, ), {, ak, [, l, ], +=, wgk, *, grad, [, l, ]]
[;, ++, l, ), {, ak, [, l, ], +=, wgk, *, grad, [, l, ], ;, }, }, }]
[<, nC, ;, ++, l, ), {, ak, [, l, ], +=, wgk, *, grad, [, l, ], ;, }]
[;, ++, l, ), {, ak, [, l, ], +=, wgk, *, grad, [, l, ], ;, }, }, }]
[), {, ak, [, l, ], +=, wgk, *, grad, [, l, ], ;, }, }, }, try, {, RealMatrix]
[), {, ak, [, l, ], +=, wgk, *, grad, [, l, ], ;, }, }, }, try, {, RealMatrix]
[+=, wgk, *, grad, [, l, ], ;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a]
[[, l, ], +=, wgk, *, grad, [, l, ], ;, }, }, }, try, {, RealMatrix, mA, =, new]
[], +=, wgk, *, grad, [, l, ], ;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (]
[;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a, ), ;, DecompositionSolver, solver, =, useLU, ?]
[*, grad, [, l, ], ;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a, ), ;]
[;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a, ), ;, DecompositionSolver, solver, =, useLU, ?]
[[, l, ], ;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a, ), ;, DecompositionSolver, solver]
[], ;, }, }, }, try, {, RealMatrix, mA, =, new, BlockRealMatrix, (, a, ), ;, DecompositionSolver, solver, =, useLU]
[;, DecompositionSolver, solver, =, useLU, ?, new, LUDecomposition, (, mA, ), ., getSolver, (, ), :, new, QRDecomposition, (, mA]
[), ;, DecompositionSolver, solver, =, useLU, ?, new, LUDecomposition, (, mA, ), ., getSolver, (, ), :, new, QRDecomposition, (]
[;, final, double, [, ], dX, =, solver, ., solve, (, new, ArrayRealVector, (, b, ,, false, ), ), .]
[?, new, LUDecomposition, (, mA, ), ., getSolver, (, ), :, new, QRDecomposition, (, mA, ), ., getSolver, (, )]
[:, new, QRDecomposition, (, mA, ), ., getSolver, (, ), ;, final, double, [, ], dX, =, solver, ., solve]
[., getSolver, (, ), :, new, QRDecomposition, (, mA, ), ., getSolver, (, ), ;, final, double, [, ], dX]
[), ., getSolver, (, ), :, new, QRDecomposition, (, mA, ), ., getSolver, (, ), ;, final, double, [, ]]
[;, final, double, [, ], dX, =, solver, ., solve, (, new, ArrayRealVector, (, b, ,, false, ), ), .]
[., getSolver, (, ), ;, final, double, [, ], dX, =, solver, ., solve, (, new, ArrayRealVector, (, b, ,]
[), ., getSolver, (, ), ;, final, double, [, ], dX, =, solver, ., solve, (, new, ArrayRealVector, (, b]
[;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, currentPoint, [, i, ]]
[., toArray, (, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {]
[., solve, (, new, ArrayRealVector, (, b, ,, false, ), ), ., toArray, (, ), ;, for, (, int, i]
[), ., toArray, (, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, )]
[,, false, ), ), ., toArray, (, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;]
[), ), ., toArray, (, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i]
[;, i, <, nC, ;, ++, i, ), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }]
[;, ++, i, ), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException]
[<, nC, ;, ++, i, ), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }, }, catch]
[;, ++, i, ), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException]
[), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {]
[), {, currentPoint, [, i, ], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {]
[+=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException, (, LocalizedFormats, .]
[[, i, ], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException]
[], +=, dX, [, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException, (, LocalizedFormats]
[;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_SOLVE_SINGULAR_PROBLEM, ), ;, }, if]
[[, i, ], ;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_SOLVE_SINGULAR_PROBLEM, )]
[], ;, }, }, catch, (, SingularMatrixException, e, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_SOLVE_SINGULAR_PROBLEM, ), ;, }]
[;, }, if, (, previous, !=, null, ), {, converged, =, checker, ., converged, (, iter, ,, previous, ,, current]
[), ;, }, if, (, previous, !=, null, ), {, converged, =, checker, ., converged, (, iter, ,, previous, ,]
[., UNABLE_TO_SOLVE_SINGULAR_PROBLEM, ), ;, }, if, (, previous, !=, null, ), {, converged, =, checker, ., converged, (, iter, ,]
[), {, converged, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, if, (, converged, ), {]
[!=, null, ), {, converged, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, if, (, converged]
[), {, converged, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, if, (, converged, ), {]
[=, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, if, (, converged, ), {, cost, =, computeCost]
[;, if, (, converged, ), {, cost, =, computeCost, (, currentResiduals, ), ;, point, =, current, ., getPoint, (, )]
[., converged, (, iter, ,, previous, ,, current, ), ;, if, (, converged, ), {, cost, =, computeCost, (, currentResiduals]
[,, previous, ,, current, ), ;, if, (, converged, ), {, cost, =, computeCost, (, currentResiduals, ), ;, point, =]
[,, current, ), ;, if, (, converged, ), {, cost, =, computeCost, (, currentResiduals, ), ;, point, =, current, .]
[), ;, if, (, converged, ), {, cost, =, computeCost, (, currentResiduals, ), ;, point, =, current, ., getPoint, (]
[), {, cost, =, computeCost, (, currentResiduals, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;]
[=, computeCost, (, currentResiduals, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, }]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, }, throw, new, MathInternalError, (, )]
[), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, }, throw, new, MathInternalError, (]
[=, current, ., getPoint, (, ), ;, return, current, ;, }, }, }, throw, new, MathInternalError, (, ), ;, }]
[;, return, current, ;, }, }, }, throw, new, MathInternalError, (, ), ;, }, }]
[., getPoint, (, ), ;, return, current, ;, }, }, }, throw, new, MathInternalError, (, ), ;, }, }]
[;, }, }, }, throw, new, MathInternalError, (, ), ;, }, }]
[;, }, }]
