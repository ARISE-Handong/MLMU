[Map, ;, import, java, ., util, ., Set, ;, class, AliasExternals, implements, CompilerPass, {, private, static, final, int, DEFAULT_REQUIRED_USAGE, =]
[., Set, ;, class, AliasExternals, implements, CompilerPass, {, private, static, final, int, DEFAULT_REQUIRED_USAGE, =, 4, ;, private, int, requiredUsage, =]
[private, static, final, int, DEFAULT_REQUIRED_USAGE, =, 4, ;, private, int, requiredUsage, =, DEFAULT_REQUIRED_USAGE, ;, private, static, final, int, MIN_PROP_SIZE, =]
[;, private, int, requiredUsage, =, DEFAULT_REQUIRED_USAGE, ;, private, static, final, int, MIN_PROP_SIZE, =, 4, ;, static, final, String, PROTOTYPE_PROPERTY_NAME, =]
[int, requiredUsage, =, DEFAULT_REQUIRED_USAGE, ;, private, static, final, int, MIN_PROP_SIZE, =, 4, ;, static, final, String, PROTOTYPE_PROPERTY_NAME, =, getArrayNotationNameFor, (]
[static, final, String, PROTOTYPE_PROPERTY_NAME, =, getArrayNotationNameFor, (, "prototype", ), ;, private, final, Map, <, String, ,, Symbol, >, props, =]
[static, final, String, PROTOTYPE_PROPERTY_NAME, =, getArrayNotationNameFor, (, "prototype", ), ;, private, final, Map, <, String, ,, Symbol, >, props, =]
[String, ,, Symbol, >, props, =, Maps, ., newHashMap, (, ), ;, private, final, List, <, Node, >, accessors, =]
[String, ,, Symbol, >, props, =, Maps, ., newHashMap, (, ), ;, private, final, List, <, Node, >, accessors, =]
[List, <, Node, >, accessors, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, mutators, =]
[List, <, Node, >, accessors, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, mutators, =]
[Node, >, mutators, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, Node, ,, Node, >, replacementMap, =]
[new, IdentityHashMap, <, Node, ,, Node, >, (, ), ;, private, final, Map, <, String, ,, Symbol, >, globals, =]
[new, IdentityHashMap, <, Node, ,, Node, >, (, ), ;, private, final, Map, <, String, ,, Symbol, >, globals, =]
[Node, defaultRoot, ;, private, Map, <, JSModule, ,, Node, >, moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =]
[Node, defaultRoot, ;, private, Map, <, JSModule, ,, Node, >, moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =]
[Map, <, JSModule, ,, Node, >, moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =, Sets, ., newHashSet, (]
[JSModule, ,, Node, >, moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =, Sets, ., newHashSet, (, "arguments", ,]
[Node, >, moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =, Sets, ., newHashSet, (, "arguments", ,, "eval", ,]
[moduleRoots, ;, private, final, Set, <, String, >, unaliasableGlobals, =, Sets, ., newHashSet, (, "arguments", ,, "eval", ,, "NodeFilter", ,]
[., newHashSet, (, "arguments", ,, "eval", ,, "NodeFilter", ,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =]
[., newHashSet, (, "arguments", ,, "eval", ,, "NodeFilter", ,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =]
[>, aliasableGlobals, =, Sets, ., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (]
[=, Sets, ., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (, compiler, ,]
[., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (, compiler, ,, moduleGraph, ,]
[(, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (, compiler, ,, moduleGraph, ,, null, ,]
[}, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {]
[}, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {]
[compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =]
[JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;]
[JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;]
[Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =]
[@, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (]
[@, Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (]
[Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !]
[Nullable, String, aliasableGlobals, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !]
[{, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (]
[compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&]
[=, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !]
[=, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !]
[., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (]
[if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw]
[Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (]
[Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (]
[isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +]
[Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (]
[., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !]
[., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !]
[), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (]
[new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {]
[new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {]
[new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (]
[(, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (]
[(, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (]
[isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (]
[unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (]
[., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, !]
[., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, !]
[., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (]
[., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {]
[., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {]
[., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (]
[(, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (]
[(, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (]
[isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (]
[aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (]
[aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (]
[addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=]
[., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=, null, ), {]
[(, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =]
[(, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =]
[), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {]
[), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {]
[Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {, this, ., requiredUsage, =]
[this, ., requiredUsage, =, usage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[requiredUsage, =, usage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =]
[requiredUsage, =, usage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =, root, ., getFirstChild, (, ), ;]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =, root, ., getFirstChild, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, defaultRoot, =, root, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[(, Node, externs, ,, Node, root, ), {, defaultRoot, =, root, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[{, defaultRoot, =, root, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;]
[=, root, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,]
[), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;]
[Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (]
[checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (, externs, ,]
[;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {]
[;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {]
[,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[}, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (]
[,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;]
[,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;]
[{, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (]
[., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,]
[(, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (]
[,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;]
[,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;]
[aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (]
[), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :]
[new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., name, ., length, (, ), >=]
[values, (, ), ), {, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (]
[values, (, ), ), {, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (]
[values, (, ), ), {, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (]
[{, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=]
[prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {]
[prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {]
[length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =]
[), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (]
[), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (]
[), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (]
[prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=]
[>=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {]
[>=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {]
[prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =]
[., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :]
[requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {]
[{, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor, (]
[}, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor, (, propInfo, ), ;, }, for, (, Node, propInfo, :]
[Node, propInfo, :, accessors, ), {, replaceAccessor, (, propInfo, ), ;, }, for, (, Node, propInfo, :, mutators, ), {]
[:, accessors, ), {, replaceAccessor, (, propInfo, ), ;, }, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (]
[}, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop, :]
[}, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop, :]
[replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[}, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {]
[(, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (]
[(, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (]
[props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,]
[values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (]
[values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (]
[(, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :]
[(, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :]
[deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (]
[}, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasMutator, ), {]
[(, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (]
[(, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (]
[props, ., values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,]
[values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (]
[values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (]
[prop, ., deepestModuleMutate, ), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =]
[prop, ., deepestModuleMutate, ), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =]
[private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, String, propName, =]
[private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, String, propName, =]
[Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (]
[Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (]
[Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (]
[., getLastChild, (, ), ;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (, props, ., get, (]
[., getString, (, ), ;, if, (, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =]
[., getString, (, ), ;, if, (, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =]
[(, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;]
[(, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;]
[(, propName, ), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (]
[{, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =]
[{, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =]
[getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (]
[getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (]
[(, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =]
[(, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =]
[Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (]
[=, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,]
[name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;]
[getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (]
[getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (]
[Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,]
[=, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,]
[getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;]
[getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =]
[private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, Node, parentNode, =]
[private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;, Node, parentNode, =]
[propNameNode, =, getPropNode, ., getLastChild, (, ), ;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =]
[propNameNode, =, getPropNode, ., getLastChild, (, ), ;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =]
[getLastChild, (, ), ;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =, props, ., get, (]
[getLastChild, (, ), ;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =, props, ., get, (]
[getParent, (, ), ;, Symbol, prop, =, props, ., get, (, propNameNode, ., getString, (, ), ), ;, if, (]
[getParent, (, ), ;, Symbol, prop, =, props, ., get, (, propNameNode, ., getString, (, ), ), ;, if, (]
[., get, (, propNameNode, ., getString, (, ), ), ;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =]
[., get, (, propNameNode, ., getString, (, ), ), ;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =]
[;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =]
[;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =]
[), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;]
[), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;]
[=, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (]
[getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;]
[getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;]
[Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (]
[parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;]
[parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;]
[), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (]
[propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =]
[propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =]
[., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (]
[(, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (]
[(, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (]
[Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call, =]
[Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call, =]
[., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call, =, IR, ., call, (]
[(, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call, =, IR, ., call, (, callName, ,]
[(, propNameNode, ., getString, (, ), ), ), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,]
[getString, (, ), ), ), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;]
[getString, (, ), ), ), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;]
[), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (]
[), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (]
[=, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (]
[callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,]
[Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;]
[Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;]
[), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node, after, ), {, if, (]
[), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node, after, ), {, if, (]
[private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node, after, ), {, if, (, replacementMap, ., containsKey, (]
[Node, parent, ,, Node, before, ,, Node, after, ), {, if, (, replacementMap, ., containsKey, (, parent, ), ), {]
[,, Node, before, ,, Node, after, ), {, if, (, replacementMap, ., containsKey, (, parent, ), ), {, parent, =]
[,, Node, before, ,, Node, after, ), {, if, (, replacementMap, ., containsKey, (, parent, ), ), {, parent, =]
[Node, after, ), {, if, (, replacementMap, ., containsKey, (, parent, ), ), {, parent, =, replacementMap, ., get, (]
[if, (, replacementMap, ., containsKey, (, parent, ), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }]
[if, (, replacementMap, ., containsKey, (, parent, ), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }]
[containsKey, (, parent, ), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (]
[parent, ), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,]
[{, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;]
[{, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;]
[., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (]
[(, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (, before, ,]
[before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =]
[before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =]
[;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =, IR, ., string, (]
[String, propName, ,, Node, root, ), {, Node, propValue, =, IR, ., string, (, propName, ), ;, Node, propNameNode, =]
[String, propName, ,, Node, root, ), {, Node, propValue, =, IR, ., string, (, propName, ), ;, Node, propNameNode, =]
[root, ), {, Node, propValue, =, IR, ., string, (, propName, ), ;, Node, propNameNode, =, IR, ., name, (]
[{, Node, propValue, =, IR, ., string, (, propName, ), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (]
[IR, ., string, (, propName, ), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;]
[IR, ., string, (, propName, ), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;]
[propName, ), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (]
[IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =]
[IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =]
[getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (]
[), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;]
[), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;]
[., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (]
[propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (, var, ), ;]
[propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (, var, ), ;]
[., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =]
[(, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =, getMutatorFor, (]
[addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =]
[addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =]
[String, propName, ,, Node, root, ), {, String, functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =, getMutatorFor, (]
[Node, root, ), {, String, functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =, getMutatorFor, (, propName, ), +]
[functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =]
[functionName, =, getMutatorFor, (, propName, ), ;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =]
[getMutatorFor, (, propName, ), ;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (]
[), ;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +]
[getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =]
[getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =]
[+, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (]
[+, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (]
[localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (]
[(, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,]
[(, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,]
["$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (]
["$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (]
[=, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (]
[function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,]
[function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,]
[name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (]
[,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,]
[,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,]
[(, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (]
[(, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (]
[(, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (]
[(, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (]
[IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (]
[IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (]
[localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (]
[localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (]
[IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (]
[(, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,]
[(, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,]
[(, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (]
[(, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,]
[(, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,]
[(, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (]
[,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;]
[,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;]
[(, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (]
[), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;]
[), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;]
[fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (]
[fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=]
[;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=, null, ), {, Node, root, =]
[;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=, null, ), {, Node, root, =]
[getAddingRoot, (, JSModule, m, ), {, if, (, m, !=, null, ), {, Node, root, =, moduleRoots, ., get, (]
[{, if, (, m, !=, null, ), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (]
[{, if, (, m, !=, null, ), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (]
[(, m, !=, null, ), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=]
[), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return]
[root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return, root, ;, }]
[moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return, root, ;, }, root, =]
[moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return, root, ;, }, root, =]
[m, ), ;, if, (, root, !=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (]
[root, !=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (]
[root, !=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (]
[null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=]
[return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {]
[return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {]
[root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (]
[compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m, ,]
[m, ), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m, ,, root, ), ;, return]
[root, !=, null, ), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root, ;, }, }, return]
[{, private, final, Set, <, String, >, whitelist, ;, public, GetAliasableNames, (, final, Set, <, String, >, whitelist, ), {]
[{, private, final, Set, <, String, >, whitelist, ;, public, GetAliasableNames, (, final, Set, <, String, >, whitelist, ), {]
[<, String, >, whitelist, ;, public, GetAliasableNames, (, final, Set, <, String, >, whitelist, ), {, this, ., whitelist, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||]
[;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (]
[;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (]
[(, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {]
[(, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {]
[(, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {, props, ., put, (]
[(, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {, props, ., put, (]
[(, dest, ., getString, (, ), ), ), ), {, props, ., put, (, dest, ., getString, (, ), ,]
[., getString, (, ), ), ), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (]
[., getString, (, ), ), ), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, Node, propNameNode, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, Node, propNameNode, =]
[if, (, n, ., isGetProp, (, ), ), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (]
[n, ., isGetProp, (, ), ), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (]
[isGetProp, (, ), ), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,]
[), ), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,]
[., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =]
[., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =]
[(, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[(, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[(, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (]
[), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (]
[name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (, t, ), ;]
[name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (, t, ), ;]
[getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (, t, ), ;, accessors, ., add, (]
[get, (, name, ), ., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (]
[name, ), ., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (]
[., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,]
[(, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,]
[(, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =]
[(, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =]
[(, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[(, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[(, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;]
[,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (]
[), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (]
[name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (, t, ), ;]
[name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (, t, ), ;]
[getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (, t, ), ;, mutators, ., add, (]
[}, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =]
[}, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =]
[}, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (]
[}, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (]
[propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (, parent, ., isCall, (, ), ), &&]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (, parent, ., isCall, (, ), ), &&, (]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (, parent, ., isCall, (, ), ), &&, (]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget, =, (, parent, ., isCall, (, ), ), &&, (]
[), {, boolean, isCallTarget, =, (, parent, ., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==]
[parent, ., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =]
[parent, ., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =]
[parent, ., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =]
[), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (]
[(, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (]
[getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =]
[., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (]
[., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||]
[., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (]
[., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (]
[boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return]
[boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return]
[boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return]
[boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return]
[boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return]
[isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return, (]
[isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return, (]
[), ), ||, (, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&]
[), ||, (, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !]
[(, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&]
[parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (]
[parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (]
[., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !]
[(, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||]
[), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !]
[), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (]
[!, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&]
[isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !]
[(, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&]
[(, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&]
[!, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey, (]
[!, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey, (]
[), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =]
[), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =]
[;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (]
[;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (]
[propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (, parent, ., isAssign, (, ), ), &&]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (, parent, ., isAssign, (, ), ), &&, (]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (, parent, ., isAssign, (, ), ), &&, (]
[,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (, parent, ., isAssign, (, ), ), &&, (]
[), {, boolean, isAssignTarget, =, (, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==]
[=, (, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return]
[=, (, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return]
[=, (, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return]
[(, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (]
[(, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (]
[&&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&]
[parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&]
[), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (]
[), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (]
[(, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return]
[(, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return]
[., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return, "SETPROP_", +]
[String, prop, ), {, return, "SETPROP_", +, prop, ;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return]
[String, prop, ), {, return, "SETPROP_", +, prop, ;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return]
[), {, return, "SETPROP_", +, prop, ;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return, "$$PROP_", +]
[prop, ), {, return, "$$PROP_", +, prop, ;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {]
[prop, ), {, return, "$$PROP_", +, prop, ;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {]
["$$PROP_", +, prop, ;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[prop, ;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[}, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :]
[new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (]
[new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (]
[new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (]
[), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (, global, ., mutatorCount, >]
[values, (, ), ), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =]
[values, (, ), ), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =]
[values, (, ), ), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =]
[values, (, ), ), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =]
[., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *]
[., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *]
[;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =]
[;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =]
[;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =]
[int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +]
[int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +]
[int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +]
[(, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +]
[(, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +]
[*, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *]
[*, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *]
[aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (]
[aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (]
[8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <]
[., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {]
[., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {]
[(, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =]
[if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :]
[if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :]
[;, }, }, for, (, Symbol, global, :, globals, ., values, (, ), ), {, for, (, Node, globalUse, :]
[;, }, }, for, (, Symbol, global, :, globals, ., values, (, ), ), {, for, (, Node, globalUse, :]
[Symbol, global, :, globals, ., values, (, ), ), {, for, (, Node, globalUse, :, global, ., uses, ), {]
[:, globals, ., values, (, ), ), {, for, (, Node, globalUse, :, global, ., uses, ), {, replaceGlobalUse, (]
[), {, for, (, Node, globalUse, :, global, ., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (]
[), {, for, (, Node, globalUse, :, global, ., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (]
[globalUse, :, global, ., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {]
[global, ., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (]
[uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,]
[{, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (]
[{, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (]
[NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (, NodeTraversal, t, ,, Node, dest, ,, Node, parent, ), {, if, (]
[NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (, NodeTraversal, t, ,, Node, dest, ,, Node, parent, ), {, if, (]
[,, Node, dest, ,, Node, parent, ), {, if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =]
[,, Node, dest, ,, Node, parent, ), {, if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =]
[,, Node, dest, ,, Node, parent, ), {, if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =]
[,, Node, dest, ,, Node, parent, ), {, if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =]
[), {, if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==]
[if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?]
[if, (, dest, ., isName, (, ), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?]
[), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :]
[), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :]
[(, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =]
[(, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =]
[), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !]
[), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !]
[parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (]
[parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (]
[., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&]
[getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (]
[getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (]
[getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (]
[), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==]
[boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null, ||]
[aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null, ||, !]
[aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null, ||, !]
[getString, (, ), ), &&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (]
[docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =]
[docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =]
[;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, dest, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&]
[var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, !]
[var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, !]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {]
[), ;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (]
[if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name, ,]
[var, !=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, getGlobalName, (]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, getGlobalName, (, t, ,]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, getGlobalName, (, t, ,]
[getType, (, ), ), {, case, Token, ., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,]
[Token, ., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, ), ;, break, ;, case]
[Token, ., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, ), ;, break, ;, case]
[., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =]
[., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =]
[), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=]
[case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;]
[., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =]
[., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =]
[=, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (]
[(, ), ;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,]
[;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&]
[;, if, (, var, !=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =]
[;, if, (, var, !=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =]
[!=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (]
[isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if, (]
[isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if, (]
[), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=]
[}, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null, ), {, if, (]
[}, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null, ), {, if, (]
[}, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null, ), {, if, (]
[}, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null, ), {, if, (]
[;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||]
[;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||]
[;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||]
[., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, ), ), {]
[., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, ), ), {]
[., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (]
[getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =]
[getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =]
[getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =]
[), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==]
[., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (]
[., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (]
[., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (]
[., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (]
[remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (]
[remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (]
[remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (]
[;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (]
[isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||]
[getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (]
[getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (]
[getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (]
[if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||]
[&&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||]
[&&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||]
[isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {]
[isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {]
[isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (]
[(, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {]
[(, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {]
[., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (]
[), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }]
[), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }]
[), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }]
[t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }, global, ., uses, ., add, (]
[add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =]
[add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =]
[}, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString, (, ), ;, if, (]
[}, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString, (, ), ;, if, (]
[}, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString, (, ), ;, if, (]
[(, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString, (, ), ;, if, (, globals, ., get, (]
[globalName, =, globalUse, ., getString, (, ), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {]
[globalName, =, globalUse, ., getString, (, ), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {]
[getString, (, ), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (]
[getString, (, ), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (]
[), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +]
[(, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;]
[(, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;]
[(, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (]
[(, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (]
[aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;]
[globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;]
[reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName, =]
[reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName, =]
[void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName, =, global, ., name, ;, Node, globalValue, =]
[void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName, =, global, ., name, ;, Node, globalValue, =]
[global, ,, Node, root, ), {, String, globalName, =, global, ., name, ;, Node, globalValue, =, IR, ., name, (]
[global, ,, Node, root, ), {, String, globalName, =, global, ., name, ;, Node, globalValue, =, IR, ., name, (]
[{, String, globalName, =, global, ., name, ;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;]
[{, String, globalName, =, global, ., name, ;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;]
[global, ., name, ;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (]
[global, ., name, ;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (]
[Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =]
[., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =]
[globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (]
[globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (]
[putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +]
[., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;]
[., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;]
[., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (]
[=, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =]
[=, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =]
[(, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (]
[globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;]
[globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;]
[., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (]
[globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (, var, ), ;]
[globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (, var, ), ;]
[(, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (]
[;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, ., getString, (, ), ,]
[;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, ., getString, (, ), ,]
[newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, ., getString, (, ), ,, name, ., getBooleanProp, (]
[newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, ., getString, (, ), ,, name, ., getBooleanProp, (]
[name, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return]
[(, Node, ., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (]
[., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (, name, ,]
[(, name, ,, false, ), ;, }, private, class, Symbol, {, public, final, String, name, ;, public, int, accessorCount, =]
[}, private, class, Symbol, {, public, final, String, name, ;, public, int, accessorCount, =, 0, ;, public, int, mutatorCount, =]
[final, String, name, ;, public, int, accessorCount, =, 0, ;, public, int, mutatorCount, =, 0, ;, public, boolean, aliasMutator, =]
[accessorCount, =, 0, ;, public, int, mutatorCount, =, 0, ;, public, boolean, aliasMutator, =, false, ;, public, boolean, aliasAccessor, =]
[public, boolean, aliasMutator, =, false, ;, public, boolean, aliasAccessor, =, false, ;, public, final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =]
[;, public, boolean, aliasAccessor, =, false, ;, public, final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =, null, ;, JSModule, deepestModuleMutate, =]
[final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =, null, ;, JSModule, deepestModuleMutate, =, null, ;, List, <, Node, >, uses, =]
[final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =, null, ;, JSModule, deepestModuleMutate, =, null, ;, List, <, Node, >, uses, =]
[Node, >, uses, =, Lists, ., newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {]
[Node, >, uses, =, Lists, ., newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {]
[Lists, ., newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =]
[newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =, name, ;]
[newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =, name, ;]
[private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =, name, ;, this, ., isConstant, =]
[this, ., name, =, name, ;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {]
[this, ., name, =, name, ;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {]
[;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (]
[;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (]
[., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=]
[isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {]
[}, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =]
[}, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =]
[void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (]
[void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (]
[(, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==]
[), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?]
[), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?]
[(, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :]
[(, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :]
[), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,]
[getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {]
[getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {]
[(, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (]
[(, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (]
[,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=]
[;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {]
[}, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =]
[}, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =]
[void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (]
[void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (]
[(, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==]
[), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?]
[), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?]
[(, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :]
[(, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :]
[), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,]
