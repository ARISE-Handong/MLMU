[;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Node, >, stringNodesToRename, =, Lists, ., newArrayList, (, ), ;]
[., getLogger, (, AmbiguateProperties, ., class, ., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, List]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Node, >, stringNodesToRename, =, Lists, ., newArrayList, (, )]
[., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Node, >, stringNodesToRename, =, Lists]
[;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >, propertyMap, =, Maps, .]
[., newArrayList, (, ), ;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >]
[;, private, final, Set, <, String, >, externedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String]
[., newHashMap, (, ), ;, private, final, Set, <, String, >, externedNames, =, Sets, ., newHashSet, (, ), ;, private]
[;, private, final, Set, <, String, >, quotedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Map, <, String]
[., newHashSet, (, ), ;, private, final, Set, <, String, >, quotedNames, =, Sets, ., newHashSet, (, ), ;, private]
[;, private, final, Map, <, String, ,, String, >, renamingMap, =, Maps, ., newHashMap, (, ), ;, private, static, final]
[., newHashSet, (, ), ;, private, final, Map, <, String, ,, String, >, renamingMap, =, Maps, ., newHashMap, (, )]
[;, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Property, >, (, ), {, @, Override]
[., newHashMap, (, ), ;, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Property, >, (]
[;, private, BiMap, <, JSType, ,, Integer, >, intForType, =, HashBiMap, ., create, (, ), ;, private, Map, <, JSType]
[), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2]
[!=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName]
[., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1]
[), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2]
[., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo]
[;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <]
[-, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }]
[., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;]
[;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <]
[., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private]
[;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =, HashBiMap, ., create, (, ), ;, private]
[., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =]
[., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >]
[), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =, HashBiMap, ., create, (, ), ;]
[., oldName, ), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =, HashBiMap, ., create, (]
[;, private, Map, <, JSType, ,, JSTypeBitSet, >, relatedBitsets, =, Maps, ., newHashMap, (, ), ;, private, final, Set, <]
[., create, (, ), ;, private, Map, <, JSType, ,, JSTypeBitSet, >, relatedBitsets, =, Maps, ., newHashMap, (, ), ;]
[;, private, final, Set, <, JSType, >, invalidatingTypes, ;, static, final, String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler]
[., newHashMap, (, ), ;, private, final, Set, <, JSType, >, invalidatingTypes, ;, static, final, String, SKIP_PREFIX, =, "JSAbstractCompiler", ;]
[;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (]
[;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;]
[), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry]
[., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =]
[=, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =]
[., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, .]
[=, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, .]
[., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (]
[;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[=, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, .]
[;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis]
[., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, )]
[,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,]
[., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,]
[., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,]
[., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r]
[., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,]
[., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS]
[,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,]
[., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,]
[., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r]
[., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType]
[), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), )]
[., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE]
[,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (]
[., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator]
[., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), .]
[), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType]
[., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), )]
[), {, addInvalidatingType, (, mis, ., typeA, ), ;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void]
[., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ), ;, addInvalidatingType, (, mis, ., typeB, ), ;]
[., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ), ;, addInvalidatingType, (, mis]
[;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =]
[), ;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type]
[., typeA, ), ;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, )]
[;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if]
[), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;]
[., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType]
[., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add, (, type, ), ;]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add]
[;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;]
[), ;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, )]
[;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType]
[., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, .]
[;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType, .]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes]
[), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType]
[), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }, }, Map, <, String, ,, String]
[&&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }]
[!=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), )]
[&&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }]
[), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }, }, Map, <, String, ,, String]
[., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }, }, Map]
[;, }, }, Map, <, String, ,, String, >, getRenamingMap, (, ), {, return, renamingMap, ;, }, private, int, getIntForType]
[., add, (, objType, ., getImplicitPrototype, (, ), ), ;, }, }, Map, <, String, ,, String, >, getRenamingMap, (]
[), ;, }, }, Map, <, String, ,, String, >, getRenamingMap, (, ), {, return, renamingMap, ;, }, private, int]
[., getImplicitPrototype, (, ), ), ;, }, }, Map, <, String, ,, String, >, getRenamingMap, (, ), {, return, renamingMap]
[;, }, private, int, getIntForType, (, JSType, type, ), {, if, (, intForType, ., containsKey, (, type, ), ), {]
[), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType, .]
[., containsKey, (, type, ), ), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }]
[), ), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType]
[;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, ., put, (, type, ,, newInt]
[., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, ., put]
[., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +]
[), ., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, .]
[;, intForType, ., put, (, type, ,, newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (]
[+, 1, ;, intForType, ., put, (, type, ,, newInt, ), ;, return, newInt, ;, }, @, Override, public, void]
[., size, (, ), +, 1, ;, intForType, ., put, (, type, ,, newInt, ), ;, return, newInt, ;, }]
[;, intForType, ., put, (, type, ,, newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (]
[;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, .]
[., put, (, type, ,, newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs]
[,, newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[), ;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames]
[., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (]
[,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >]
[;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames]
[., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new]
[,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >]
[,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;]
[), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0]
[+, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames]
[., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames]
[), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0]
[., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;]
[;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <]
[., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames]
[), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set]
[;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >, propsByFreq, =, new, TreeSet, <]
[., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >]
[), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >, propsByFreq, =, new, TreeSet]
[;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, )]
[;, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p]
[;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, )]
[), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating]
[), {, if, (, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;]
[., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add]
[), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, .]
[), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, .]
[., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;]
[;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, .]
[;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, .]
[;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph]
[., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, )]
[), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph]
[;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, .]
[;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, .]
[;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, ., newLinkedList, (, propsByFreq, ), ), ;, GraphColoring, <, Property]
[., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, ., newLinkedList, (]
[), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, ., newLinkedList, (, propsByFreq, ), ), ;, GraphColoring, <]
[., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, ., newLinkedList, (, propsByFreq, ), ), ;]
[;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,, FREQUENCY_COMPARATOR]
[), ;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,]
[., newLinkedList, (, propsByFreq, ), ), ;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,]
[), ), ;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph]
[;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,]
[,, FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames]
[), ;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, ""]
[;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, Map, <, Integer, ,, String, >]
[., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, Map, <]
[;, Map, <, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =]
[,, "", ,, reservedCharacters, ), ;, Map, <, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;]
[,, reservedCharacters, ), ;, Map, <, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (]
[), ;, Map, <, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (]
[., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {]
[;, i, <, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, )]
[;, ++, i, ), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for]
[<, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;]
[;, ++, i, ), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for]
[), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <]
[), {, colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <]
[;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes, (, ), ), {, node]
[., put, (, i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <, Property, ,, Void]
[,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph]
[), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes, (, ), ), {]
[., generateNextName, (, ), ), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes]
[), {, node, ., getValue, (, ), ., newName, =, colorMap, ., get, (, node, ., getAnnotation, (, ), .]
[., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =, colorMap, ., get, (, node, .]
[=, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (]
[., newName, =, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, .]
[., getValue, (, ), ., newName, =, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, )]
[;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,, node, ., getValue, (, ), ., newName]
[., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (, node, .]
[), ;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,, node, ., getValue, (, ), .]
[., hashCode, (, ), ), ;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,, node, .]
[., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (, node, ., getValue, (, ), .]
[;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property]
[., put, (, node, ., getValue, (, ), ., oldName, ,, node, ., getValue, (, ), ., newName, ), ;]
[,, node, ., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String]
[., oldName, ,, node, ., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, )]
[., getValue, (, ), ., oldName, ,, node, ., getValue, (, ), ., newName, ), ;, }, for, (, Node]
[), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;]
[., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (]
[., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, )]
[;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName]
[., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null]
[;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, .]
[., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions]
[), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !, p]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[!=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, .]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !, p]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !, p]
[;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (, p, .]
[., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !, p, ., newName, .]
[), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (, p]
[., equals, (, p, ., oldName, ), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, )]
[), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (]
[., oldName, ), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, .]
[), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., equals, (, oldName, ), ), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (]
[., newName, ., equals, (, oldName, ), ), {, n, ., setString, (, p, ., newName, ), ;, compiler, .]
[), ), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +]
[., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into "]
[., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames]
[;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +]
[., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +]
[;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), ), {]
[., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private]
[), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), )]
[+, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type]
[+, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey]
[+, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets]
[+, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if]
[+, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, )]
[+, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType]
[+, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, )]
[+, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if]
[+, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets]
[+, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey]
[+, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type]
[), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), )]
[), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: "]
[., containsKey, (, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new]
[), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +]
[;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +, type, +, " but have not been.", ), ;, }, }, private]
[., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +, type, +, " but have not been."]
[), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +, type, +, " but have not been.", ), ;, }, }]
[;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {]
[), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), )]
[+, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (]
[+, type, +, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, .]
[+, " type: ", +, type, +, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (]
[+, type, +, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, .]
[+, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (]
[), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), )]
[), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for]
[., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, computeRelatedTypes, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }, if, (, relatedBitsets, ., containsKey, (, type, )]
[., getAlternates, (, ), ), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }, if, (, relatedBitsets, .]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }]
[;, }, return, ;, }, }, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, ;, }, JSTypeBitSet]
[), ;, }, return, ;, }, }, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, ;, }]
[), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets, .]
[., containsKey, (, type, ), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (]
[), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets]
[;, relatedBitsets, ., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (, type, ), ), ;]
[), ;, relatedBitsets, ., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (, type, ), )]
[., size, (, ), ), ;, relatedBitsets, ., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType]
[;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {]
[., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (]
[,, related, ), ;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (]
[), ;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), )]
[;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, ), type, ), ., getOwnerFunction]
[., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (]
[), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, ), type, ), .]
[), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, ), type, )]
[), {, addRelatedInstance, (, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;]
[., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related]
[;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor]
[,, related, ), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;]
[., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), .]
[), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, )]
[), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, )]
[), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (]
[;, if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType]
[., getConstructor, (, ), ;, if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=, null, ), {]
[., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, )]
[), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, )]
[&&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, )]
[!=, null, &&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes]
[&&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, )]
[), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, )]
[!=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,]
[., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {]
[), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, )]
[), {, addRelatedInstance, (, subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (]
[., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :]
[;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (]
[,, related, ), ;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type]
[), ;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType]
[), {, addRelatedInstance, (, implementor, ,, related, ), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related]
[., getDirectImplementors, (, type, ., toObjectType, (, ), ), ), {, addRelatedInstance, (, implementor, ,, related, ), ;, }, }]
[., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (, ), ), ), {, addRelatedInstance, (, implementor, ,, related]
[), ), {, addRelatedInstance, (, implementor, ,, related, ), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet]
[., toObjectType, (, ), ), ), {, addRelatedInstance, (, implementor, ,, related, ), ;, }, }, private, void, addRelatedInstance, (]
[;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (, constructor, ., hasInstanceType, (]
[,, related, ), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (, constructor]
[), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (, constructor, ., hasInstanceType]
[), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype]
[., hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;, related, ., set, (, getIntForType]
[;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;]
[., getInstanceType, (, ), ;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes]
[;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;, }, }]
[., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, .]
[), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;, }]
[), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;]
[., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (, relatedBitsets, ., get, (]
[;, related, ., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <]
[), ;, related, ., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph]
[;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected, final, Map, <, Property, ,, PropertyGraphNode]
[., or, (, relatedBitsets, ., get, (, instanceType, ), ), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,]
[), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected, final, Map, <, Property, ,]
[., get, (, instanceType, ), ), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected]
[), ), ;, }, }, class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected, final, Map, <, Property]
[;, PropertyGraph, (, Collection, <, Property, >, props, ), {, for, (, Property, prop, :, props, ), {, nodes, .]
[., newHashMap, (, ), ;, PropertyGraph, (, Collection, <, Property, >, props, ), {, for, (, Property, prop, :, props]
[), {, nodes, ., put, (, prop, ,, new, PropertyGraphNode, (, prop, ), ), ;, }, }, @, Override, public]
[;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void, >, >, getNodes, (, ), {, return]
[., put, (, prop, ,, new, PropertyGraphNode, (, prop, ), ), ;, }, }, @, Override, public, List, <, GraphNode]
[,, new, PropertyGraphNode, (, prop, ), ), ;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void]
[), ;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void, >, >, getNodes, (, ), {]
[), ), ;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void, >, >, getNodes, (, )]
[;, }, @, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property, ), {, return, nodes, .]
[., <, GraphNode, <, Property, ,, Void, >, >, newArrayList, (, nodes, ., values, (, ), ), ;, }, @]
[), ;, }, @, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property, ), {, return, nodes]
[., values, (, ), ), ;, }, @, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property]
[;, }, @, Override, public, SubGraph, <, Property, ,, Void, >, newSubGraph, (, ), {, return, new, PropertySubGraph, (, )]
[., get, (, property, ), ;, }, @, Override, public, SubGraph, <, Property, ,, Void, >, newSubGraph, (, ), {]
[), ;, }, @, Override, public, SubGraph, <, Property, ,, Void, >, newSubGraph, (, ), {, return, new, PropertySubGraph, (]
[;, }, @, Override, public, void, clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :, nodes, ., values, (, )]
[), {, node, ., setAnnotation, (, null, ), ;, }, }, @, Override, public, int, getWeight, (, Property, value, )]
[., values, (, ), ), {, node, ., setAnnotation, (, null, ), ;, }, }, @, Override, public, int, getWeight]
[;, }, }, @, Override, public, int, getWeight, (, Property, value, ), {, return, value, ., numOccurrences, ;, }, }]
[., setAnnotation, (, null, ), ;, }, }, @, Override, public, int, getWeight, (, Property, value, ), {, return, value]
[), ;, }, }, @, Override, public, int, getWeight, (, Property, value, ), {, return, value, ., numOccurrences, ;, }]
[;, }, }, class, PropertySubGraph, implements, SubGraph, <, Property, ,, Void, >, {, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (, intForType]
[., numOccurrences, ;, }, }, class, PropertySubGraph, implements, SubGraph, <, Property, ,, Void, >, {, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet]
[;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !, relatedTypes, ., intersects, (, prop, ., relatedTypes]
[), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !, relatedTypes, ., intersects, (, prop, .]
[., size, (, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !, relatedTypes, .]
[;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (, prop, ., relatedTypes, )]
[;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (, prop, ., relatedTypes, )]
[., intersects, (, prop, ., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes]
[), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (, prop, ., relatedTypes]
[., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (, prop]
[;, }, }, class, PropertyGraphNode, implements, GraphNode, <, Property, ,, Void, >, {, Property, property, ;, protected, Annotation, annotation, ;]
[., or, (, prop, ., relatedTypes, ), ;, }, }, class, PropertyGraphNode, implements, GraphNode, <, Property, ,, Void, >, {]
[), ;, }, }, class, PropertyGraphNode, implements, GraphNode, <, Property, ,, Void, >, {, Property, property, ;, protected, Annotation, annotation]
[., relatedTypes, ), ;, }, }, class, PropertyGraphNode, implements, GraphNode, <, Property, ,, Void, >, {, Property, property, ;, protected]
[=, property, ;, }, @, Override, public, Property, getValue, (, ), {, return, property, ;, }, @, Override, @, SuppressWarnings]
[., property, =, property, ;, }, @, Override, public, Property, getValue, (, ), {, return, property, ;, }, @, Override]
[;, }, @, Override, public, Property, getValue, (, ), {, return, property, ;, }, @, Override, @, SuppressWarnings, (, "unchecked"]
[;, }, @, Override, @, SuppressWarnings, (, "unchecked", ), public, <, A, extends, Annotation, >, A, getAnnotation, (, ), {]
[public, <, A, extends, Annotation, >, A, getAnnotation, (, ), {, return, (, A, ), annotation, ;, }, @, Override]
[), public, <, A, extends, Annotation, >, A, getAnnotation, (, ), {, return, (, A, ), annotation, ;, }, @]
[;, }, @, Override, public, void, setAnnotation, (, Annotation, data, ), {, annotation, =, data, ;, }, }, private, class]
[;, }, @, Override, public, void, setAnnotation, (, Annotation, data, ), {, annotation, =, data, ;, }, }, private, class]
[=, data, ;, }, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[;, }, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), .]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, externedNames, ., add, (, dest, .]
[., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, externedNames, ., add, (]
[;, externedNames, ., add, (, dest, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for]
[., getNext, (, ), ;, externedNames, ., add, (, dest, ., getString, (, ), ), ;, break, ;, case, Token]
[., getFirstChild, (, ), ., getNext, (, ), ;, externedNames, ., add, (, dest, ., getString, (, ), ), ;]
[;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child]
[., add, (, dest, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, .]
[:, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, .]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, .]
[;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), )]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (]
[;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), )]
[=, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }]
[), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, }, private]
[., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;]
[;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends]
[), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[., getString, (, ), ), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, {, @, Override]
[), {, case, Token, ., GETPROP, :, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, {, Node, propNode, =, n, ., getFirstChild, (, )]
[:, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (]
[., GETPROP, :, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =]
[;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t]
[., getNext, (, ), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode]
[., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), )]
[;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (]
[), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for]
[., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t, ), ;, break, ;, }, case, Token]
[;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[,, jstype, ,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n]
[,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild]
[), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, )]
[:, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, )]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[=, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype]
[), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild]
[., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType]
[), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,]
[), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,]
[., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (]
[;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {, quotedNames, ., add, (, key, ., getString]
[), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {, quotedNames, ., add, (, key, .]
[., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {, quotedNames, .]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[,, jstype, ,, t, ), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;]
[,, t, ), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }]
[), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;]
[;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if]
[., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node]
[), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;]
[., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, .]
[:, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {, quotedNames]
[., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), )]
[;, if, (, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), )]
[., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, .]
[), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, private, void]
[., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;]
[;, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ,, JSType, type, ,, NodeTraversal, t, ), {]
[., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node]
[), ;, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ,, JSType, type, ,, NodeTraversal, t, )]
[., getString, (, ), ), ;, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ,, JSType, type]
[;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty]
[., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (]
[), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (, name, ,, type, ), ;, }, }, private, Property]
[), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (, name, ,, type, ), ;, }, }, private, Property]
[., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (, name, ,, type, )]
[), ), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (, name, ,, type, ), ;, }, }, private]
[;, recordProperty, (, name, ,, type, ), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, )]
[., add, (, n, ), ;, recordProperty, (, name, ,, type, ), ;, }, }, private, Property, recordProperty, (, String]
[), ;, recordProperty, (, name, ,, type, ), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type]
[;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (, name]
[,, type, ), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =]
[), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (]
[;, prop, ., addType, (, type, ), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, )]
[), ;, prop, ., addType, (, type, ), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type]
[;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType, (]
[., addType, (, type, ), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if]
[), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType]
[;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {]
[), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for]
[., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, type]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, if, (, isInvalidatingType, (, alt, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[., getAlternates, (, ), ), {, if, (, isInvalidatingType, (, alt, ), ), {, return, true, ;, }, }, return]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, isInvalidatingType, (, alt, ), ), {, return, true]
[), {, return, true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type]
[), ), {, return, true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (]
[;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType]
[;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, .]
[;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||]
[., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType]
[), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, )]
[;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;]
[||, objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop]
[||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (]
[||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null]
[||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType]
[||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||]
[||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, )]
[==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType]
[||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, )]
[||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||]
[., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType]
[), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, )]
[||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType]
[||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType]
[., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType]
[||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null]
[., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo]
[||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (]
[., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null, ;, }]
[||, objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop]
[., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name]
[;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;]
[!=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name]
[., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap]
[;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (]
[., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, )]
[), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put]
[), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, }]
[==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, )]
[), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, }]
[=, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, }, return, prop, ;]
[;, propertyMap, ., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node]
[), ;, propertyMap, ., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (]
[;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType]
[., put, (, name, ,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, )]
[,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, .]
[;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if]
[;, if, (, jsType, ==, null, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE]
[., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType]
[), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, {, return]
[==, null, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else]
[), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, {, return]
[;, }, else, {, return, jsType, ;, }, }, private, class, Property, {, final, String, oldName, ;, String, newName, ;]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, class, Property, {]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }]
[), ;, }, else, {, return, jsType, ;, }, }, private, class, Property, {, final, String, oldName, ;, String, newName]
[., UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, class, Property, {, final, String, oldName, ;]
[;, }, }, private, class, Property, {, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, boolean, skipAmbiguating, ;]
[;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (, name, ., startsWith, (, SKIP_PREFIX]
[), ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (, name, ., startsWith, (]
[., size, (, ), ), ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (]
[=, name, ;, if, (, name, ., startsWith, (, SKIP_PREFIX, ), ), {, skipAmbiguating, =, true, ;, }, }, void]
[., oldName, =, name, ;, if, (, name, ., startsWith, (, SKIP_PREFIX, ), ), {, skipAmbiguating, =, true, ;, }]
[;, if, (, name, ., startsWith, (, SKIP_PREFIX, ), ), {, skipAmbiguating, =, true, ;, }, }, void, addType, (]
[), {, skipAmbiguating, =, true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {]
[., startsWith, (, SKIP_PREFIX, ), ), {, skipAmbiguating, =, true, ;, }, }, void, addType, (, JSType, newType, ), {]
[), ), {, skipAmbiguating, =, true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, )]
[=, true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }]
[;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }, ++, numOccurrences]
[), {, return, ;, }, ++, numOccurrences, ;, if, (, newType, ., isUnionType, (, ), ), {, newType, =, newType]
[;, if, (, newType, ., isUnionType, (, ), ), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[;, if, (, newType, ., isUnionType, (, ), ), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for]
[., isUnionType, (, ), ), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (]
[=, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt]
[;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, newType, ., toMaybeUnionType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, newType]
[), {, for, (, JSType, alt, :, newType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addNonUnionType, (]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, newType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, addNonUnionType, (, alt, ), ;, }, return, ;, }, }, addNonUnionType, (, newType, ), ;, }, private, void]
[., getAlternates, (, ), ), {, addNonUnionType, (, alt, ), ;, }, return, ;, }, }, addNonUnionType, (, newType, )]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addNonUnionType, (, alt, ), ;, }, return, ;, }, }]
[;, }, return, ;, }, }, addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {]
[), ;, }, return, ;, }, }, addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, )]
[;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {]
[), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), )]
[), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, )]
[||, isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get]
[), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, )]
[), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType]
[=, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {]
[;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (]
[), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }, }]
[), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }, }]
[., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion]
[), ), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }]
[), ), ), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }]
[;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {]
[), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet]
[;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, JSTypeBitSet]
[., or, (, getRelatedTypesOnNonUnion, (, newType, ), ), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {, private, static]
[), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {, private, static, final, long, serialVersionUID, =, 1L, ;, private]
[), ), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {, private, static, final, long, serialVersionUID, =, 1L, ;]
[;, private, JSTypeBitSet, (, int, size, ), {, super, (, size, ), ;, }, private, JSTypeBitSet, (, ), {, super]
[), ;, }, private, JSTypeBitSet, (, ), {, super, (, ), ;, }, @, Override, public, String, toString, (, )]
[;, int, current, =, 0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (]
[;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -, 1, !=, (, current]
[;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (]
[., newArrayList, (, ), ;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {]
[), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, )]
[!=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (, intForType, ., inverse, (, )]
[!=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (, intForType, ., inverse, (, )]
[), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, )]
[=, nextSetBit, (, from, ), ), ), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (]
[), ), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (]
[), ), ), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString]
[;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types, )]
[., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;, from]
[), ;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types]
[., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (, " && ", )]
[., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return, Joiner]
[., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +, 1]
[), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (, " && "]
[=, current, +, 1, ;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types, ), ;, }]
[;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types, ), ;, }, }, }]
[+, 1, ;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types, ), ;, }, }, }]
[;, }, return, Joiner, ., on, (, " && ", ), ., join, (, types, ), ;, }, }, }]
[;, }, }, }]
[., join, (, types, ), ;, }, }, }]
[., on, (, " && ", ), ., join, (, types, ), ;, }, }, }]
[), ., join, (, types, ), ;, }, }, }]
[), ;, }, }, }]
