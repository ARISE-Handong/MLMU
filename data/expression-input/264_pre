[Nullable, ;, abstract, class, AbstractCommandLineRunner, <, A, extends, Compiler, ,, B, extends, CompilerOptions, >, {, static, final, DiagnosticType, OUTPUT_SAME_AS_INPUT_ERROR, =]
[Nullable, ;, abstract, class, AbstractCommandLineRunner, <, A, extends, Compiler, ,, B, extends, CompilerOptions, >, {, static, final, DiagnosticType, OUTPUT_SAME_AS_INPUT_ERROR, =]
[AbstractCommandLineRunner, <, A, extends, Compiler, ,, B, extends, CompilerOptions, >, {, static, final, DiagnosticType, OUTPUT_SAME_AS_INPUT_ERROR, =, DiagnosticType, ., error, (]
[A, extends, Compiler, ,, B, extends, CompilerOptions, >, {, static, final, DiagnosticType, OUTPUT_SAME_AS_INPUT_ERROR, =, DiagnosticType, ., error, (, "JSC_OUTPUT_SAME_AS_INPUT_ERROR", ,]
[private, A, compiler, ;, private, Charset, inputCharset, ;, private, Charset, outputCharset2, ;, private, String, legacyOutputCharset, ;, private, boolean, testMode, =]
[private, String, legacyOutputCharset, ;, private, boolean, testMode, =, false, ;, private, Supplier, <, List, <, SourceFile, >, >, externsSupplierForTesting, =]
[<, List, <, SourceFile, >, >, externsSupplierForTesting, =, null, ;, private, Supplier, <, List, <, SourceFile, >, >, inputsSupplierForTesting, =]
[<, List, <, SourceFile, >, >, inputsSupplierForTesting, =, null, ;, private, Supplier, <, List, <, JSModule, >, >, modulesSupplierForTesting, =]
[Supplier, <, List, <, JSModule, >, >, modulesSupplierForTesting, =, null, ;, private, Function, <, Integer, ,, Boolean, >, exitCodeReceiverForTesting, =]
[private, Function, <, Integer, ,, Boolean, >, exitCodeReceiverForTesting, =, null, ;, private, Map, <, String, ,, String, >, rootRelativePathsMap, =]
[private, Map, <, String, ,, String, >, rootRelativePathsMap, =, null, ;, private, Map, <, String, ,, String, >, parsedModuleWrappers, =]
[=, null, ;, private, Map, <, String, ,, String, >, parsedModuleWrappers, =, null, ;, private, static, final, int, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, =]
[String, >, parsedModuleWrappers, =, null, ;, private, static, final, int, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, =, 100, ;, private, static, final, String, OUTPUT_MARKER, =]
[final, int, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, =, 100, ;, private, static, final, String, OUTPUT_MARKER, =, "%output%", ;, private, static, final, String, OUTPUT_MARKER_JS_STRING, =]
[static, final, String, OUTPUT_MARKER, =, "%output%", ;, private, static, final, String, OUTPUT_MARKER_JS_STRING, =, "%output|jsstring%", ;, private, final, RunTimeStats, runTimeStats, =]
[OUTPUT_MARKER_JS_STRING, =, "%output|jsstring%", ;, private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner, (, ), {, this, (]
[OUTPUT_MARKER_JS_STRING, =, "%output|jsstring%", ;, private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner, (, ), {, this, (]
[private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner, (, ), {, this, (, System, ., out, ,]
[private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner, (, ), {, this, (, System, ., out, ,]
[(, System, ., out, ,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {]
[(, System, ., out, ,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {]
[,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =]
[;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig, (, ), ;]
[;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig, (, ), ;]
[PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =]
[PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =]
[err, ), {, this, ., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (]
[this, ., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;]
[this, ., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;]
[new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =]
[new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =]
[;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =, Preconditions, ., checkNotNull, (]
[inputsSupplier, ,, Supplier, <, List, <, JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {]
[inputsSupplier, ,, Supplier, <, List, <, JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {]
[List, <, JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (]
[List, <, JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (]
[List, <, JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (]
[JSModule, >, >, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==]
[>, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^]
[>, modulesSupplier, ,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^]
[,, Function, <, Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==]
[Integer, ,, Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;]
[Boolean, >, exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =]
[exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;]
[exitCodeReceiver, ), {, Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;]
[., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =]
[(, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;]
[(, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;]
[^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =]
[==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;]
[==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;]
[testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =]
[true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;]
[true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;]
[externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =]
[this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return]
[exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }, protected, CommandLineConfig, getCommandLineConfig, (, ), {, return]
[A, createCompiler, (, ), ;, protected, abstract, B, createOptions, (, ), ;, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (]
[A, createCompiler, (, ), ;, protected, abstract, B, createOptions, (, ), ;, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (]
[(, ), ;, protected, abstract, B, createOptions, (, ), ;, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (, compiler, ==]
[abstract, B, createOptions, (, ), ;, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (, compiler, ==, null, ), {, return]
[DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (, compiler, ==, null, ), {, return, new, DiagnosticGroups, (, ), ;, }, return]
[DiagnosticGroups, getDiagnosticGroups, (, ), {, if, (, compiler, ==, null, ), {, return, new, DiagnosticGroups, (, ), ;, }, return]
[boolean, manageClosureDependencies, ,, boolean, onlyClosureDependencies, ,, boolean, processCommonJSModules, ,, List, <, String, >, closureEntryPoints, ), throws, FlagUsageException, {, if, (]
[,, boolean, processCommonJSModules, ,, List, <, String, >, closureEntryPoints, ), throws, FlagUsageException, {, if, (, onlyClosureDependencies, ), {, if, (]
[,, boolean, processCommonJSModules, ,, List, <, String, >, closureEntryPoints, ), throws, FlagUsageException, {, if, (, onlyClosureDependencies, ), {, if, (]
[closureEntryPoints, ), throws, FlagUsageException, {, if, (, onlyClosureDependencies, ), {, if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw]
[FlagUsageException, {, if, (, onlyClosureDependencies, ), {, if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
[FlagUsageException, {, if, (, onlyClosureDependencies, ), {, if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
[if, (, onlyClosureDependencies, ), {, if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +]
[if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return]
[if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return]
[if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return]
[if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return]
[if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return]
[), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (]
[(, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (]
[;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[(, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (]
[}, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[(, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (]
[(, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||]
[(, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||]
[(, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||]
[false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >]
[(, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return]
[(, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return]
[(, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return]
[(, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return]
[(, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return]
[(, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (]
[size, (, ), >, 0, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[(, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (]
[true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return]
[}, return, null, ;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =]
[void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =, getDiagnosticGroups, (, ), ;, if, (]
[void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =, getDiagnosticGroups, (, ), ;, if, (]
[void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =, getDiagnosticGroups, (, ), ;, if, (]
[options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =, getDiagnosticGroups, (, ), ;, if, (, config, ., warningGuards, !=]
[getDiagnosticGroups, (, ), ;, if, (, config, ., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :]
[getDiagnosticGroups, (, ), ;, if, (, config, ., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :]
[getDiagnosticGroups, (, ), ;, if, (, config, ., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :]
[., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {]
[., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {]
[), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (]
[for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,]
[for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,]
[Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,]
[Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,]
[{, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (]
[diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (, !]
[diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (, !]
[diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (, !]
[,, entry, ., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {]
[,, entry, ., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {]
[), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (]
[), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (]
[if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (]
[config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (]
[config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (]
[{, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }]
[., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (]
[., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (]
[., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,]
[(, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,]
[(, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;]
[(, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;]
[), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (]
[), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (]
[createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;]
[config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (]
[config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (]
[options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,]
[false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,]
[(, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =]
[., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (]
[., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (]
[createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,]
[createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,]
[tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,]
[tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,]
[true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,]
[true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,]
[(, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (]
[(, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (]
[., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=]
[config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {]
[config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {]
[config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (]
[config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }]
[config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }]
[;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =]
[;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =]
[!=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;]
[!=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;]
[options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (]
[options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (]
[), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;]
[), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;]
[., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (]
[., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (]
[jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;]
[jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;]
[setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (]
[., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;]
[), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =]
[), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =]
[setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =]
[summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;]
[;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =]
[(, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;]
[), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =]
[outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (]
[outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (]
[outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (]
[outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (]
[getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, ), >]
[=, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, ), >, 0, ), {, if, (]
[=, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, ), >, 0, ), {, if, (]
[(, config, ., jsOutputFile, ., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw]
[jsOutputFile, ., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (]
[jsOutputFile, ., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (]
[length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +]
[if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (]
[if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (]
[if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (]
[skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&]
[skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&]
[(, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw]
[" cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (]
[" cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (]
[;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +]
[., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (]
[., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (]
[., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (]
[., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&]
[., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&]
[FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw]
[+, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (]
[+, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (]
[), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +]
[., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (]
[., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (]
[., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (]
[., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (]
[throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >]
[(, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {]
[(, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {]
[), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =]
[), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =]
[config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }]
[config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }]
[length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =]
[length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =]
[0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;]
[0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;]
[., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =]
[., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =]
[;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (]
[}, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !]
[}, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !]
[}, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !]
[., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (]
[., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {]
[., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {]
[., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =]
[., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =]
[(, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (]
[(, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (]
["", ), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (]
[), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !]
[), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !]
[), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !]
[=, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (]
[(, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {]
[(, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {]
[), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =]
[), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =]
[(, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (]
[(, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (]
["", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (]
["", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (]
["", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (]
["", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (]
[VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, ., languageIn, ., length, (, ), >]
[;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =]
[;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =]
[;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =]
[languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (]
[languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (]
[), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (]
[), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (]
[CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=]
[languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=, null, ), {]
[languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=, null, ), {]
[LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (]
[), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw]
[(, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (]
[(, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (]
[(, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (]
[!=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +]
[!=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +]
[options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +]
[}, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }, if, (]
[else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }, if, (, !]
[else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }, if, (, !]
[else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }, if, (, !]
[}, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =]
[}, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =]
[), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :]
[), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :]
[uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (, !]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (, !]
[(, ), ;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (]
[String, filename, :, config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw]
[config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +]
[{, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +]
[filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (]
[), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !]
[), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !]
[), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !]
[}, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =]
[}, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =]
[), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :]
[), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :]
[uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (, !]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (, !]
[(, ), ;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (]
[String, filename, :, config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw]
[config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (]
[outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +]
[{, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +]
[add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }]
[add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }]
[), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =]
[), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =]
[FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;]
[FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;]
["duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =]
["duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =]
[;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;]
[;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;]
[options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =]
[options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =]
[config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;]
[config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;]
[options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =]
[options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =]
[., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return]
[protected, A, getCompiler, (, ), {, return, compiler, ;, }, final, public, void, run, (, ), {, int, result, =]
[{, return, compiler, ;, }, final, public, void, run, (, ), {, int, result, =, 0, ;, int, runs, =]
[}, final, public, void, run, (, ), {, int, result, =, 0, ;, int, runs, =, 1, ;, if, (]
[}, final, public, void, run, (, ), {, int, result, =, 0, ;, int, runs, =, 1, ;, if, (]
[(, ), {, int, result, =, 0, ;, int, runs, =, 1, ;, if, (, config, ., computePhaseOrdering, ), {]
[{, int, result, =, 0, ;, int, runs, =, 1, ;, if, (, config, ., computePhaseOrdering, ), {, runs, =]
[result, =, 0, ;, int, runs, =, 1, ;, if, (, config, ., computePhaseOrdering, ), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;]
[result, =, 0, ;, int, runs, =, 1, ;, if, (, config, ., computePhaseOrdering, ), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;]
[), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =]
[runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;]
[runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;]
[runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;]
[NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <]
[PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&]
[PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&]
[randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==]
[), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==, 0, ;]
[), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==, 0, ;]
[{, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==, 0, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==, 0, ;, i, ++, ), {]
[0, ;, i, <, runs, &&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;]
[i, <, runs, &&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =]
[result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;]
[result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;]
[doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {]
[doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {]
[doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {]
[recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err, ., println, (]
[recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err, ., println, (]
[(, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err, ., println, (, e, ., getMessage, (, ), ), ;]
[., FlagUsageException, e, ), {, System, ., err, ., println, (, e, ., getMessage, (, ), ), ;, result, =]
[FlagUsageException, e, ), {, System, ., err, ., println, (, e, ., getMessage, (, ), ), ;, result, =, -]
[(, e, ., getMessage, (, ), ), ;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {]
[(, e, ., getMessage, (, ), ), ;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {]
[), ;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;]
[result, =, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =]
[=, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -]
[catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }, if, (]
[catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }, if, (]
[{, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }, if, (, config, ., computePhaseOrdering, ), {]
[{, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }, if, (, config, ., computePhaseOrdering, ), {]
[;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (]
[;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (]
[., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {]
[., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {]
[computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {, (]
[runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {, (, (, Closeable, )]
[(, (, Closeable, ), jsOutput, ), ., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw]
[(, (, Closeable, ), jsOutput, ), ., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw]
[jsOutput, ), ., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (]
[;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, if, (]
[catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, if, (, testMode, ), {]
[catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, if, (, testMode, ), {]
[), {, throw, Throwables, ., propagate, (, e, ), ;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (]
[(, e, ), ;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {]
[(, e, ), ;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {]
[}, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {, System, ., exit, (]
[;, }, else, {, System, ., exit, (, result, ), ;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {, return]
[(, ), {, return, err, ;, }, public, static, class, FlagUsageException, extends, Exception, {, private, static, final, long, serialVersionUID, =]
[extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, FlagUsageException, (, String, message, ), {, super, (]
[List, <, String, >, files, ,, boolean, allowStdIn, ), throws, FlagUsageException, ,, IOException, {, List, <, SourceFile, >, inputs, =]
[boolean, allowStdIn, ), throws, FlagUsageException, ,, IOException, {, List, <, SourceFile, >, inputs, =, new, ArrayList, <, SourceFile, >, (]
[boolean, allowStdIn, ), throws, FlagUsageException, ,, IOException, {, List, <, SourceFile, >, inputs, =, new, ArrayList, <, SourceFile, >, (]
[SourceFile, >, inputs, =, new, ArrayList, <, SourceFile, >, (, files, ., size, (, ), ), ;, boolean, usingStdin, =]
[SourceFile, >, (, files, ., size, (, ), ), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :]
[size, (, ), ), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (]
[(, ), ), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (, !]
[(, ), ), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (, !]
[boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (, !, "-", ., equals, (]
[String, filename, :, files, ), {, if, (, !, "-", ., equals, (, filename, ), ), {, SourceFile, newFile, =]
[String, filename, :, files, ), {, if, (, !, "-", ., equals, (, filename, ), ), {, SourceFile, newFile, =]
[), {, if, (, !, "-", ., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (]
[if, (, !, "-", ., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,]
["-", ., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;]
["-", ., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;]
[filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (]
[., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (]
[fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !]
[inputCharset, ), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {, throw]
[inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (]
[;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (]
[if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw]
[allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (]
[(, "Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (]
["Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !]
["Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !]
["Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !]
[new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw]
["Can't specify stdin twice.", ), ;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
["Can't specify stdin twice.", ), ;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
[;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +]
[., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (]
[outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !]
[outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !]
[outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !]
[(, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw]
["when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
["when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (]
[;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +]
[!, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }]
[!, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }]
[., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (]
[., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (]
[), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (]
[throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,]
[throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,]
["when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;]
[;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin, =]
[(, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin, =, true, ;, }, }, return]
[private, List, <, SourceFile, >, createSourceInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (]
[(, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return]
[(, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return]
[,, IOException, {, if, (, isInTestMode, (, ), ), {, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (]
[,, IOException, {, if, (, isInTestMode, (, ), ), {, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (]
[), ), {, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {]
[{, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {, files, =]
[{, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {, files, =]
[get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {, files, =, Collections, ., singletonList, (]
[files, ., isEmpty, (, ), ), {, files, =, Collections, ., singletonList, (, "-", ), ;, }, try, {, return]
[isEmpty, (, ), ), {, files, =, Collections, ., singletonList, (, "-", ), ;, }, try, {, return, createInputs, (]
[), ), {, files, =, Collections, ., singletonList, (, "-", ), ;, }, try, {, return, createInputs, (, files, ,]
[;, }, try, {, return, createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw]
[{, return, createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (]
[{, return, createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (]
[createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --js flag. ", +]
[createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --js flag. ", +]
[private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (]
[private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (]
[<, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (, files, ., isEmpty, (, ), ), {, return]
[<, String, >, files, ), throws, FlagUsageException, ,, IOException, {, if, (, files, ., isEmpty, (, ), ), {, return]
[), throws, FlagUsageException, ,, IOException, {, if, (, files, ., isEmpty, (, ), ), {, return, ImmutableList, ., of, (]
[), throws, FlagUsageException, ,, IOException, {, if, (, files, ., isEmpty, (, ), ), {, return, ImmutableList, ., of, (]
[IOException, {, if, (, files, ., isEmpty, (, ), ), {, return, ImmutableList, ., of, (, SourceFile, ., fromCode, (]
[if, (, files, ., isEmpty, (, ), ), {, return, ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,]
[{, return, ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {, return]
[ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {, return, createInputs, (]
[of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {, return, createInputs, (, files, ,]
[;, }, try, {, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw]
[{, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (]
[{, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (]
[createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --externs flag. ", +]
[createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --externs flag. ", +]
[(, List, <, String, >, specs, ,, List, <, String, >, jsFiles, ), throws, FlagUsageException, ,, IOException, {, if, (]
[,, List, <, String, >, jsFiles, ), throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return]
[,, List, <, String, >, jsFiles, ), throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return]
[throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }]
[throws, FlagUsageException, ,, IOException, {, if, (, isInTestMode, (, ), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }]
[{, if, (, isInTestMode, (, ), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (]
[{, if, (, isInTestMode, (, ), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (]
[(, isInTestMode, (, ), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=]
[), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;]
[), ), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;]
[modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (]
[., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !]
[., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !]
[., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;]
[., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;]
[!=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[!=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=]
[specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =]
[specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =]
[checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =]
[=, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String, ,, JSModule, >, modulesByName, =]
[=, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String, ,, JSModule, >, modulesByName, =]
[;, Map, <, String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, spec, :]
[=, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, spec, :, specs, ), {, String, [, ], parts, =]
[=, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, spec, :, specs, ), {, String, [, ], parts, =]
[(, ), ;, for, (, String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (]
[String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (]
[String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (]
[String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (]
[String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (]
[), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <]
[String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <, 2, ||]
[String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <, 2, ||]
[String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <, 2, ||]
[=, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <, 2, ||, parts, ., length, >]
[(, ":", ), ;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw]
[;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (]
[;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (]
[;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (]
[(, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +]
[., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +]
[length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =]
[length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =]
[4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, []
[throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0, ], ;]
[FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (]
[+, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (]
[+, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (]
[}, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (]
[[, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw]
[;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[(, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +]
[., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =]
[name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =, new, JSModule, (]
[FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =]
[(, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -]
[), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {]
[}, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =]
[}, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =]
[new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =, Integer, ., parseInt, (]
[new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =, Integer, ., parseInt, (]
[(, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =, Integer, ., parseInt, (, parts, []
[{, numJsFiles, =, Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {]
[=, Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =]
[Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -]
[[, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (]
[[, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (]
[], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <]
[catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw]
[ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (]
[ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (]
[ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (]
[ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (]
[{, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +]
[{, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +]
[=, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, []
[;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +]
[if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +]
[{, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (]
[{, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (]
[{, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (]
[new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +]
[(, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >]
[[, 1, ], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[+, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +]
[name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (]
[name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (]
[name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (]
[;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +]
[if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -]
[+, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +]
[>, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +]
[(, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =]
[(, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =]
[-, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (]
[), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,]
[), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,]
[" more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +]
[String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :]
[moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (]
[jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,]
[nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {]
[nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {]
[numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (]
[(, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, ), ;, }]
[input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=]
[moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (]
[moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (]
[moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (]
[), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >]
[input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =]
[input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =]
[;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, []
[;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (]
[;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (]
[;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (]
[>, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (, depList, ., length, (, ), >]
[[, 2, ], ;, if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =]
[[, 2, ], ;, if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =]
[if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =, depList, ., split, (]
[0, ), {, String, [, ], deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep, :]
[deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep, :, deps, ), {, JSModule, other, =]
[deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep, :, deps, ), {, JSModule, other, =]
[split, (, ",", ), ;, for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (]
[for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if, (]
[for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if, (]
[String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==]
[), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw]
[other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (]
[other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (]
[other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (]
[other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (]
[other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (]
[modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +]
[get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +]
[dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +]
[;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +]
[==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }]
[==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }]
[throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (]
[name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }]
[name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }]
[dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (]
["'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,]
[addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (]
[addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (]
[other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <]
[}, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw]
[., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[(, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +]
[,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +]
[), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +]
[nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return]
[nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return]
[{, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (]
[{, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (]
[modulesByName, ., values, (, ), ), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (]
[., values, (, ), ), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !]
[., values, (, ), ), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !]
[), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (]
[checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw]
[name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (]
[name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (]
[name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (]
[throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (, "Invalid module name: '", +]
[{, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (, "Invalid module name: '", +, name, +]
[,, String, >, parseModuleWrappers, (, List, <, String, >, specs, ,, List, <, JSModule, >, modules, ), throws, FlagUsageException, {]
[,, String, >, parseModuleWrappers, (, List, <, String, >, specs, ,, List, <, JSModule, >, modules, ), throws, FlagUsageException, {]
[(, List, <, String, >, specs, ,, List, <, JSModule, >, modules, ), throws, FlagUsageException, {, Preconditions, ., checkState, (]
[(, List, <, String, >, specs, ,, List, <, JSModule, >, modules, ), throws, FlagUsageException, {, Preconditions, ., checkState, (]
[<, String, >, specs, ,, List, <, JSModule, >, modules, ), throws, FlagUsageException, {, Preconditions, ., checkState, (, specs, !=]
[throws, FlagUsageException, {, Preconditions, ., checkState, (, specs, !=, null, ), ;, Map, <, String, ,, String, >, wrappers, =]
[throws, FlagUsageException, {, Preconditions, ., checkState, (, specs, !=, null, ), ;, Map, <, String, ,, String, >, wrappers, =]
[., checkState, (, specs, !=, null, ), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (]
[., checkState, (, specs, !=, null, ), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (]
[String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), ), ;, for, (, JSModule, m, :]
[=, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {]
[=, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {]
[(, modules, ., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (]
[(, modules, ., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (]
[), ;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (, m, ., getName, (, ), ,]
[{, wrappers, ., put, (, m, ., getName, (, ), ,, "", ), ;, }, for, (, String, spec, :]
[., getName, (, ), ,, "", ), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =]
[., getName, (, ), ,, "", ), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =]
[,, "", ), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (]
[for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (]
[for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (]
[String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==]
[spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -]
[{, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw]
[=, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (]
[=, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (]
[=, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (]
[., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +]
[(, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +]
[==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =]
[==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =]
[{, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring, (]
[new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,]
["<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (]
[+, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !]
[+, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !]
[}, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (]
[., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw]
[0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +]
[;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +]
[(, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =]
[(, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =]
[{, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring, (]
[{, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring, (]
[new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +]
[name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (]
[+, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !]
[+, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !]
[}, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (]
[., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw]
[pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (]
[pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (]
[pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (]
[1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +]
[;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +]
[wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }]
[wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }]
["%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (]
[), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name, ,]
[(, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return]
[(, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return]
[(, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return]
[(, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return]
[(, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return]
[), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +]
[), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +]
[}, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +, m, ., getName, (, ), +]
[;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (]
[;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (]
[@, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==]
[writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {]
[Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =]
[,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (]
[,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (]
[throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,]
[throws, FlagUsageException, ,, IOException, {, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,]
[{, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (]
[{, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (]
[{, if, (, parsedModuleWrappers, ==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (]
[Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }, String, fileName, =]
[newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (]
[), ., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =]
[), ., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =]
[(, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (]
[fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;]
[getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (]
[m, ), ;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,]
[;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,]
[;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,]
[new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (]
[fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,]
[fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,]
[fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,]
[(, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (]
[(, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (]
[compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (]
[toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,]
[), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,]
[parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,]
[,, String, codePlaceholder, ,, @, Nullable, Function, <, String, ,, String, >, escaper, ), throws, IOException, {, int, pos, =]
[,, String, codePlaceholder, ,, @, Nullable, Function, <, String, ,, String, >, escaper, ), throws, IOException, {, int, pos, =]
[@, Nullable, Function, <, String, ,, String, >, escaper, ), throws, IOException, {, int, pos, =, wrapper, ., indexOf, (]
[,, String, >, escaper, ), throws, IOException, {, int, pos, =, wrapper, ., indexOf, (, codePlaceholder, ), ;, if, (]
[,, String, >, escaper, ), throws, IOException, {, int, pos, =, wrapper, ., indexOf, (, codePlaceholder, ), ;, if, (]
[>, escaper, ), throws, IOException, {, int, pos, =, wrapper, ., indexOf, (, codePlaceholder, ), ;, if, (, pos, !=]
[escaper, ), throws, IOException, {, int, pos, =, wrapper, ., indexOf, (, codePlaceholder, ), ;, if, (, pos, !=, -]
[pos, =, wrapper, ., indexOf, (, codePlaceholder, ), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =]
[indexOf, (, codePlaceholder, ), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (]
[indexOf, (, codePlaceholder, ), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (]
[codePlaceholder, ), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >]
[if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {]
[pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =]
[pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =]
[), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (]
[String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,]
["", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;]
["", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;]
[pos, >, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (]
[{, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }]
[{, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }]
[., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (]
[., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (]
[., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (]
[(, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==]
[,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?]
[), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :]
[), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :]
[append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (]
[., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =]
[., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =]
[(, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +]
[(, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +]
[., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (]
[., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (]
[(, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=]
[(, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=]
[=, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {]
[=, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {]
[., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (]
[., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (]
[;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (]
[wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }]
[wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }]
[), ), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (]
[append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (]
[append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (]
[append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (]
[wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=]
[substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&]
[substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&]
[substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&]
[}, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=]
[append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {]
[append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {]
[append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {]
[!=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (]
[), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {]
[), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {]
[{, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (]
[getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (, code, ), ;]
[getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (, code, ), ;]
[setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (, code, ), ;, out, ., append, (]
[out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (]
[out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (]
[out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (]
[;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >]
[maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =]
[maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =]
[maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =]
[maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =]
[), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (]
[), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (]
[), {, if, (, pathPrefix, ., length, (, ), >, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (]
[length, (, ), >, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -]
[>, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==]
[>, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==]
[String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?]
[String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?]
[., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (]
[(, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,]
[(, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,]
[(, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,]
[-, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -]
[==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :]
[==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :]
[separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (]
[., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (]
[., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (]
[(, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=]
[1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {]
[1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {]
[new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new, File, (]
[dirName, ), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {]
[dirName, ), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {]
[(, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, ., setLoggingLevel, (]
[(, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, ., setLoggingLevel, (]
[}, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, ., setLoggingLevel, (, Level, ., parse, (]
[}, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, ., setLoggingLevel, (, Level, ., parse, (]
[Compiler, ., setLoggingLevel, (, Level, ., parse, (, config, ., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =]
[Level, ., parse, (, config, ., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;]
[parse, (, config, ., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =]
[;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =, createCompiler, (, ), ;, B, options, =]
[;, compiler, =, createCompiler, (, ), ;, B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =]
[), ;, B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =, null, ;, Result, result, =]
[B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =, null, ;, Result, result, =, null, ;]
[=, createOptions, (, ), ;, List, <, JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (]
[<, JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =]
[JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =, !]
[JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =, !]
[JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =, !]
[), ;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =]
[), ;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =]
[jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (]
[(, ), ;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {]
[(, ), ;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {]
[<, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (]
[<, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (]
[Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;]
[newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput, =]
[), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (]
[), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (]
[add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (]
[add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (]
[), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {]
[jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =]
[fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (]
[., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, )]
[OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;, }, List, <, String, >, jsFiles, =]
[OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;, }, List, <, String, >, jsFiles, =]
[jsOutput, ), ;, }, List, <, String, >, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =]
[jsOutput, ), ;, }, List, <, String, >, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =]
[>, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =]
[., js, ;, List, <, String, >, moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (]
[., js, ;, List, <, String, >, moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (]
[moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (]
[moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (]
[moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (]
[moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (]
[boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==]
[=, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&]
[=, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&]
[(, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (]
[(, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (]
[), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (]
[., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {]
[(, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =]
[==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;]
[==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;]
[., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (]
[0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (]
[), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !]
[), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !]
[;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {]
[., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =]
[(, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =, createJsModules, (]
[), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =, createJsModules, (, moduleSpecs, ,]
[., isEmpty, (, ), ), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :]
[), ), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {]
[), ), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {]
[=, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (]
[(, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (]
[(, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (]
[(, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (]
[), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {]
[), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {]
[add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (]
[getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,]
[m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,]
[(, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {]
[., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =]
[., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =]
[compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (]
[initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,]
[externs, ,, modules, ,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,, modules, ,]
[., compileModules, (, externs, ,, modules, ,, options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =]
[(, externs, ,, modules, ,, options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (]
[options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (]
[options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (]
[else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config, ., skipNormalOutputs, ), {]
[else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config, ., skipNormalOutputs, ), {]
[SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config, ., skipNormalOutputs, ), {, compiler, ., init, (]
[inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config, ., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,]
[createSourceInputs, (, jsFiles, ), ;, if, (, config, ., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,]
[(, config, ., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {]
[., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =]
[., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =]
[compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, ., compile, (]
[init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, ., compile, (, externs, ,]
[externs, ,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,]
[}, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (]
[result, =, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {]
[compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =]
[compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =]
[externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (]
[externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (]
[externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (]
[Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :]
[(, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {]
[(, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {]
[(, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (]
[., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (]
[modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :]
[add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (]
[add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (]
[add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (]
[m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (]
[;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=]
[for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {]
[for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {]
[:, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (]
[:, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (]
[if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (, JSError, ., make, (]
[compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,]
[), !=, null, ), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return]
[report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =]
[JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (]
[make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,]
[OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,]
[;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (]
[;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (]
[}, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {]
[}, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {]
[int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {, (]
[processResults, (, result, ,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, )]
[if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), ., flush, (, ), ;, }, return]
[(, Result, result, ,, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, if, (]
[(, Result, result, ,, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, if, (]
[JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, if, (, config, ., computePhaseOrdering, ), {, return]
[options, ), throws, FlagUsageException, ,, IOException, {, if, (, config, ., computePhaseOrdering, ), {, return, 0, ;, }, if, (]
[options, ), throws, FlagUsageException, ,, IOException, {, if, (, config, ., computePhaseOrdering, ), {, return, 0, ;, }, if, (]
[if, (, config, ., computePhaseOrdering, ), {, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (]
[if, (, config, ., computePhaseOrdering, ), {, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (]
[if, (, config, ., computePhaseOrdering, ), {, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (]
[{, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==]
[}, if, (, config, ., printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return]
[printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {]
[printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {]
[(, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (]
[(, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (]
[(, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (]
[(, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (]
[(, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (]
[jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;]
[jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;]
[DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;, jsOutput, ., append, (]
[compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n', ), ;, return]
[getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (]
[getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (]
[return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (, compiler, ., getRoot, (, ), ==]
[}, if, (, config, ., printAst, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return]
[., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =]
[., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =]
[), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;]
[), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;]
[;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;, DotFormatter, ., appendDot, (]
[;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;, DotFormatter, ., appendDot, (]
[;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;, DotFormatter, ., appendDot, (]
[compiler, ., computeCFG, (, ), ;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,]
[computeCFG, (, ), ;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,]
[;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;]
[;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;]
[(, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (]
[(, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return]
[,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (]
[,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (]
[return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==]
[}, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {]
[}, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {]
[config, ., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, jsOutput, ., append, (]
[{, if, (, compiler, ., getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return]
[getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {]
[getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {]
[getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {]
[., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (]
["Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;]
["Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;]
[1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (]
[{, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n", ), ;, return]
[(, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }]
[., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =]
[jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (]
[jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (]
[), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {]
[;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;]
[=, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;, outputBundle, (, ), ;]
[if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return]
[{, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if, (]
[{, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if, (]
[outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if, (, result, ., success, ), {]
[), ;, return, 0, ;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (]
[), ;, return, 0, ;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (]
[return, 0, ;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==]
[}, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {]
[result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;]
[success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (]
[{, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,]
[{, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,]
[==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {]
[), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (]
[outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,]
[options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (]
[options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (]
[options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (]
[jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options, ., externExportsPath, !=]
[outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =]
[modules, ,, options, ), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (]
[options, ), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,]
[options, ), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,]
[(, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;]
[(, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;]
[!=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (]
[!=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (]
[eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (, result, ., externExport, ), ;]
[eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (, result, ., externExport, ), ;]
[., jsOutputFile, ), ;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }]
[), ;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (]
[., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;]
[., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;]
[close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return]
[close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return]
[}, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (]
[}, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (]
[}, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (]
[outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (, result, ., errors, ., length, ,]
[., errors, ., length, ,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw]
[length, ,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw, new, UnsupportedOperationException, (]
[(, "SourceCodeEscapers is not in the standard release of Guava yet :(", ), ;, }, void, outputSingleBinary, (, ), throws, IOException, {, Function, <, String, ,, String, >, escaper, =]
[void, outputSingleBinary, (, ), throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;, String, marker, =]
[throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;, String, marker, =, OUTPUT_MARKER, ;, if, (]
[throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;, String, marker, =, OUTPUT_MARKER, ;, if, (]
[throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;, String, marker, =, OUTPUT_MARKER, ;, if, (]
[,, String, >, escaper, =, null, ;, String, marker, =, OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (]
[=, null, ;, String, marker, =, OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {]
[;, String, marker, =, OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =]
[marker, =, OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;]
[OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =]
[., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }]
[., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (]
[(, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,]
[), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,]
[), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,]
[;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,]
[;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,]
[(, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,]
[;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,]
[;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {]
[private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =]
[outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (]
[outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (]
[JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,]
[,, B, options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, ), ;]
[options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (]
[options, ), throws, FlagUsageException, ,, IOException, {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (]
[=, parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =]
[., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (]
[moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !]
[modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (]
[(, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {]
[., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =]
[), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (]
[Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (]
[=, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,]
[), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m, :]
[(, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m, :, modules, ), {, if, (]
[(, options, ,, null, ), ), ;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (]
[), ), ;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {]
[;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =]
[for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (]
[JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (]
[:, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,]
[options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =]
[), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (]
[mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (]
[options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (]
[options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (]
[options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (]
[), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=]
[Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }]
[options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (]
[sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,]
[compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (]
[compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (]
[compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (]
[), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=]
[(, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[(, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[(, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (]
[;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,]
[;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,]
[), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }]
[), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }]
[appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (]
[appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (]
[mapOut, ,, m, ., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (]
[., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&]
[., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&]
[(, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=]
[;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {]
[;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {]
[), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;]
[if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =]
[&&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (]
[&&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (]
[!=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=]
[{, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, ), {]
[{, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, ), {]
[), {, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (]
[{, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[{, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[{, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[getInputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[(, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return]
[config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return]
[charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (]
[), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[(, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[{, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;, }, return]
[return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (]
[config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !]
[config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !]
[config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !]
[getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[(, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[{, if, (, !, config, ., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (]
[(, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[(, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return]
[config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return]
[return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return]
[return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return]
[;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?]
[;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?]
[>, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?, externsSupplierForTesting, ., get, (, ), :]
[(, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?, externsSupplierForTesting, ., get, (, ), :, createExternInputs, (]
[(, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?, externsSupplierForTesting, ., get, (, ), :, createExternInputs, (]
[(, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return]
[(, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return]
[(, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return]
[(, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return]
[(, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=]
[., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&]
[., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&]
[., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&]
[boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&, options, ., sourceMapOutputPath, ., contains, (]
[(, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (]
[(, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (]
[(, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (]
[}, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (, options, ., externExportsPath, ==]
[(, B, options, ,, String, path, ), throws, IOException, {, if, (, options, ., externExportsPath, ==, null, ), {, return]
[), throws, IOException, {, if, (, options, ., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =]
[), throws, IOException, {, if, (, options, ., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =]
[options, ., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (]
[., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !]
[., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !]
[), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (]
[), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (]
[options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (, File, ., separator, ), ), {, File, outputFile, =]
[;, if, (, !, exPath, ., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (]
[!, exPath, ., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;]
[., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =]
[., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =]
[., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =]
[., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =]
[), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +]
[), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +]
[outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +, File, ., separatorChar, +]
[(, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return]
[), ;, exPath, =, outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (]
[exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (]
[exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (]
[;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=]
[String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {]
[(, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =]
[(, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =]
[(, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =]
[(, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =]
[JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =, config, ., moduleOutputPathPrefix, +]
[JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=, null, ), {, sub, =, config, ., moduleOutputPathPrefix, +]
[;, if, (, forModule, !=, null, ), {, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +]
[), {, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (]
[{, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !]
[{, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !]
[{, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !]
[getName, (, ), +, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {]
[), +, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =]
[), +, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =]
[(, !, config, ., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {]
[config, ., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =]
[config, ., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =]
[), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return]
[), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return]
[=, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path, ., replace, (]
[., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path, ., replace, (, "%outname%", ,]
["%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (]
["%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (]
[;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (, Strings, ., isNullOrEmpty, (]
[;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (, Strings, ., isNullOrEmpty, (]
[B, options, ,, JSModule, forModule, ), {, if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return]
[forModule, ), {, if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, null, ;, }, return]
[{, if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, null, ;, }, return, expandCommandLinePath, (]
[{, if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, null, ;, }, return, expandCommandLinePath, (]
[., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, null, ;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,]
[options, ., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (]
[options, ., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (]
[sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==]
[;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[(, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, if, (]
[throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, if, (, testMode, ), {, return]
[null, ), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return]
[{, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter, (]
[null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter, (, filenameToOutputStream, (]
[(, filenameToOutputStream, (, fileName, ), ), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (]
[(, filenameToOutputStream, (, fileName, ), ), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (]
[(, fileName, ), ), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==]
[;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[(, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, if, (]
[throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, if, (, testMode, ), {, return]
[null, ), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return]
[{, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2, (]
[null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2, (, filenameToOutputStream, (]
[(, filenameToOutputStream, (, fileName, ), ), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (]
[(, filenameToOutputStream, (, fileName, ), ), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (]
[(, fileName, ), ), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==]
[;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, return]
[fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return, null, ;, }, return, new, FileOutputStream, (]
[return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (]
[return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (]
[FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==]
[;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==, null, ), {, return]
[Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==, null, ), {, return, new, BufferedWriter, (]
[OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (]
[legacyOutputCharset, ==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (]
[(, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,]
[OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), ), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (]
[OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), ), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (]
[stream, ,, legacyOutputCharset, ), ), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==]
[), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {, return]
[}, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {, return, new, BufferedWriter, (]
[streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (]
[outputCharset2, ==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (]
[(, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,]
[), ), ;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (]
[), ), ;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (]
[}, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (, Strings, ., isNullOrEmpty, (]
[}, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (, Strings, ., isNullOrEmpty, (]
[IOException, {, if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =]
[if, (, Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (]
[Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,]
[sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =]
[), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (]
[;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;]
[;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;]
[;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;]
[,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (]
[), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,]
[out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, ), ;]
[out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, ), ;]
[), ;, out, ., close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =]
[close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, "", ;, if, (]
[close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, "", ;, if, (]
[}, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, "", ;, if, (, outputFile, ., equals, (]
[outputFile, ), {, String, basePath, =, "", ;, if, (, outputFile, ., equals, (, "", ), ), {, if, (]
[), {, String, basePath, =, "", ;, if, (, outputFile, ., equals, (, "", ), ), {, if, (, !]
[), {, String, basePath, =, "", ;, if, (, outputFile, ., equals, (, "", ), ), {, if, (, !]
[), {, String, basePath, =, "", ;, if, (, outputFile, ., equals, (, "", ), ), {, if, (, !]
[;, if, (, outputFile, ., equals, (, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (]
[., equals, (, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {]
[(, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =]
[(, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =]
[!, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {]
[., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =]
[basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File, file, =]
[., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (]
[basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =]
[basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =]
[File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =, file, ., getName, (, ), ;, if, (]
[File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =, file, ., getName, (, ), ;, if, (]
[File, (, outputFile, ), ;, String, outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (]
[;, String, outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {]
[outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =]
[outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =]
[getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (]
[), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,]
[), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,]
[), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,]
[endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -]
[), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }]
[outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =]
[outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =]
[outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =]
[outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =]
[0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +]
[0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +]
[length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +]
[3, ), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return]
[}, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath, =]
[private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath, =, null, ;, String, variableMapOutputPath, =]
[options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath, =, null, ;, String, variableMapOutputPath, =, null, ;, String, functionInformationMapOutputPath, =]
[,, IOException, {, String, propertyMapOutputPath, =, null, ;, String, variableMapOutputPath, =, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (]
[,, IOException, {, String, propertyMapOutputPath, =, null, ;, String, variableMapOutputPath, =, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (]
[String, variableMapOutputPath, =, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =]
[=, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (]
[=, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (]
[=, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;]
[;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =]
[;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =]
[(, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +]
[., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;]
[), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =]
[), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =]
[String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +]
[=, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;]
[(, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =]
[(, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =]
[., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +]
[=, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (]
[basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !]
[basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !]
[basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !]
[basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (]
[basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (]
[basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (]
["_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=]
[(, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw]
[., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +]
[), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }]
[{, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =]
[{, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =]
[{, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (]
[throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !]
[throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !]
[throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !]
["create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (]
[config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (]
[config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (]
[variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=]
[(, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw]
[., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +]
[), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }]
[{, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =]
[{, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =]
[{, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (]
[{, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (]
[new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=]
["create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (]
["create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (]
["create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (]
[config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=]
[;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {]
[;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {]
[;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {]
[{, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save, (]
[), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (]
[), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (]
[null, ), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=]
[getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (]
[getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (]
[getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (]
[variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=]
[}, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {]
[}, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {]
[}, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {]
[{, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save, (]
[), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (]
[), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (]
[null, ), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=]
[getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (]
[getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (]
[getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (]
[propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=]
[(, functionInformationMapOutputPath, !=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =]
[!=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (]
[compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =]
[compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =]
[), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (]
[), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;]
[), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;]
[), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;]
[), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (]
[outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;]
[outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;]
[file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;]
[file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;]
[(, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file, ., flush, (, ), ;]
[(, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file, ., flush, (, ), ;]
[createDefineOrTweakReplacements, (, List, <, String, >, definitions, ,, CompilerOptions, options, ,, boolean, tweaks, ), {, for, (, String, override, :]
[CompilerOptions, options, ,, boolean, tweaks, ), {, for, (, String, override, :, definitions, ), {, String, [, ], assignment, =]
[CompilerOptions, options, ,, boolean, tweaks, ), {, for, (, String, override, :, definitions, ), {, String, [, ], assignment, =]
[tweaks, ), {, for, (, String, override, :, definitions, ), {, String, [, ], assignment, =, override, ., split, (]
[{, for, (, String, override, :, definitions, ), {, String, [, ], assignment, =, override, ., split, (, "=", ,]
[definitions, ), {, String, [, ], assignment, =, override, ., split, (, "=", ,, 2, ), ;, String, defName, =]
[definitions, ), {, String, [, ], assignment, =, override, ., split, (, "=", ,, 2, ), ;, String, defName, =]
[{, String, [, ], assignment, =, override, ., split, (, "=", ,, 2, ), ;, String, defName, =, assignment, []
[=, override, ., split, (, "=", ,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (]
[=, override, ., split, (, "=", ,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (]
[=, override, ., split, (, "=", ,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (]
[,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >]
[=, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =]
[=, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =]
[=, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =]
[=, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =]
[], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==]
[if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?]
[defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :]
[defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :]
[length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, []
[{, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =]
[{, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =]
[assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (]
["true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =]
["true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =]
[1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (]
[=, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (]
[=, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (]
[., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||]
[;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (]
[=, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {]
[=, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {]
[(, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (]
[), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,]
[isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {]
[isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {]
[(, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options, ., setDefineToBooleanLiteral, (]
[), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,]
[;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (]
[;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (]
[;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (]
[;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (]
[setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >]
[defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&]
[,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (]
[,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (]
[isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (]
[isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (]
[isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (]
[isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (]
[continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (]
[else, if, (, defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==]
[(, defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&]
[(, defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&]
[(, defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&]
[(, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (]
[(, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (]
[(, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (]
[(, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -]
[charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==]
[), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||]
[==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (]
[==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (]
[==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (]
[==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (]
[., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (]
[defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==]
[length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&]
[length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&]
[length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&]
[1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (]
[1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (]
[1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (]
[(, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -]
[charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==]
[., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =]
[., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =]
[., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (]
[(, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,]
[(, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,]
[(, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,]
['\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -]
[String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (]
[String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (]
[String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (]
[., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (]
[., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (]
[,, defValue, ., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (]
[(, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==]
[), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -]
[if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {, if, (]
[., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {]
[., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {]
[., charAt, (, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (]
[(, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,]
[1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {]
[1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {]
[(, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options, ., setDefineToStringLiteral, (]
[), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,]
[., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {, try, {, double, value, =]
[., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {, try, {, double, value, =]
[,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {, try, {, double, value, =, Double, ., parseDouble, (]
[continue, ;, }, }, else, {, try, {, double, value, =, Double, ., parseDouble, (, defValue, ), ;, if, (]
[}, else, {, try, {, double, value, =, Double, ., parseDouble, (, defValue, ), ;, if, (, tweaks, ), {]
[}, else, {, try, {, double, value, =, Double, ., parseDouble, (, defValue, ), ;, if, (, tweaks, ), {]
[{, double, value, =, Double, ., parseDouble, (, defValue, ), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (]
[value, =, Double, ., parseDouble, (, defValue, ), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,]
[defValue, ), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {]
[defValue, ), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {]
[(, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options, ., setDefineToDoubleLiteral, (]
[), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,]
[defName, ,, value, ), ;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (]
[;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {, throw]
[;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {, throw, new, RuntimeException, (]
[;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {, throw, new, RuntimeException, (]
[catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +]
[{, }, }, }, if, (, tweaks, ), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, ), ;, }, throw]
[}, if, (, tweaks, ), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, ), ;, }, throw, new, RuntimeException, (]
[}, if, (, tweaks, ), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, ), ;, }, throw, new, RuntimeException, (]
[(, tweaks, ), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, ), ;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +]
[throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return]
[throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return]
[throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return]
[new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !]
[new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !]
[new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !]
[}, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, ), &&]
[}, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, ), &&]
[private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, ), &&, output, !=]
[shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, ), &&, output, !=, null, &&]
[shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, ), &&, output, !=, null, &&]
[), {, return, !, config, ., module, ., isEmpty, (, ), &&, output, !=, null, &&, output, ., contains, (]
[output, !=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {]
[null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (]
[null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (]
[contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputManifests, ,]
[IOException, {, outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {]
[outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (]
[outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (]
[outputManifests, ,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputBundles, ,]
[;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, ), throws, IOException, {, if, (]
[;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, ), throws, IOException, {, if, (]
[throws, IOException, {, if, (, outputFiles, ., isEmpty, (, ), ), {, return, ;, }, for, (, String, output, :]
[outputFiles, ., isEmpty, (, ), ), {, return, ;, }, for, (, String, output, :, outputFiles, ), {, if, (]
[outputFiles, ., isEmpty, (, ), ), {, return, ;, }, for, (, String, output, :, outputFiles, ), {, if, (]
[String, output, :, outputFiles, ), {, if, (, output, ., isEmpty, (, ), ), {, continue, ;, }, if, (]
[:, outputFiles, ), {, if, (, output, ., isEmpty, (, ), ), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (]
[., isEmpty, (, ), ), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (, output, ), ), {, JSModuleGraph, graph, =]
[., isEmpty, (, ), ), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (, output, ), ), {, JSModuleGraph, graph, =]
[(, output, ), ), {, JSModuleGraph, graph, =, compiler, ., getDegenerateModuleGraph, (, ), ;, Iterable, <, JSModule, >, modules, =]
[(, output, ), ), {, JSModuleGraph, graph, =, compiler, ., getDegenerateModuleGraph, (, ), ;, Iterable, <, JSModule, >, modules, =]
[(, ), ;, Iterable, <, JSModule, >, modules, =, graph, ., getAllModules, (, ), ;, for, (, JSModule, module, :]
[>, modules, =, graph, ., getAllModules, (, ), ;, for, (, JSModule, module, :, modules, ), {, Writer, out, =]
[=, graph, ., getAllModules, (, ), ;, for, (, JSModule, module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (]
[., getAllModules, (, ), ;, for, (, JSModule, module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (]
[(, ), ;, for, (, JSModule, module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,]
[module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), ), ;, if, (]
[), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), ), ;, if, (, isManifest, ), {]
[Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), ), ;, if, (, isManifest, ), {, printManifestTo, (]
[Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), ), ;, if, (, isManifest, ), {, printManifestTo, (]
[(, output, ,, module, ), ), ;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,]
[;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {]
[(, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[(, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,]
[), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }]
[), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }]
[(, ), ,, out, ), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =]
[,, out, ), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (]
[), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (]
[}, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,]
[;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, ), ), ;, if, (]
[;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, ), ), ;, if, (]
[;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, ), ), ;, if, (]
[(, output, ,, null, ), ), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (]
[null, ), ), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {]
[), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (]
[), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (]
[module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,]
[{, if, (, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else, {]
[(, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[(, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,]
[), ;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {]
[}, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (]
[}, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (]
[., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[(, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,]
[), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, ), ;, }]
[), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, ), ;, }]
[}, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (]
[}, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (]
[}, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (]
[}, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (]
[(, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=]
[;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&]
[;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&]
[;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&]
[private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=]
[IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =]
[if, (, config, ., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (]
[if, (, config, ., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (]
[!=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;]
[&&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (]
[&&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (]
[), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ), ;]
[out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ), ;]
[close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {]
[close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {]
[}, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {, out, ., append, (]
[}, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {, out, ., append, (]
[}, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {, out, ., append, (]
[}, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {, out, ., append, (]
[@, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest, ), throws, IOException, {, Joiner, commas, =]
[@, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest, ), throws, IOException, {, Joiner, commas, =]
[(, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest, ), throws, IOException, {, Joiner, commas, =, Joiner, ., on, (]
[,, boolean, isManifest, ), throws, IOException, {, Joiner, commas, =, Joiner, ., on, (, ",", ), ;, boolean, requiresNewline, =]
[Joiner, commas, =, Joiner, ., on, (, ",", ), ;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :]
[Joiner, commas, =, Joiner, ., on, (, ",", ), ;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :]
[;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (]
[=, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (, requiresNewline, ), {]
[=, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (, requiresNewline, ), {]
[(, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (, requiresNewline, ), {, out, ., append, (]
[getAllModules, (, ), ), {, if, (, requiresNewline, ), {, out, ., append, (, "\n", ), ;, }, if, (]
[(, requiresNewline, ), {, out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =]
[(, requiresNewline, ), {, out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =]
[out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (]
[out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (]
[}, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;]
[}, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;]
[), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (]
[), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (]
[=, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (, String, ., format, (]
[., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,]
[., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,]
[(, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,]
[(, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,]
[(, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,]
[append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?]
[String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :]
[String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :]
[format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +]
[module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;]
[getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (]
[getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (]
[isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,]
[":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {]
[dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (]
[module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,]
[), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }]
[out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, requiresNewline, =]
[void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :]
[>, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, String, rootRelativePath, =]
[>, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, String, rootRelativePath, =]
[out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (]
[out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (]
[inputs, ), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[inputs, ), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[inputs, ), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[{, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=]
[rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :]
[getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;]
[getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;]
[;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (]
[=, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;]
[=, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;]
[?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, ., append, (]
[void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :]
[CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[IOException, {, for, (, CompilerInput, input, :, inputs, ), {, if, (, input, ., getName, (, ), ., equals, (]
[IOException, {, for, (, CompilerInput, input, :, inputs, ), {, if, (, input, ., getName, (, ), ., equals, (]
[CompilerInput, input, :, inputs, ), {, if, (, input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (]
[CompilerInput, input, :, inputs, ), {, if, (, input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (]
[(, input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {]
[(, input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {]
[(, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (]
[(, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (]
[., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==]
[., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==]
[., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (]
[Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =]
[Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =]
[1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (]
[1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (]
[return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =]
[}, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=]
[rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :]
[), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =]
[displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new, File, (]
[displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new, File, (]
[:, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, ), ), ;]
[:, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, ), ), ;]
[(, ), ;, File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, ., append, (]
[File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, ., append, (, "//", ), ;]
[File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, ., append, (, "//", ), ;]
[File, (, input, ., getName, (, ), ), ;, out, ., append, (, "//", ), ;, out, ., append, (]
[., getName, (, ), ), ;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;]
[., getName, (, ), ), ;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;]
[), ;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (]
[., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;]
[., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;]
[), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (]
[out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,]
[append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,]
[), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;]
[), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;]
[append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;, out, ., append, (]
[}, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, ), {, Map, <, String, ,, String, >, rootRelativePathsMap, =]
[}, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, ), {, Map, <, String, ,, String, >, rootRelativePathsMap, =]
[{, Map, <, String, ,, String, >, rootRelativePathsMap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, mapString, :]
[{, Map, <, String, ,, String, >, rootRelativePathsMap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, mapString, :]
[=, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =]
[=, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =]
[(, ), ;, for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (]
[for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;]
[for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;]
[:, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (]
[:, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (]
[., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >]
[=, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =]
[=, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =]
[(, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (]
[), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,]
[colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =]
[colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =]
[;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (]
[;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (]
[execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +]
[., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;]
[., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;]
[,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (]
[,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (]
[,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (]
[String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (]
[mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==]
[., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -]
[colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;]
[colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;]
[;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (]
[., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,]
[indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return]
[put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =]
[put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =]
[return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private, long, worstRunTime, =]
[return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private, long, worstRunTime, =]
[private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private, long, worstRunTime, =, Long, ., MIN_VALUE, ;, private, long, lastStartTime, =]
[Long, ., MIN_VALUE, ;, private, long, lastStartTime, =, 0, ;, private, List, <, List, <, String, >, >, loopedPassesInBestRun, =]
[0, ;, private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {]
[private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {, lastStartTime, =]
[private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {, lastStartTime, =]
[>, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {, lastStartTime, =, System, ., currentTimeMillis, (, ), ;]
[>, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {, lastStartTime, =, System, ., currentTimeMillis, (, ), ;]
[currentTimeMillis, (, ), ;, PhaseOptimizer, ., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {, long, endTime, =]
[currentTimeMillis, (, ), ;, PhaseOptimizer, ., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {, long, endTime, =]
[;, }, private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =]
[;, }, private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =]
[private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =, endTime, -]
[recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;]
[), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =]
[), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =]
[=, System, ., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (]
[., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,]
[long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (]
[long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (]
[=, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <]
[lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {]
[worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =]
[worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =]
[length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;]
[worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =]
[PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {]
[PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {]
[), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (]
[), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (]
[), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (]
[bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +]
[length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +]
[}, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;]
[}, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;]
[(, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (]
[(, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (]
[(, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (]
[{, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +]
[{, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +]
[+, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =]
["Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :]
[+, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {]
[+, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {]
[int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (]
[int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (]
[int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (]
[int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (]
[int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (]
[=, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +]
[;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +]
[(, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +]
[(, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +]
[(, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +]
[>, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (]
[{, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (]
[append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +]
[+, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;]
[+, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;]
[join, (, loop, ), +, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw]
[), +, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
["\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,]
[throw, new, RuntimeException, (, "unexpected exception", ,, e, ), ;, }, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =]
[}, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree, ), {]
[}, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree, ), {]
[class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree, ), {, this, ., printTree, =]
[private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree, ), {, this, ., printTree, =, printTree, ;, return]
[setPrintTree, (, boolean, printTree, ), {, this, ., printTree, =, printTree, ;, return, this, ;, }, private, boolean, computePhaseOrdering, =]
[=, printTree, ;, return, this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {]
[=, printTree, ;, return, this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {]
[this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, ., computePhaseOrdering, =]
[private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, ., computePhaseOrdering, =, computePhaseOrdering, ;, return]
[setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, ., computePhaseOrdering, =, computePhaseOrdering, ;, return, this, ;, }, private, boolean, printAst, =]
[=, computePhaseOrdering, ;, return, this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {]
[=, computePhaseOrdering, ;, return, this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {]
[this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {, this, ., printAst, =]
[private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {, this, ., printAst, =, printAst, ;, return]
[setPrintAst, (, boolean, printAst, ), {, this, ., printAst, =, printAst, ;, return, this, ;, }, private, boolean, printPassGraph, =]
[=, printAst, ;, return, this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {]
[=, printAst, ;, return, this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {]
[this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {, this, ., printPassGraph, =]
[private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph, ;, return]
[boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph, ;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =]
[boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph, ;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =]
[boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph, ;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =]
[CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {]
[CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {]
[=, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =]
[DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return]
[CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return, this, ;, }, private, String, loggingLevel, =]
[CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return, this, ;, }, private, String, loggingLevel, =]
[CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return, this, ;, }, private, String, loggingLevel, =]
[}, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {]
[}, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {]
[=, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {, this, ., loggingLevel, =]
[WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {, this, ., loggingLevel, =, loggingLevel, ;, return]
[), {, this, ., loggingLevel, =, loggingLevel, ;, return, this, ;, }, private, final, List, <, String, >, externs, =]
[), {, this, ., loggingLevel, =, loggingLevel, ;, return, this, ;, }, private, final, List, <, String, >, externs, =]
[String, >, externs, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {]
[String, >, externs, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {]
[String, >, externs, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {]
[), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {, this, ., externs, ., clear, (, ), ;]
[), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {, this, ., externs, ., clear, (, ), ;]
[), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {, this, ., externs, ., clear, (, ), ;]
[<, String, >, externs, ), {, this, ., externs, ., clear, (, ), ;, this, ., externs, ., addAll, (]
[), {, this, ., externs, ., clear, (, ), ;, this, ., externs, ., addAll, (, externs, ), ;, return]
[., externs, ., addAll, (, externs, ), ;, return, this, ;, }, private, final, List, <, String, >, js, =]
[., externs, ., addAll, (, externs, ), ;, return, this, ;, }, private, final, List, <, String, >, js, =]
[String, >, js, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {]
[String, >, js, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {]
[String, >, js, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {]
[), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {, this, ., js, ., clear, (, ), ;]
[), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {, this, ., js, ., clear, (, ), ;]
[), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {, this, ., js, ., clear, (, ), ;]
[<, String, >, js, ), {, this, ., js, ., clear, (, ), ;, this, ., js, ., addAll, (]
[), {, this, ., js, ., clear, (, ), ;, this, ., js, ., addAll, (, js, ), ;, return]
[(, ), ;, this, ., js, ., addAll, (, js, ), ;, return, this, ;, }, private, String, jsOutputFile, =]
[js, ), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {]
[js, ), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {]
[this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this, ., jsOutputFile, =]
[private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this, ., jsOutputFile, =, jsOutputFile, ;, return]
[), {, this, ., jsOutputFile, =, jsOutputFile, ;, return, this, ;, }, private, final, List, <, String, >, module, =]
[), {, this, ., jsOutputFile, =, jsOutputFile, ;, return, this, ;, }, private, final, List, <, String, >, module, =]
[String, >, module, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {]
[String, >, module, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {]
[String, >, module, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {]
[), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {, this, ., module, ., clear, (, ), ;]
[), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {, this, ., module, ., clear, (, ), ;]
[), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {, this, ., module, ., clear, (, ), ;]
[<, String, >, module, ), {, this, ., module, ., clear, (, ), ;, this, ., module, ., addAll, (]
[), {, this, ., module, ., clear, (, ), ;, this, ., module, ., addAll, (, module, ), ;, return]
[(, ), ;, this, ., module, ., addAll, (, module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =]
[module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {]
[module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {]
[this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, ., variableMapInputFile, =]
[private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, ., variableMapInputFile, =, variableMapInputFile, ;, return]
[setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, ., variableMapInputFile, =, variableMapInputFile, ;, return, this, ;, }, private, String, propertyMapInputFile, =]
[=, variableMapInputFile, ;, return, this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {]
[=, variableMapInputFile, ;, return, this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {]
[this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, ., propertyMapInputFile, =]
[private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, ., propertyMapInputFile, =, propertyMapInputFile, ;, return]
[setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, ., propertyMapInputFile, =, propertyMapInputFile, ;, return, this, ;, }, private, String, variableMapOutputFile, =]
[=, propertyMapInputFile, ;, return, this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {]
[=, propertyMapInputFile, ;, return, this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {]
[this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, ., variableMapOutputFile, =]
[private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, ., variableMapOutputFile, =, variableMapOutputFile, ;, return]
[setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, ., variableMapOutputFile, =, variableMapOutputFile, ;, return, this, ;, }, private, boolean, createNameMapFiles, =]
[=, variableMapOutputFile, ;, return, this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {]
[=, variableMapOutputFile, ;, return, this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {]
[this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, ., createNameMapFiles, =]
[private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, ., createNameMapFiles, =, createNameMapFiles, ;, return]
[setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, ., createNameMapFiles, =, createNameMapFiles, ;, return, this, ;, }, private, String, propertyMapOutputFile, =]
[=, createNameMapFiles, ;, return, this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {]
[=, createNameMapFiles, ;, return, this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {]
[this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =]
[private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =, propertyMapOutputFile, ;, return]
[setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =, propertyMapOutputFile, ;, return, this, ;, }, private, CodingConvention, codingConvention, =]
[setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =, propertyMapOutputFile, ;, return, this, ;, }, private, CodingConvention, codingConvention, =]
[this, ;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {]
[this, ;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {]
[CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {, this, ., codingConvention, =]
[CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {, this, ., codingConvention, =, codingConvention, ;, return]
[setCodingConvention, (, CodingConvention, codingConvention, ), {, this, ., codingConvention, =, codingConvention, ;, return, this, ;, }, private, int, summaryDetailLevel, =]
[=, codingConvention, ;, return, this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {]
[=, codingConvention, ;, return, this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {]
[this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, ., summaryDetailLevel, =]
[private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, ., summaryDetailLevel, =, summaryDetailLevel, ;, return]
[setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, ., summaryDetailLevel, =, summaryDetailLevel, ;, return, this, ;, }, private, String, outputWrapper, =]
[=, summaryDetailLevel, ;, return, this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {]
[=, summaryDetailLevel, ;, return, this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {]
[this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {, this, ., outputWrapper, =]
[private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {, this, ., outputWrapper, =, outputWrapper, ;, return]
[), {, this, ., outputWrapper, =, outputWrapper, ;, return, this, ;, }, private, final, List, <, String, >, moduleWrapper, =]
[), {, this, ., outputWrapper, =, outputWrapper, ;, return, this, ;, }, private, final, List, <, String, >, moduleWrapper, =]
[String, >, moduleWrapper, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {]
[String, >, moduleWrapper, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {]
[String, >, moduleWrapper, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {]
[), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear, (, ), ;]
[), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear, (, ), ;]
[), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear, (, ), ;]
[<, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear, (, ), ;, this, ., moduleWrapper, ., addAll, (]
[), {, this, ., moduleWrapper, ., clear, (, ), ;, this, ., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return]
[(, ), ;, this, ., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =]
[moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {]
[moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {]
[this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, ., moduleOutputPathPrefix, =]
[private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, ., moduleOutputPathPrefix, =, moduleOutputPathPrefix, ;, return]
[setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, ., moduleOutputPathPrefix, =, moduleOutputPathPrefix, ;, return, this, ;, }, private, String, createSourceMap, =]
[=, moduleOutputPathPrefix, ;, return, this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {]
[=, moduleOutputPathPrefix, ;, return, this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {]
[this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {, this, ., createSourceMap, =]
[private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap, ;, return]
[String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap, ;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =]
[String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap, ;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =]
[String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap, ;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =]
[SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {]
[SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {]
[=, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =]
[DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return]
[DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =]
[DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =]
[DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =]
[SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {]
[SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {]
[=, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =]
[Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =, format, ;, return]
[SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =, format, ;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =]
[=, format, ;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {]
[=, format, ;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {]
[this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {, this, ., warningGuards, =]
[private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {, this, ., warningGuards, =, spec, ;, return]
[), {, this, ., warningGuards, =, spec, ;, return, this, ;, }, private, final, List, <, String, >, define, =]
[), {, this, ., warningGuards, =, spec, ;, return, this, ;, }, private, final, List, <, String, >, define, =]
[String, >, define, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {]
[String, >, define, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {]
[String, >, define, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {]
[), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {, this, ., define, ., clear, (, ), ;]
[), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {, this, ., define, ., clear, (, ), ;]
[), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {, this, ., define, ., clear, (, ), ;]
[<, String, >, define, ), {, this, ., define, ., clear, (, ), ;, this, ., define, ., addAll, (]
[), {, this, ., define, ., clear, (, ), ;, this, ., define, ., addAll, (, define, ), ;, return]
[., define, ., addAll, (, define, ), ;, return, this, ;, }, private, final, List, <, String, >, tweak, =]
[., define, ., addAll, (, define, ), ;, return, this, ;, }, private, final, List, <, String, >, tweak, =]
[String, >, tweak, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {]
[String, >, tweak, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {]
[String, >, tweak, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {]
[), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {, this, ., tweak, ., clear, (, ), ;]
[), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {, this, ., tweak, ., clear, (, ), ;]
[), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {, this, ., tweak, ., clear, (, ), ;]
[<, String, >, tweak, ), {, this, ., tweak, ., clear, (, ), ;, this, ., tweak, ., addAll, (]
[), {, this, ., tweak, ., clear, (, ), ;, this, ., tweak, ., addAll, (, tweak, ), ;, return]
[(, ), ;, this, ., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =]
[(, ), ;, this, ., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =]
[;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {]
[;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {]
[}, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing, =]
[tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing, =, tweakProcessing, ;, return]
[setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing, =, tweakProcessing, ;, return, this, ;, }, private, String, charset, =]
[=, tweakProcessing, ;, return, this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {]
[=, tweakProcessing, ;, return, this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {]
[this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {, this, ., charset, =]
[private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {, this, ., charset, =, charset, ;, return]
[setCharset, (, String, charset, ), {, this, ., charset, =, charset, ;, return, this, ;, }, private, boolean, manageClosureDependencies, =]
[=, charset, ;, return, this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {]
[=, charset, ;, return, this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {]
[this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {, this, ., manageClosureDependencies, =]
[private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {, this, ., manageClosureDependencies, =, newVal, ;, return]
[setManageClosureDependencies, (, boolean, newVal, ), {, this, ., manageClosureDependencies, =, newVal, ;, return, this, ;, }, private, boolean, onlyClosureDependencies, =]
[=, newVal, ;, return, this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {]
[=, newVal, ;, return, this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {]
[this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {, this, ., onlyClosureDependencies, =]
[private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {, this, ., onlyClosureDependencies, =, newVal, ;, return]
[newVal, ), {, this, ., onlyClosureDependencies, =, newVal, ;, return, this, ;, }, private, List, <, String, >, closureEntryPoints, =]
[newVal, ), {, this, ., onlyClosureDependencies, =, newVal, ;, return, this, ;, }, private, List, <, String, >, closureEntryPoints, =]
[String, >, closureEntryPoints, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {]
[String, >, closureEntryPoints, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {]
[ImmutableList, ., of, (, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (]
[(, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints, ), ;]
[(, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints, ), ;]
[setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints, ), ;, this, ., closureEntryPoints, =]
[<, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints, ), ;, this, ., closureEntryPoints, =, entryPoints, ;, return]
[entryPoints, ), ;, this, ., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =]
[entryPoints, ), ;, this, ., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =]
[String, >, outputManifests, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {]
[String, >, outputManifests, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {]
[ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {, this, ., outputManifests, =]
[ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {, this, ., outputManifests, =]
[String, >, outputManifests, ), {, this, ., outputManifests, =, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :]
[this, ., outputManifests, =, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (]
[., outputManifests, =, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !]
[., outputManifests, =, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !]
[), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (, ), ), {]
[), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (, ), ), {]
[), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (, ), ), {]
[:, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (, ), ), {, this, ., outputManifests, ., add, (]
[(, !, manifestName, ., isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }]
[(, !, manifestName, ., isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }]
[isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =]
[isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =]
[{, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (]
[{, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (]
[(, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return]
[., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =]
[outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {]
[outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {]
[this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this, ., outputModuleDependencies, =]
[private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this, ., outputModuleDependencies, =, outputModuleDependencies, ;, return]
[outputModuleDependencies, ), {, this, ., outputModuleDependencies, =, outputModuleDependencies, ;, return, this, ;, }, private, List, <, String, >, outputBundles, =]
[outputModuleDependencies, ), {, this, ., outputModuleDependencies, =, outputModuleDependencies, ;, return, this, ;, }, private, List, <, String, >, outputBundles, =]
[String, >, outputBundles, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {]
[String, >, outputBundles, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {]
[ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {, this, ., outputBundles, =]
[(, ), ;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {, this, ., outputBundles, =, outputBundles, ;, return]
[<, String, >, outputBundles, ), {, this, ., outputBundles, =, outputBundles, ;, return, this, ;, }, private, boolean, acceptConstKeyword, =]
[=, outputBundles, ;, return, this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {]
[=, outputBundles, ;, return, this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {]
[this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, ., acceptConstKeyword, =]
[private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, ., acceptConstKeyword, =, acceptConstKeyword, ;, return]
[setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, ., acceptConstKeyword, =, acceptConstKeyword, ;, return, this, ;, }, private, String, languageIn, =]
[=, acceptConstKeyword, ;, return, this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {]
[=, acceptConstKeyword, ;, return, this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {]
[this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {, this, ., languageIn, =]
[private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {, this, ., languageIn, =, languageIn, ;, return]
[setLanguageIn, (, String, languageIn, ), {, this, ., languageIn, =, languageIn, ;, return, this, ;, }, private, boolean, skipNormalOutputs, =]
[=, languageIn, ;, return, this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {]
[=, languageIn, ;, return, this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {]
[this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {, this, ., skipNormalOutputs, =]
[private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {, this, ., skipNormalOutputs, =, skipNormalOutputs, ;, return]
[skipNormalOutputs, ), {, this, ., skipNormalOutputs, =, skipNormalOutputs, ;, return, this, ;, }, private, List, <, String, >, manifestMaps, =]
[skipNormalOutputs, ), {, this, ., skipNormalOutputs, =, skipNormalOutputs, ;, return, this, ;, }, private, List, <, String, >, manifestMaps, =]
[String, >, manifestMaps, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {]
[String, >, manifestMaps, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {]
[ImmutableList, ., of, (, ), ;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {, this, ., manifestMaps, =]
[(, ), ;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {, this, ., manifestMaps, =, manifestMaps, ;, return]
[<, String, >, manifestMaps, ), {, this, ., manifestMaps, =, manifestMaps, ;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =]
[=, manifestMaps, ;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {]
[=, manifestMaps, ;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {]
[this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, ., transformAMDToCJSModules, =]
[private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, ., transformAMDToCJSModules, =, transformAMDToCJSModules, ;, return]
[setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, ., transformAMDToCJSModules, =, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean, processCommonJSModules, =]
[=, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {]
[=, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {]
[this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =]
[private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =, processCommonJSModules, ;, return]
[setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =, processCommonJSModules, ;, return, this, ;, }, private, String, commonJSModulePathPrefix, =]
[setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =, processCommonJSModules, ;, return, this, ;, }, private, String, commonJSModulePathPrefix, =]
[;, return, this, ;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {]
[;, return, this, ;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {]
[}, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix, =]
[commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix, =, commonJSModulePathPrefix, ;, return]
[setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix, =, commonJSModulePathPrefix, ;, return, this, ;, }, private, String, warningsWhitelistFile, =]
[=, commonJSModulePathPrefix, ;, return, this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {]
[=, commonJSModulePathPrefix, ;, return, this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {]
[this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {, this, ., warningsWhitelistFile, =]
[private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {, this, ., warningsWhitelistFile, =, fileName, ;, return]
[private, final, CheckLevel, level, ;, private, final, String, groupName, ;, private, Entry, (, CheckLevel, level, ,, String, groupName, ), {]
[private, final, CheckLevel, level, ;, private, final, String, groupName, ;, private, Entry, (, CheckLevel, level, ,, String, groupName, ), {]
[;, private, final, String, groupName, ;, private, Entry, (, CheckLevel, level, ,, String, groupName, ), {, this, ., level, =]
[final, String, groupName, ;, private, Entry, (, CheckLevel, level, ,, String, groupName, ), {, this, ., level, =, level, ;]
[final, String, groupName, ;, private, Entry, (, CheckLevel, level, ,, String, groupName, ), {, this, ., level, =, level, ;]
[private, Entry, (, CheckLevel, level, ,, String, groupName, ), {, this, ., level, =, level, ;, this, ., groupName, =]
[level, =, level, ;, this, ., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =]
[level, =, level, ;, this, ., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =]
[>, entries, =, Lists, ., newArrayList, (, ), ;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {]
[>, entries, =, Lists, ., newArrayList, (, ), ;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {]
[., newArrayList, (, ), ;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {, entries, ., add, (]
[), ;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {, entries, ., add, (, new, Entry, (]
[protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {, entries, ., add, (, new, Entry, (, level, ,]
[entries, ., add, (, new, Entry, (, level, ,, groupName, ), ), ;, }, protected, void, clear, (, ), {]
[entries, ., add, (, new, Entry, (, level, ,, groupName, ), ), ;, }, protected, void, clear, (, ), {]
