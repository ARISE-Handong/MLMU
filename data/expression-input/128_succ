[), ;, this, ., fixedRange, =, fixedRange, ;, this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;]
[=, fixedRange, ;, this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (]
[., fixedRange, =, fixedRange, ;, this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double]
[;, this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {]
[=, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return, this, ., displayStart]
[., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return, this]
[;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }]
[=, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }, public, double, getDisplayEnd, (]
[., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }, public, double]
[;, }, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }, public, double, getDisplayEnd, (, ), {]
[;, }, public, double, getDisplayEnd, (, ), {, return, this, ., displayEnd, ;, }, public, void, setDisplayRange, (, double, start]
[., displayStart, ;, }, public, double, getDisplayEnd, (, ), {, return, this, ., displayEnd, ;, }, public, void, setDisplayRange, (]
[;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (, start]
[., displayEnd, ;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange]
[=, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart]
[., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this]
[;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, )]
[), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd]
[=, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (, this]
[., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange]
[;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, .]
[), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this]
[), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, .]
[<, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {]
[., displayStart, <, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }]
[), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, .]
[., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (]
[;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this]
[,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound]
[., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange]
[), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (]
[., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, )]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (]
[,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (]
[., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -, this, ., fixedRange, .]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange]
[+, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new]
[., getUpperBound, (, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;]
[., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), )]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange]
[), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this]
[), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {]
[., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void]
[., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[;, }, protected, void, autoAdjustRange, (, ), {, setRange, (, this, ., fixedRange, ,, false, ,, false, ), ;, }]
[), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (, this, ., fixedRange, ,, false, ,, false, ), ;]
[), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (, this, ., fixedRange, ,, false, ,, false, )]
[;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0]
[,, false, ,, false, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[., fixedRange, ,, false, ,, false, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[,, false, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double]
[), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {]
[;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (, v, ,, area, ,]
[), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (, v, ,, area]
[), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (]
[<, this, ., displayEnd, ), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {]
[., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }]
[), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (]
[., displayEnd, ), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff]
[=, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart]
[;, }, else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double]
[,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd]
[,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /]
[), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;]
[;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this]
[/, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2]
[), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double]
[+, this, ., displayEnd, ), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this]
[., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, )]
[), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double]
[., displayEnd, ), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart]
[;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this]
[;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >]
[-, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;]
[., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, .]
[., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, .]
[;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >]
[., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (]
[;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,]
[-, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =]
[;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,]
[., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,]
[., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,]
[), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {]
[>, cutoff, ), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }]
[), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {]
[=, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd]
[;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }]
[,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area]
[,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge]
[,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1]
[,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1, ,, length2]
[), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;]
[=, transEnd, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, }, return, result, ;, }]
[;, }, }, return, result, ;, }, private, double, trans, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[,, area, ,, edge, ,, length1, ,, length2, ), ;, }, }, return, result, ;, }, private, double, trans, (]
[,, edge, ,, length1, ,, length2, ), ;, }, }, return, result, ;, }, private, double, trans, (, double, value]
[,, length1, ,, length2, ), ;, }, }, return, result, ;, }, private, double, trans, (, double, value, ,, Rectangle2D]
[,, length2, ), ;, }, }, return, result, ;, }, private, double, trans, (, double, value, ,, Rectangle2D, area, ,]
[), ;, }, }, return, result, ;, }, private, double, trans, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[;, }, private, double, trans, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, min, =, 0.0]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max]
[), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, .]
[., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX]
[), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area]
[=, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, )]
[;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge]
[., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }]
[=, area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[+, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min]
[., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area]
[), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, .]
[., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY]
[), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area]
[=, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, )]
[;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (]
[., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }]
[=, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), )]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, )]
[-, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, )]
[., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd]
[-, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), )]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd]
[*, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[/, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else]
[), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[-, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -]
[), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, )]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, .]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, .]
[;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[+, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), )]
[;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[*, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,]
[/, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, }]
[), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[-, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -]
[), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, )]
[), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,]
[), ), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double]
[., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private, double, transStart]
[), ), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area]
[., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private, double, transStart, (, double, value, ,]
[;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,]
[-, min, ), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double]
[), ;, }, }, private, double, transStart, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max]
[), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, .]
[., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX]
[), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area]
[=, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, )]
[;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (, length1, +]
[., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1]
[=, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (, length1, +, length2, )]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[+, area, ., getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge]
[., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[/, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min]
[*, length1, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[/, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (]
[+, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, .]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (]
[), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, .]
[., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY]
[), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area]
[=, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, )]
[;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (, length1, +]
[., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1]
[=, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (, length1, +, length2, )]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, )]
[-, area, ., getHeight, (, ), *, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (]
[., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (, length1, +, length2, ), ;, }]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, )]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[*, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[., getHeight, (, ), *, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), )]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, )]
[), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart]
[+, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this]
[), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart]
[), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange]
[-, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange]
[*, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[/, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[-, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), )]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {]
[., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value]
[;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, .]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, .]
[;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[+, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this]
[;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[*, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,]
[/, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[-, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), )]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,]
[), ), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double]
[., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private]
[., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }]
[), ), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area]
[., displayStart, ), ), *, (, max, -, min, ), ;, }, }, private, double, transEnd, (, double, value, ,]
[;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double]
[), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,]
[-, min, ), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double]
[), ;, }, }, private, double, transEnd, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min]
[), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area, .]
[., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX]
[), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area]
[=, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, )]
[;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (, length1, +]
[., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2]
[=, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (, length1, +, length2, )]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, )]
[-, area, ., getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge]
[., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, )]
[/, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max]
[*, length2, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[/, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, )]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (]
[+, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, .]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (]
[), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area, .]
[., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY]
[), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area]
[=, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, )]
[;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (, length1, +]
[., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2]
[=, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (, length1, +, length2, )]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange, .]
[+, area, ., getHeight, (, ), *, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (]
[., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (, length1, +, length2, ), ;, }]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange, .]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[*, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[., getHeight, (, ), *, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), )]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange, .]
[), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange]
[+, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this]
[), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange]
[), {, return, max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this]
[;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /]
[-, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this]
[;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /]
[*, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[/, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), )]
[., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, )]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, .]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this]
[., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min]
[;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), )]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (]
[), ;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), )]
[;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (]
[+, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this]
[;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (]
[*, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =]
[), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower]
[/, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), )]
[., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, )]
[), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower]
[), ), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, }, private]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }]
[), ), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double]
[., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double]
[., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange]
[;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (]
[), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound]
[-, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange]
[), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound]
[;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return]
[., getLowerBound, (, ), ;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <]
[., fixedRange, ., getLowerBound, (, ), ;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (]
[;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (, value, -, lower, ), %]
[., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (, value]
[., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (]
[), {, return, lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {]
[<, lower, ), {, return, lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }]
[), {, return, lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {]
[;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, ), ;, }, }, public]
[+, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (, value]
[+, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (]
[+, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (, value]
[;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, ), ;, }, }, public]
[), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, ), ;, }, }]
[%, length, ), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, ), ;]
[), %, length, ), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, )]
[-, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %]
[), %, length, ), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, )]
[), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %, length, ), ;, }, }]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[+, (, (, value, -, lower, ), %, length, ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result]
[%, length, ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {]
[), %, length, ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[-, lower, ), %, length, ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge]
[), %, length, ), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[), ;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result]
[;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,]
[), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {, }, return]
[<, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }]
[., displayStart, <, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, )]
[), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {, }, return]
[., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {]
[=, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {, }, return, result, ;, }]
[;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart]
[., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double]
[,, area, ,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {]
[,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (]
[), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (, this, .]
[;, }, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return]
[), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (, this, .]
[<, this, ., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {]
[., displayStart, <, this, ., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }]
[), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (, this, .]
[., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (]
[;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[-, this, ., displayStart, ), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this]
[., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, )]
[), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[., displayStart, ), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart]
[;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (, getDisplayLength, (, )]
[+, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double]
[-, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;]
[., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound]
[., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double]
[., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }]
[;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (, getDisplayLength, (, )]
[), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (, getDisplayLength, (]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {]
[), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (, getDisplayLength, (]
[., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart]
[., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this]
[;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (, ), ), ;, }]
[), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (, ), ), ;]
[+, (, getDisplayLength, (, ), /, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange]
[., displayStart, +, (, getDisplayLength, (, ), /, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, )]
[), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (, ), ), ;]
[), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (, ), )]
[/, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (]
[), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, getDisplayCentralValue, (, ), )]
[;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {]
[,, getDisplayCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, )]
[), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue]
[>, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength]
[), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue]
[;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;]
[/, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true]
[*, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange]
[/, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true]
[;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;]
[;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area]
[,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (]
[-, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double]
[,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (]
[), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D]
[+, halfLength, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (, double, length]
[), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D]
[;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =]
[), ;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength]
[;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, .]
[), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, .]
[>, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength]
[., displayEnd, >, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else]
[), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, .]
[., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (]
[=, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound]
[;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[-, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this]
[., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, )]
[;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart]
[=, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =, area]
[+, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =]
[-, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;]
[., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound]
[., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =]
[., displayStart, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double]
[;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =, area]
[), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =]
[-, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, .]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (]
[), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =]
[., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (]
[;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =, area, ., getHeight, (, ), ;, }]
[), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, )]
[., isLeftOrRight, (, edge, ), ), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {, areaLength, =]
[), ), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (]
[=, area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return]
[;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (, length, /, axisLength, ), *]
[., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (, length]
[=, area, ., getWidth, (, ), ;, }, return, (, length, /, axisLength, ), *, areaLength, ;, }, public, boolean]
[;, }, return, (, length, /, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {]
[., getWidth, (, ), ;, }, return, (, length, /, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[*, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {]
[/, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (]
[), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=]
[), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=]
[), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart]
[instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this]
[;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=, that, ., displayStart, )]
[;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;]
[!=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, )]
[., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;]
[., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return]
[;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), )]
[!=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (, that]
[., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals]
[), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), )]
[., displayEnd, ), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange]
[;, }, if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, }]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, }]
[., equals, (, that, ., fixedRange, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, )]
[., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return, false, ;, }, return, super, ., equals, (]
[), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, }]
[., fixedRange, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, }]
[;, }, return, super, ., equals, (, obj, ), ;, }, }]
[;, }, }]
[., equals, (, obj, ), ;, }, }]
[), ;, }, }]
