[Serializable, ;, public, class, StandardGradientPaintTransformer, implements, GradientPaintTransformer, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, public, class, StandardGradientPaintTransformer, implements, GradientPaintTransformer, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[private, static, final, long, serialVersionUID, =, -, 8155025776964678320L, ;, private, GradientPaintTransformType, type, ;, public, StandardGradientPaintTransformer, (, ), {, this, (]
[private, static, final, long, serialVersionUID, =, -, 8155025776964678320L, ;, private, GradientPaintTransformType, type, ;, public, StandardGradientPaintTransformer, (, ), {, this, (]
[(, ), {, this, (, GradientPaintTransformType, ., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (]
[(, ), {, this, (, GradientPaintTransformType, ., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (]
[{, this, (, GradientPaintTransformType, ., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (, type, ==]
[., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw]
[;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }]
[(, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }]
[{, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =]
[IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return]
[IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return]
[return, this, ., type, ;, }, public, GradientPaint, transform, (, GradientPaint, paint, ,, Shape, target, ), {, GradientPaint, result, =]
[}, public, GradientPaint, transform, (, GradientPaint, paint, ,, Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds, =]
[}, public, GradientPaint, transform, (, GradientPaint, paint, ,, Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds, =]
[Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (]
[Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (]
[Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (]
[=, paint, ;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (]
[=, paint, ;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (]
[target, ., getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {]
[getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =]
[;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (]
[this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,]
[), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMaxY, (, ), ,]
[), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMaxY, (, ), ,]
[(, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (]
[(, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (]
[(, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =]
[else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (]
[this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, )]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, )]
[GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[., getMinX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,]
[), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, )]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[(, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (]
[(, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (]
[(, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (]
[(, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =]
[else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (]
[this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,]
[), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, )]
[., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,]
[), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, )]
[), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,]
[), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (]
[), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (]
[), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (]
[,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, ., type, ., equals, (]
[,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, ., type, ., equals, (]
[,, true, ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =]
[else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (]
[this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, )]
[GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,]
[GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,]
[), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, )]
[., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,]
[(, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, true, ), ;, }, return]
[), ,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =]
[if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, )]
[obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (]
[obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (]
[obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (]
[), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=]
[), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=]
[StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=, that, ., type, ), {, return]
[StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=, that, ., type, ), {, return, false, ;, }, return]
[type, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[type, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[(, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return]
[), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (]
[), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (]
[), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (]
[), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (]
[return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=]
[., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=, null, ?]
[., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=, null, ?]
[., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=, null, ?]
[hashCode, (, ), {, return, (, this, ., type, !=, null, ?, this, ., type, ., hashCode, (, ), :]
