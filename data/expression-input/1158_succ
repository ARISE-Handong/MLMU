[;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {, Preconditions, ., checkArgument, (, ancestors, ., length, >, 0, ), ;, for]
[;, for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break, ;]
[., checkArgument, (, ancestors, ., length, >, 0, ), ;, for, (, Node, n, :, ancestors, ), {, if, (]
[), ;, for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break]
[>, 0, ), ;, for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), )]
[., length, >, 0, ), ;, for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (]
[), ;, for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break]
[), {, if, (, n, ., isFunction, (, ), ), {, break, ;, }, this, ., ancestors, ., add, (]
[), {, break, ;, }, this, ., ancestors, ., add, (, 0, ,, n, ), ;, }, }, @, Override]
[., isFunction, (, ), ), {, break, ;, }, this, ., ancestors, ., add, (, 0, ,, n, ), ;]
[;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==]
[., add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !]
[., ancestors, ., add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {]
[,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size]
[), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, )]
[;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if]
[;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if]
[), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;]
[&&, ancestors, ., peek, (, ), ., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next]
[==, 1, &&, ancestors, ., peek, (, ), ., getNext, (, ), ==, null, ), ;, }, @, Override, public]
[., size, (, ), ==, 1, &&, ancestors, ., peek, (, ), ., getNext, (, ), ==, null, ), ;]
[&&, ancestors, ., peek, (, ), ., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next]
[), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;]
[==, null, ), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (]
[., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =]
[., peek, (, ), ., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next, (, )]
[), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;]
[;, if, (, current, ., getNext, (, ), ==, null, ), {, current, =, ancestors, ., peek, (, ), ;]
[., pop, (, ), ;, if, (, current, ., getNext, (, ), ==, null, ), {, current, =, ancestors, .]
[), {, current, =, ancestors, ., peek, (, ), ;, if, (, current, ., isFunction, (, ), ), {, return]
[==, null, ), {, current, =, ancestors, ., peek, (, ), ;, if, (, current, ., isFunction, (, ), )]
[., getNext, (, ), ==, null, ), {, current, =, ancestors, ., peek, (, ), ;, if, (, current, .]
[), {, current, =, ancestors, ., peek, (, ), ;, if, (, current, ., isFunction, (, ), ), {, return]
[=, ancestors, ., peek, (, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, )]
[;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, else, {, current]
[., peek, (, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }]
[), {, return, next, (, ), ;, }, }, else, {, current, =, current, ., getNext, (, ), ;, ancestors]
[., isFunction, (, ), ), {, return, next, (, ), ;, }, }, else, {, current, =, current, ., getNext]
[;, }, }, else, {, current, =, current, ., getNext, (, ), ;, ancestors, ., push, (, current, ), ;]
[=, current, ., getNext, (, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (]
[;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (]
[., getNext, (, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), )]
[;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, while, (, current, .]
[., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;]
[), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, while, (, current]
[), {, return, next, (, ), ;, }, while, (, current, ., hasChildren, (, ), ), {, current, =, current]
[., isFunction, (, ), ), {, return, next, (, ), ;, }, while, (, current, ., hasChildren, (, ), )]
[;, }, while, (, current, ., hasChildren, (, ), ), {, current, =, current, ., getFirstChild, (, ), ;, ancestors]
[), {, current, =, current, ., getFirstChild, (, ), ;, ancestors, ., push, (, current, ), ;, if, (, current]
[., hasChildren, (, ), ), {, current, =, current, ., getFirstChild, (, ), ;, ancestors, ., push, (, current, )]
[=, current, ., getFirstChild, (, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (]
[;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (]
[., getFirstChild, (, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), )]
[;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, }, return, current]
[., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;]
[), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, }, return]
[), {, return, next, (, ), ;, }, }, }, return, current, ;, }, @, Override, public, void, remove, (]
[., isFunction, (, ), ), {, return, next, (, ), ;, }, }, }, return, current, ;, }, @, Override]
[;, }, }, }, return, current, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, protected, Node]
[;, }, protected, Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (]
[), ;, }, protected, Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent]
[;, }, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?, ancestors, ., get]
[., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2]
[;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (]
[?, ancestors, ., get, (, ancestors, ., size, (, ), -, 2, ), :, null, ;, }, List, <, Node]
[>=, 2, ?, ancestors, ., get, (, ancestors, ., size, (, ), -, 2, ), :, null, ;, }, List]
[., size, (, ), >=, 2, ?, ancestors, ., get, (, ancestors, ., size, (, ), -, 2, ), :]
[?, ancestors, ., get, (, ancestors, ., size, (, ), -, 2, ), :, null, ;, }, List, <, Node]
[:, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, .]
[., get, (, ancestors, ., size, (, ), -, 2, ), :, null, ;, }, List, <, Node, >, currentAncestors]
[), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists]
[-, 2, ), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list]
[., size, (, ), -, 2, ), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List]
[), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists]
[;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (]
[;, Collections, ., reverse, (, list, ), ;, return, list, ;, }, }, static, class, LocalVarMotion, implements, Iterator, <, Node]
[., newArrayList, (, ancestors, ), ;, Collections, ., reverse, (, list, ), ;, return, list, ;, }, }, static, class]
[), ;, Collections, ., reverse, (, list, ), ;, return, list, ;, }, }, static, class, LocalVarMotion, implements, Iterator, <]
[;, return, list, ;, }, }, static, class, LocalVarMotion, implements, Iterator, <, Node, >, {, private, final, boolean, valueHasSideEffects, ;]
[., reverse, (, list, ), ;, return, list, ;, }, }, static, class, LocalVarMotion, implements, Iterator, <, Node, >, {]
[), ;, return, list, ;, }, }, static, class, LocalVarMotion, implements, Iterator, <, Node, >, {, private, final, boolean, valueHasSideEffects]
[;, }, }, static, class, LocalVarMotion, implements, Iterator, <, Node, >, {, private, final, boolean, valueHasSideEffects, ;, private, final, FunctionlessLocalScope]
[;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new]
[., checkArgument, (, var, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, )]
[), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,]
[., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new]
[;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,, var, ,, block, ), ), ;, }, static]
[., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (]
[), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,, var, ,, block, ), ), ;, }]
[., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,, var, ,]
[), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,, var, ,, block, ), ), ;]
[;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {, Preconditions]
[,, new, FunctionlessLocalScope, (, name, ,, var, ,, block, ), ), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,]
[), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {]
[,, var, ,, block, ), ), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr]
[,, block, ), ), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node]
[), ), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, )]
[;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope]
[., checkArgument, (, assign, ., isAssign, (, ), ), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), )]
[), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new]
[., isAssign, (, ), ), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion]
[;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign, ,, expr, ,, block, ), ), ;, }, private]
[., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign]
[), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign, ,, expr, ,, block, ), ), ;, }]
[., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign, ,, expr, ,, block]
[;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (, nameNode, ., isName, (]
[,, new, FunctionlessLocalScope, (, assign, ,, expr, ,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope]
[), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (, nameNode, ., isName]
[,, expr, ,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, .]
[,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (]
[), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (, nameNode, .]
[;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, )]
[., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;]
[), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (]
[., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =]
[;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil]
[., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =]
[), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&]
[=, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode]
[., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects]
[;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =]
[., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;]
[=, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (]
[., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;]
[;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, )]
[&&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }]
[!=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, )]
[&&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }]
[;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, )]
[., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override]
[), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (]
[=, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, lookAhead, !=]
[., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return]
[;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, lookAhead, !=, null, ;]
[;, }, @, Override, public, boolean, hasNext, (, ), {, return, lookAhead, !=, null, ;, }, @, Override, public, Node]
[), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, lookAhead, !=, null, ;, }, @, Override, public]
[;, }, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;, advanceLookAhead, (, false, ), ;]
[!=, null, ;, }, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;, advanceLookAhead, (, false]
[;, }, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;, advanceLookAhead, (, false, ), ;]
[;, advanceLookAhead, (, false, ), ;, return, next, ;, }, @, Override, public, void, remove, (, ), {, throw, new]
[;, return, next, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;]
[), ;, return, next, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", )]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, private, void]
[;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !, atStart, ), {, if, (, lookAhead, ==]
[), ;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !, atStart, ), {, if, (, lookAhead]
[), {, if, (, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, )]
[), {, if, (, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, )]
[), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (]
[==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (, curNode, .]
[), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (]
[;, if, (, curNode, ., isName, (, ), &&, varName, ., equals, (, curNode, ., getString, (, ), ), )]
[., current, (, ), ;, if, (, curNode, ., isName, (, ), &&, varName, ., equals, (, curNode, ., getString]
[), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {]
[&&, varName, ., equals, (, curNode, ., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }]
[., isName, (, ), &&, varName, ., equals, (, curNode, ., getString, (, ), ), ), {, lookAhead, =, null]
[), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {]
[., equals, (, curNode, ., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }, }, if]
[), ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), )]
[., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, .]
[=, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, lookAhead, =, null]
[;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, lookAhead, =, null, ;, return]
[), {, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent]
[), {, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent]
[., hasNext, (, ), ), {, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (]
[=, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =, iterator, .]
[;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =, iterator, ., currentParent, (]
[;, Node, nextParent, =, iterator, ., currentParent, (, ), ;, int, type, =, nextNode, ., getType, (, ), ;, if]
[., next, (, ), ;, Node, nextParent, =, iterator, ., currentParent, (, ), ;, int, type, =, nextNode, ., getType]
[;, int, type, =, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;]
[., currentParent, (, ), ;, int, type, =, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean]
[;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&]
[., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (, nextNode, .]
[), {, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&, !, varName, ., equals]
[;, if, (, (, nextNode, ., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, )]
[), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState]
[||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==]
[), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent]
[&&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (, nextNode, ., isGetProp, (, )]
[., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (, nextNode]
[), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent]
[), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent]
[., equals, (, nextNode, ., getString, (, ), ), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, .]
[), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (]
[., getString, (, ), ), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), )]
[), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState]
[), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {]
[||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !]
[), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {]
[., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,]
[), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew]
[||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if]
[==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }]
[||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if]
[), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew]
[), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew]
[., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (, nextNode, .]
[,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||]
[), ), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, .]
[=, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew, (, ), )]
[;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew, (, ), ), {, readsState]
[), {, readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }]
[||, nextNode, ., isNew, (, ), ), {, readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =]
[., isCall, (, ), ||, nextNode, ., isNew, (, ), ), {, readsState, =, true, ;, }, if, (, readsState]
[), {, readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }]
[., isNew, (, ), ), {, readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;]
[=, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil]
[;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects]
[), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type]
[=, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, .]
[;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||]
[), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;]
[&&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {]
[., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, .]
[), &&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), )]
[||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;]
[!=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =]
[||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;]
[., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;]
[), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[&&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }]
[==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead]
[&&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }]
[., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode]
[), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[=, null, ;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[;, return, ;, }, lookAhead, =, nextNode, ;, }, }, }]
[=, nextNode, ;, }, }, }]
[;, }, }, }]
