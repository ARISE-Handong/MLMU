[,, remainingRegion, ), ;, }, @, Override, protected, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, buildNew, (, final, Hyperplane, <, Euclidean3D]
[), ;, }, @, Override, protected, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, buildNew, (, final, Hyperplane, <, Euclidean3D, >, hyperplane]
[;, }, @, Override, public, Side, side, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =, (]
[,, remainingRegion, ), ;, }, @, Override, public, Side, side, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane]
[), ;, }, @, Override, public, Side, side, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final]
[;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset]
[), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;]
[), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, )]
[==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -]
[), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, )]
[;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?]
[., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (]
[), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, )]
[;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D]
[?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, )]
[), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER]
[<, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :]
[), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER]
[), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER]
[:, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p]
[., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }]
[;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D]
[), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;]
[?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, .]
[), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter]
[>, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace]
[), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter]
[:, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, .]
[., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;]
[., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, )]
[;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;]
[., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, )]
[;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), )]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, )]
[., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (]
[), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (]
[., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, .]
[;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp]
[., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, .]
[,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), )]
[., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, .]
[), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D]
[., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0]
[), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, org, .]
[<, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final]
[., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p]
[), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }]
[., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q]
[), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, org, .]
[;, p, =, q, ;, q, =, tmp, ;, }, final, org, ., apache, ., commons, ., math3, ., geometry]
[=, q, ;, q, =, tmp, ;, }, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean]
[;, q, =, tmp, ;, }, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod]
[=, tmp, ;, }, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line]
[;, }, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line2D, =]
[;, return, getRemainingRegion, (, ), ., side, (, line2D, ), ;, }, @, Override, public, SplitSubHyperplane, <, Euclidean3D, >, split]
[,, q, ), ;, return, getRemainingRegion, (, ), ., side, (, line2D, ), ;, }, @, Override, public, SplitSubHyperplane, <]
[), ;, return, getRemainingRegion, (, ), ., side, (, line2D, ), ;, }, @, Override, public, SplitSubHyperplane, <, Euclidean3D, >]
[;, }, @, Override, public, SplitSubHyperplane, <, Euclidean3D, >, split, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane]
[., side, (, line2D, ), ;, }, @, Override, public, SplitSubHyperplane, <, Euclidean3D, >, split, (, Hyperplane, <, Euclidean3D, >]
[), ;, }, @, Override, public, SplitSubHyperplane, <, Euclidean3D, >, split, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final]
[;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset]
[), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;]
[), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, )]
[==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -]
[), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, )]
[;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :]
[., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (]
[), ;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, )]
[;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D]
[?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,]
[), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this]
[<, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D]
[), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this]
[), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this]
[:, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (]
[,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane]
[), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace]
[;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D]
[,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, )]
[), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;]
[;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;]
[., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, )]
[;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), )]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, )]
[., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (]
[), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (]
[., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, .]
[;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp]
[., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, .]
[,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), )]
[., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, .]
[), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D]
[., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0]
[), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <]
[<, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final]
[., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p]
[), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }]
[., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q]
[), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <]
[;, p, =, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =, new, org, .]
[=, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =, new, org, ., apache, .]
[;, q, =, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =, new, org, ., apache, ., commons, .]
[=, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =, new, org, ., apache, ., commons, ., math3, .]
[;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =, new, org, ., apache, ., commons, ., math3, ., geometry, .]
[;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean]
[., wholeHyperplane, (, ), ;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =, new, org, ., apache, ., commons, ., math3]
[,, q, ), ., wholeHyperplane, (, ), ;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =, new, org, ., apache, .]
[), ., wholeHyperplane, (, ), ;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =, new, org, ., apache, ., commons, .]
[;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree, (, false, ), ., split, (, l2DMinus]
[., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree, (, false, )]
[,, p, ), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree]
[), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree, (, false]
[;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getPlus, (, ), )]
[., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree]
[., getTree, (, false, ), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (]
[), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (]
[), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getPlus, (, )]
[;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, ), )]
[?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,]
[., isEmpty, (, splitTree, ., getPlus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, )]
[), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus]
[., getPlus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, )]
[., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, .]
[;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, ), )]
[,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,, splitTree, ., getPlus, (, ), ,, null, )]
[,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, )]
[), ,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (]
[., FALSE, ), ,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =]
[,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus]
[., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty]
[), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, )]
[;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (]
[?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,]
[., isEmpty, (, splitTree, ., getMinus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, )]
[), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus]
[., getMinus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, )]
[., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, .]
[;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (]
[,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,, splitTree, ., getMinus, (, ), ,, null, )]
[,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (]
[), ,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane]
[., FALSE, ), ,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (]
[,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,]
[., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, .]
[), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet]
[;, }, }]
[,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, minusTree, ), ), ), ;, }, }]
[,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (]
[., copySelf, (, ), ,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (, thisPlane, ., copySelf, (, )]
[), ,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, minusTree, ), ), ), ;, }]
[), ), ,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, minusTree, ), ), ), ;]
[), ;, }, }]
[,, new, PolygonsSet, (, minusTree, ), ), ), ;, }, }]
[., copySelf, (, ), ,, new, PolygonsSet, (, minusTree, ), ), ), ;, }, }]
[), ), ;, }, }]
[), ), ), ;, }, }]
