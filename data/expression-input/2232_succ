[;, private, static, final, double, DEFAULT_GAMMA, =, 0.5, ;, private, final, double, khi, ;, private, final, double, gamma, ;, public]
[;, private, final, double, khi, ;, private, final, double, gamma, ;, public, MultiDirectionalSimplex, (, final, int, n, ), {, this]
[,, 1d, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,]
[), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,]
[,, sideLength, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, final, double, khi, ,]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, final, double, khi, ,, final, double]
[,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, final, double, khi, ,, final, double, gamma, )]
[), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, final, double, khi, ,, final, double, gamma, ), {, this]
[,, 1d, ,, khi, ,, gamma, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ,, final]
[,, khi, ,, gamma, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, khi]
[,, gamma, ), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, khi, ,, final]
[), ;, }, public, MultiDirectionalSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, khi, ,, final, double, gamma]
[,, sideLength, ), ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (]
[), ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double]
[=, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ), {]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps]
[;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ), {, this, (]
[=, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_KHI, ,]
[., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,]
[;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, )]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ,, final, double, khi, ,]
[,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ,, final, double, khi, ,, final, double]
[), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], steps, ,, final, double, khi, ,, final, double, gamma, )]
[), ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double]
[=, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], []
[;, this, ., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {]
[=, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,]
[., gamma, =, gamma, ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (]
[;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,, DEFAULT_KHI, ,]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double]
[,, DEFAULT_GAMMA, ), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double, khi, ,]
[), ;, }, public, MultiDirectionalSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double, khi, ,, final, double]
[), ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, @, Override, public, void, iterate]
[=, khi, ;, this, ., gamma, =, gamma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction]
[;, this, ., gamma, =, gamma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator]
[=, gamma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator]
[., gamma, =, gamma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair]
[;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {]
[;, final, PointValuePair, best, =, original, [, 0, ], ;, final, PointValuePair, reflected, =, evaluateNewSimplex, (, evaluationFunction, ,, original, ,]
[;, final, PointValuePair, reflected, =, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, 1, ,, comparator, ), ;, if, (, comparator, .]
[[, 0, ], ;, final, PointValuePair, reflected, =, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, 1, ,, comparator, ), ;, if]
[], ;, final, PointValuePair, reflected, =, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, 1, ,, comparator, ), ;, if, (, comparator]
[;, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, PointValuePair, [, ], reflectedSimplex]
[,, original, ,, 1, ,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0]
[,, 1, ,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {]
[,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, PointValuePair]
[), ;, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, PointValuePair, [, ]]
[), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, ), ;, final, PointValuePair, expanded, =, evaluateNewSimplex, (, evaluationFunction, ,]
[<, 0, ), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, ), ;, final, PointValuePair, expanded, =, evaluateNewSimplex, (]
[., compare, (, reflected, ,, best, ), <, 0, ), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, )]
[,, best, ), <, 0, ), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, ), ;, final, PointValuePair, expanded]
[), <, 0, ), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, ), ;, final, PointValuePair, expanded, =, evaluateNewSimplex]
[), {, final, PointValuePair, [, ], reflectedSimplex, =, getPoints, (, ), ;, final, PointValuePair, expanded, =, evaluateNewSimplex, (, evaluationFunction, ,]
[;, final, PointValuePair, expanded, =, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, khi, ,, comparator, ), ;, if, (, comparator, .]
[;, if, (, comparator, ., compare, (, reflected, ,, expanded, ), <=, 0, ), {, setPoints, (, reflectedSimplex, ), ;]
[,, original, ,, khi, ,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, expanded, ), <=, 0]
[,, khi, ,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, expanded, ), <=, 0, ), {]
[,, comparator, ), ;, if, (, comparator, ., compare, (, reflected, ,, expanded, ), <=, 0, ), {, setPoints, (]
[), ;, if, (, comparator, ., compare, (, reflected, ,, expanded, ), <=, 0, ), {, setPoints, (, reflectedSimplex, )]
[), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, gamma, ,, comparator]
[<=, 0, ), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, gamma]
[., compare, (, reflected, ,, expanded, ), <=, 0, ), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }]
[,, expanded, ), <=, 0, ), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,]
[), <=, 0, ), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,]
[), {, setPoints, (, reflectedSimplex, ), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, gamma, ,, comparator]
[;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, gamma, ,, comparator, ), ;, }, private, PointValuePair, evaluateNewSimplex]
[), ;, }, return, ;, }, evaluateNewSimplex, (, evaluationFunction, ,, original, ,, gamma, ,, comparator, ), ;, }, private, PointValuePair]
[;, }, private, PointValuePair, evaluateNewSimplex, (, final, MultivariateFunction, evaluationFunction, ,, final, PointValuePair, [, ], original, ,, final, double, coeff, ,]
[,, original, ,, gamma, ,, comparator, ), ;, }, private, PointValuePair, evaluateNewSimplex, (, final, MultivariateFunction, evaluationFunction, ,, final, PointValuePair, []
[,, gamma, ,, comparator, ), ;, }, private, PointValuePair, evaluateNewSimplex, (, final, MultivariateFunction, evaluationFunction, ,, final, PointValuePair, [, ], original]
[,, comparator, ), ;, }, private, PointValuePair, evaluateNewSimplex, (, final, MultivariateFunction, evaluationFunction, ,, final, PointValuePair, [, ], original, ,, final]
[), ;, }, private, PointValuePair, evaluateNewSimplex, (, final, MultivariateFunction, evaluationFunction, ,, final, PointValuePair, [, ], original, ,, final, double, coeff]
[;, setPoint, (, 0, ,, original, [, 0, ], ), ;, final, int, dim, =, getDimension, (, ), ;, for]
[., getPointRef, (, ), ;, setPoint, (, 0, ,, original, [, 0, ], ), ;, final, int, dim, =, getDimension]
[[, 0, ], ., getPointRef, (, ), ;, setPoint, (, 0, ,, original, [, 0, ], ), ;, final, int]
[], ., getPointRef, (, ), ;, setPoint, (, 0, ,, original, [, 0, ], ), ;, final, int, dim, =]
[;, final, int, dim, =, getDimension, (, ), ;, for, (, int, i, =, 1, ;, i, <, getSize, (]
[,, original, [, 0, ], ), ;, final, int, dim, =, getDimension, (, ), ;, for, (, int, i, =]
[), ;, final, int, dim, =, getDimension, (, ), ;, for, (, int, i, =, 1, ;, i, <, getSize]
[[, 0, ], ), ;, final, int, dim, =, getDimension, (, ), ;, for, (, int, i, =, 1, ;]
[], ), ;, final, int, dim, =, getDimension, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[;, for, (, int, i, =, 1, ;, i, <, getSize, (, ), ;, i, ++, ), {, final, double]
[;, i, <, getSize, (, ), ;, i, ++, ), {, final, double, [, ], xOriginal, =, original, [, i]
[;, i, ++, ), {, final, double, [, ], xOriginal, =, original, [, i, ], ., getPointRef, (, ), ;]
[<, getSize, (, ), ;, i, ++, ), {, final, double, [, ], xOriginal, =, original, [, i, ], .]
[;, i, ++, ), {, final, double, [, ], xOriginal, =, original, [, i, ], ., getPointRef, (, ), ;]
[), {, final, double, [, ], xOriginal, =, original, [, i, ], ., getPointRef, (, ), ;, final, double, []
[++, ), {, final, double, [, ], xOriginal, =, original, [, i, ], ., getPointRef, (, ), ;, final, double]
[;, final, double, [, ], xTransformed, =, new, double, [, dim, ], ;, for, (, int, j, =, 0, ;]
[., getPointRef, (, ), ;, final, double, [, ], xTransformed, =, new, double, [, dim, ], ;, for, (, int]
[[, i, ], ., getPointRef, (, ), ;, final, double, [, ], xTransformed, =, new, double, [, dim, ], ;]
[], ., getPointRef, (, ), ;, final, double, [, ], xTransformed, =, new, double, [, dim, ], ;, for, (]
[;, for, (, int, j, =, 0, ;, j, <, dim, ;, j, ++, ), {, xTransformed, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, dim, ;, j, ++, ), {, xTransformed, [, j]
[;, j, <, dim, ;, j, ++, ), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff]
[;, j, ++, ), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, []
[<, dim, ;, j, ++, ), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff, *, (]
[;, j, ++, ), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, []
[), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, [, j, ], -]
[++, ), {, xTransformed, [, j, ], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, [, j, ]]
[=, xSmallest, [, j, ], +, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j, ], ), ;]
[[, j, ], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j]
[], =, xSmallest, [, j, ], +, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j, ], )]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;, }]
[+, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j, ], ), ;, }, setPoint, (, i, ,]
[[, j, ], +, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j, ], ), ;, }, setPoint]
[], +, coeff, *, (, xSmallest, [, j, ], -, xOriginal, [, j, ], ), ;, }, setPoint, (, i]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;, }]
[*, (, xSmallest, [, j, ], -, xOriginal, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;, }]
[), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;]
[-, xOriginal, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN]
[[, j, ], -, xOriginal, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,]
[], -, xOriginal, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, .]
[), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;]
[[, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false]
[], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), )]
[;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (, 0, ), ;, }, }]
[,, new, PointValuePair, (, xTransformed, ,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator]
[), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (, 0, ), ;, }, }]
[,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (]
[,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (, 0, ), ;, }]
[., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (, 0, )]
[), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, return, getPoint, (, 0, ), ;, }, }]
[;, return, getPoint, (, 0, ), ;, }, }]
[,, comparator, ), ;, return, getPoint, (, 0, ), ;, }, }]
[), ;, return, getPoint, (, 0, ), ;, }, }]
[;, }, }]
[), ;, }, }]
