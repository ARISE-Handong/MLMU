[double, m, ,, double, b, ,, double, q, ,, double, a, ,, double, n, ), throws, NotStrictlyPositiveException, {, if, (]
[double, m, ,, double, b, ,, double, q, ,, double, a, ,, double, n, ), throws, NotStrictlyPositiveException, {, if, (]
[,, double, b, ,, double, q, ,, double, a, ,, double, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=]
[double, q, ,, double, a, ,, double, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw]
[double, a, ,, double, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }]
[n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }]
[{, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =]
[(, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =, k, ;]
[(, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =, k, ;]
[), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =, k, ;, this, ., m, =]
[throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =, k, ;, this, ., m, =, m, ;]
[throw, new, NotStrictlyPositiveException, (, n, ), ;, }, this, ., k, =, k, ;, this, ., m, =, m, ;]
[n, ), ;, }, this, ., k, =, k, ;, this, ., m, =, m, ;, this, ., b, =]
[;, }, this, ., k, =, k, ;, this, ., m, =, m, ;, this, ., b, =, b, ;]
[;, }, this, ., k, =, k, ;, this, ., m, =, m, ;, this, ., b, =, b, ;]
[k, =, k, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., q, =]
[k, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., q, =, q, ;]
[k, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., q, =, q, ;]
[m, =, m, ;, this, ., b, =, b, ;, this, ., q, =, q, ;, this, ., a, =]
[m, ;, this, ., b, =, b, ;, this, ., q, =, q, ;, this, ., a, =, a, ;]
[this, ., b, =, b, ;, this, ., q, =, q, ;, this, ., a, =, a, ;, oneOverN, =]
[this, ., b, =, b, ;, this, ., q, =, q, ;, this, ., a, =, a, ;, oneOverN, =]
[b, =, b, ;, this, ., q, =, q, ;, this, ., a, =, a, ;, oneOverN, =, 1, /]
[a, =, a, ;, oneOverN, =, 1, /, n, ;, }, public, double, value, (, double, x, ), {, return]
[a, ;, oneOverN, =, 1, /, n, ;, }, public, double, value, (, double, x, ), {, return, value, (]
[a, ;, oneOverN, =, 1, /, n, ;, }, public, double, value, (, double, x, ), {, return, value, (]
[oneOverN, =, 1, /, n, ;, }, public, double, value, (, double, x, ), {, return, value, (, m, -]
[1, /, n, ;, }, public, double, value, (, double, x, ), {, return, value, (, m, -, x, ,]
[n, ;, }, public, double, value, (, double, x, ), {, return, value, (, m, -, x, ,, k, ,]
[}, public, double, value, (, double, x, ), {, return, value, (, m, -, x, ,, k, ,, b, ,]
[double, value, (, double, x, ), {, return, value, (, m, -, x, ,, k, ,, b, ,, q, ,]
[(, double, x, ), {, return, value, (, m, -, x, ,, k, ,, b, ,, q, ,, a, ,]
[,, b, ,, q, ,, a, ,, oneOverN, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[,, b, ,, q, ,, a, ,, oneOverN, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[,, b, ,, q, ,, a, ,, oneOverN, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[,, a, ,, oneOverN, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {]
[public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (]
[double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return]
[double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (]
[), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (, param, []
[,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -]
[,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,]
[,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,]
[{, validateParameters, (, param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,, param, []
[param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,, param, [, 0, ], ,]
[param, ), ;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,, param, [, 0, ], ,]
[;, return, Logistic, ., value, (, param, [, 1, ], -, x, ,, param, [, 0, ], ,, param, []
[., value, (, param, [, 1, ], -, x, ,, param, [, 0, ], ,, param, [, 2, ], ,]
[., value, (, param, [, 1, ], -, x, ,, param, [, 0, ], ,, param, [, 2, ], ,]
[(, param, [, 1, ], -, x, ,, param, [, 0, ], ,, param, [, 2, ], ,, param, []
[1, ], -, x, ,, param, [, 0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,]
[1, ], -, x, ,, param, [, 0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,]
[-, x, ,, param, [, 0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,, param, []
[param, [, 0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,, param, [, 4, ], ,]
[param, [, 0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,, param, [, 4, ], ,]
[0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,, param, [, 4, ], ,, 1, /]
[0, ], ,, param, [, 2, ], ,, param, [, 3, ], ,, param, [, 4, ], ,, 1, /]
[,, param, [, 2, ], ,, param, [, 3, ], ,, param, [, 4, ], ,, 1, /, param, []
[public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {]
[[, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (]
[double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, final, double, b, =]
[double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, final, double, b, =]
[param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, final, double, b, =, param, []
[NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, final, double, b, =, param, [, 2, ], ;, final, double, q, =]
[NotStrictlyPositiveException, {, validateParameters, (, param, ), ;, final, double, b, =, param, [, 2, ], ;, final, double, q, =]
[validateParameters, (, param, ), ;, final, double, b, =, param, [, 2, ], ;, final, double, q, =, param, []
[b, =, param, [, 2, ], ;, final, double, q, =, param, [, 3, ], ;, final, double, mMinusX, =]
[b, =, param, [, 2, ], ;, final, double, q, =, param, [, 3, ], ;, final, double, mMinusX, =]
[b, =, param, [, 2, ], ;, final, double, q, =, param, [, 3, ], ;, final, double, mMinusX, =]
[param, [, 2, ], ;, final, double, q, =, param, [, 3, ], ;, final, double, mMinusX, =, param, []
[], ;, final, double, q, =, param, [, 3, ], ;, final, double, mMinusX, =, param, [, 1, ], -]
[param, [, 3, ], ;, final, double, mMinusX, =, param, [, 1, ], -, x, ;, final, double, oneOverN, =]
[param, [, 3, ], ;, final, double, mMinusX, =, param, [, 1, ], -, x, ;, final, double, oneOverN, =]
[3, ], ;, final, double, mMinusX, =, param, [, 1, ], -, x, ;, final, double, oneOverN, =, 1, /]
[3, ], ;, final, double, mMinusX, =, param, [, 1, ], -, x, ;, final, double, oneOverN, =, 1, /]
[;, final, double, mMinusX, =, param, [, 1, ], -, x, ;, final, double, oneOverN, =, 1, /, param, []
[1, ], -, x, ;, final, double, oneOverN, =, 1, /, param, [, 5, ], ;, final, double, exp, =]
[1, ], -, x, ;, final, double, oneOverN, =, 1, /, param, [, 5, ], ;, final, double, exp, =]
[;, final, double, oneOverN, =, 1, /, param, [, 5, ], ;, final, double, exp, =, FastMath, ., exp, (]
[;, final, double, oneOverN, =, 1, /, param, [, 5, ], ;, final, double, exp, =, FastMath, ., exp, (]
[double, oneOverN, =, 1, /, param, [, 5, ], ;, final, double, exp, =, FastMath, ., exp, (, b, *]
[5, ], ;, final, double, exp, =, FastMath, ., exp, (, b, *, mMinusX, ), ;, final, double, qExp, =]
[5, ], ;, final, double, exp, =, FastMath, ., exp, (, b, *, mMinusX, ), ;, final, double, qExp, =]
[;, final, double, exp, =, FastMath, ., exp, (, b, *, mMinusX, ), ;, final, double, qExp, =, q, *]
[., exp, (, b, *, mMinusX, ), ;, final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =]
[., exp, (, b, *, mMinusX, ), ;, final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =]
[(, b, *, mMinusX, ), ;, final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +]
[final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =]
[final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =]
[final, double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =]
[double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (]
[double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (]
[double, qExp, =, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (]
[=, q, *, exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (, param, []
[exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (, param, [, 0, ], -]
[exp, ;, final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (, param, [, 0, ], -]
[final, double, qExp1, =, qExp, +, 1, ;, final, double, factor1, =, (, param, [, 0, ], -, param, []
[qExp, +, 1, ;, final, double, factor1, =, (, param, [, 0, ], -, param, [, 4, ], ), *]
[1, ;, final, double, factor1, =, (, param, [, 0, ], -, param, [, 4, ], ), *, oneOverN, /]
[1, ;, final, double, factor1, =, (, param, [, 0, ], -, param, [, 4, ], ), *, oneOverN, /]
[factor1, =, (, param, [, 0, ], -, param, [, 4, ], ), *, oneOverN, /, FastMath, ., pow, (]
[(, param, [, 0, ], -, param, [, 4, ], ), *, oneOverN, /, FastMath, ., pow, (, qExp1, ,]
[[, 4, ], ), *, oneOverN, /, FastMath, ., pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =]
[[, 4, ], ), *, oneOverN, /, FastMath, ., pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =]
[4, ], ), *, oneOverN, /, FastMath, ., pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =, -]
[), *, oneOverN, /, FastMath, ., pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =, -, factor1, /]
[pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =, -, factor1, /, qExp1, ;, final, double, gk, =]
[pow, (, qExp1, ,, oneOverN, ), ;, final, double, factor2, =, -, factor1, /, qExp1, ;, final, double, gk, =]
[oneOverN, ), ;, final, double, factor2, =, -, factor1, /, qExp1, ;, final, double, gk, =, Logistic, ., value, (]
[;, final, double, factor2, =, -, factor1, /, qExp1, ;, final, double, gk, =, Logistic, ., value, (, mMinusX, ,]
[double, factor2, =, -, factor1, /, qExp1, ;, final, double, gk, =, Logistic, ., value, (, mMinusX, ,, 1, ,]
[=, -, factor1, /, qExp1, ;, final, double, gk, =, Logistic, ., value, (, mMinusX, ,, 1, ,, b, ,]
[factor1, /, qExp1, ;, final, double, gk, =, Logistic, ., value, (, mMinusX, ,, 1, ,, b, ,, q, ,]
[qExp1, ;, final, double, gk, =, Logistic, ., value, (, mMinusX, ,, 1, ,, b, ,, q, ,, 0, ,]
[., value, (, mMinusX, ,, 1, ,, b, ,, q, ,, 0, ,, oneOverN, ), ;, final, double, gm, =]
[., value, (, mMinusX, ,, 1, ,, b, ,, q, ,, 0, ,, oneOverN, ), ;, final, double, gm, =]
[., value, (, mMinusX, ,, 1, ,, b, ,, q, ,, 0, ,, oneOverN, ), ;, final, double, gm, =]
[(, mMinusX, ,, 1, ,, b, ,, q, ,, 0, ,, oneOverN, ), ;, final, double, gm, =, factor2, *]
[,, 1, ,, b, ,, q, ,, 0, ,, oneOverN, ), ;, final, double, gm, =, factor2, *, b, *]
[,, 0, ,, oneOverN, ), ;, final, double, gm, =, factor2, *, b, *, qExp, ;, final, double, gb, =]
[,, 0, ,, oneOverN, ), ;, final, double, gm, =, factor2, *, b, *, qExp, ;, final, double, gb, =]
[,, 0, ,, oneOverN, ), ;, final, double, gm, =, factor2, *, b, *, qExp, ;, final, double, gb, =]
[,, oneOverN, ), ;, final, double, gm, =, factor2, *, b, *, qExp, ;, final, double, gb, =, factor2, *]
[), ;, final, double, gm, =, factor2, *, b, *, qExp, ;, final, double, gb, =, factor2, *, mMinusX, *]
[factor2, *, b, *, qExp, ;, final, double, gb, =, factor2, *, mMinusX, *, qExp, ;, final, double, gq, =]
[factor2, *, b, *, qExp, ;, final, double, gb, =, factor2, *, mMinusX, *, qExp, ;, final, double, gq, =]
[b, *, qExp, ;, final, double, gb, =, factor2, *, mMinusX, *, qExp, ;, final, double, gq, =, factor2, *]
[gb, =, factor2, *, mMinusX, *, qExp, ;, final, double, gq, =, factor2, *, exp, ;, final, double, ga, =]
[gb, =, factor2, *, mMinusX, *, qExp, ;, final, double, gq, =, factor2, *, exp, ;, final, double, ga, =]
[mMinusX, *, qExp, ;, final, double, gq, =, factor2, *, exp, ;, final, double, ga, =, Logistic, ., value, (]
[qExp, ;, final, double, gq, =, factor2, *, exp, ;, final, double, ga, =, Logistic, ., value, (, mMinusX, ,]
[final, double, gq, =, factor2, *, exp, ;, final, double, ga, =, Logistic, ., value, (, mMinusX, ,, 0, ,]
[gq, =, factor2, *, exp, ;, final, double, ga, =, Logistic, ., value, (, mMinusX, ,, 0, ,, b, ,]
[factor2, *, exp, ;, final, double, ga, =, Logistic, ., value, (, mMinusX, ,, 0, ,, b, ,, q, ,]
[exp, ;, final, double, ga, =, Logistic, ., value, (, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,]
[., value, (, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =]
[., value, (, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =]
[., value, (, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =]
[(, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =, factor1, *]
[(, mMinusX, ,, 0, ,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =, factor1, *]
[,, b, ,, q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =, factor1, *, Math, ., log, (]
[q, ,, 1, ,, oneOverN, ), ;, final, double, gn, =, factor1, *, Math, ., log, (, qExp1, ), *]
[,, oneOverN, ), ;, final, double, gn, =, factor1, *, Math, ., log, (, qExp1, ), *, oneOverN, ;, return]
[final, double, gn, =, factor1, *, Math, ., log, (, qExp1, ), *, oneOverN, ;, return, new, double, [, ]]
[double, gn, =, factor1, *, Math, ., log, (, qExp1, ), *, oneOverN, ;, return, new, double, [, ], {]
[=, factor1, *, Math, ., log, (, qExp1, ), *, oneOverN, ;, return, new, double, [, ], {, gk, ,]
[*, Math, ., log, (, qExp1, ), *, oneOverN, ;, return, new, double, [, ], {, gk, ,, gm, ,]
[., log, (, qExp1, ), *, oneOverN, ;, return, new, double, [, ], {, gk, ,, gm, ,, gb, ,]
[(, qExp1, ), *, oneOverN, ;, return, new, double, [, ], {, gk, ,, gm, ,, gb, ,, gq, ,]
[), *, oneOverN, ;, return, new, double, [, ], {, gk, ,, gm, ,, gb, ,, gq, ,, ga, ,]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (]
[private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (, param, ==]
[double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (, param, ==, null, ), {, throw]
[DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 6, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 6, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 6, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, param, ., length, !=, 6, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,]
[., length, !=, 6, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 6, ), ;, }, if, (]
[., length, !=, 6, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 6, ), ;, }, if, (]
[., length, !=, 6, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 6, ), ;, }, if, (]
[!=, 6, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 6, ), ;, }, if, (, param, []
[{, throw, new, DimensionMismatchException, (, param, ., length, ,, 6, ), ;, }, if, (, param, [, 5, ], <=]
[(, param, ., length, ,, 6, ), ;, }, if, (, param, [, 5, ], <=, 0, ), {, throw]
[length, ,, 6, ), ;, }, if, (, param, [, 5, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[length, ,, 6, ), ;, }, if, (, param, [, 5, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[6, ), ;, }, if, (, param, [, 5, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, []
[double, mMinusX, ,, double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return]
[double, mMinusX, ,, double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return]
[,, double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +]
[,, double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +]
[double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +, (]
[double, k, ,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +, (]
[,, double, b, ,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +, (, k, -]
[,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /]
[,, double, q, ,, double, a, ,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /]
[double, a, ,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (]
[double, a, ,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (]
[,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +]
[,, double, oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +]
[oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +, q, *]
[oneOverN, ), {, return, a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +, q, *]
[a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +, q, *, FastMath, ., exp, (]
[a, +, (, k, -, a, ), /, FastMath, ., pow, (, 1, +, q, *, FastMath, ., exp, (]
[(, k, -, a, ), /, FastMath, ., pow, (, 1, +, q, *, FastMath, ., exp, (, b, *]
[a, ), /, FastMath, ., pow, (, 1, +, q, *, FastMath, ., exp, (, b, *, mMinusX, ), ,]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[(, b, *, mMinusX, ), ,, oneOverN, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, return, t, ., negate, (, ), ., add, (]
[(, final, DerivativeStructure, t, ), {, return, t, ., negate, (, ), ., add, (, m, ), ., multiply, (]
[negate, (, ), ., add, (, m, ), ., multiply, (, b, ), ., exp, (, ), ., multiply, (]
[(, m, ), ., multiply, (, b, ), ., exp, (, ), ., multiply, (, q, ), ., add, (]
[(, b, ), ., exp, (, ), ., multiply, (, q, ), ., add, (, 1, ), ., pow, (]
[(, q, ), ., add, (, 1, ), ., pow, (, oneOverN, ), ., reciprocal, (, ), ., multiply, (]
[(, q, ), ., add, (, 1, ), ., pow, (, oneOverN, ), ., reciprocal, (, ), ., multiply, (]
[), ., add, (, 1, ), ., pow, (, oneOverN, ), ., reciprocal, (, ), ., multiply, (, k, -]
[), ., pow, (, oneOverN, ), ., reciprocal, (, ), ., multiply, (, k, -, a, ), ., add, (]
