[java, ., text, ., NumberFormat, ;, public, class, NumberTickUnit, extends, TickUnit, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[static, final, long, serialVersionUID, =, 3849459506627654442L, ;, private, NumberFormat, formatter, ;, public, NumberTickUnit, (, double, size, ), {, this, (]
[long, serialVersionUID, =, 3849459506627654442L, ;, private, NumberFormat, formatter, ;, public, NumberTickUnit, (, double, size, ), {, this, (, size, ,]
[long, serialVersionUID, =, 3849459506627654442L, ;, private, NumberFormat, formatter, ;, public, NumberTickUnit, (, double, size, ), {, this, (, size, ,]
[NumberFormat, ., getNumberInstance, (, ), ), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (]
[), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (, size, ), ;, if, (]
[), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (, size, ), ;, if, (]
[}, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (, size, ), ;, if, (, formatter, ==]
[double, size, ,, NumberFormat, formatter, ), {, super, (, size, ), ;, if, (, formatter, ==, null, ), {, throw]
[NumberFormat, formatter, ), {, super, (, size, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (]
[super, (, size, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }]
[super, (, size, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }]
[;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =]
[formatter, =, formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (]
[formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size, ,]
[(, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size, ,, minorTickCount, ), ;, if, (]
[(, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size, ,, minorTickCount, ), ;, if, (]
[size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size, ,, minorTickCount, ), ;, if, (, formatter, ==]
[,, int, minorTickCount, ), {, super, (, size, ,, minorTickCount, ), ;, if, (, formatter, ==, null, ), {, throw]
[), {, super, (, size, ,, minorTickCount, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (]
[size, ,, minorTickCount, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }]
[size, ,, minorTickCount, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }]
[;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =]
["Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return]
["Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return]
["Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return]
[formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return, this, ., formatter, ., format, (]
[this, ., formatter, ., format, (, value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[this, ., formatter, ., format, (, value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[formatter, ., format, (, value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[NumberTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, )]
[equals, (, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (]
[(, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !]
[(, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !]
[(, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !]
[false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter, ., equals, (]
[false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter, ., equals, (]
[NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return]
[if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return]
[., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return]
[., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return]
[., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return]
[), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +]
[), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +]
[false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +, this, ., valueToString, (]
[false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +, this, ., valueToString, (]
[public, String, toString, (, ), {, return, "[size=", +, this, ., valueToString, (, this, ., getSize, (, ), ), +]
[(, this, ., getSize, (, ), ), +, "]", ;, }, public, int, hashCode, (, ), {, int, result, =]
[(, this, ., getSize, (, ), ), +, "]", ;, }, public, int, hashCode, (, ), {, int, result, =]
[), +, "]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;]
["]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
["]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
["]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[}, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *]
[int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., formatter, !=]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., formatter, !=, null, ?]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., formatter, !=, null, ?]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., formatter, !=, null, ?]
[=, 29, *, result, +, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :]
[+, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return]
