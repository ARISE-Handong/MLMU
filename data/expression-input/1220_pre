[;, private, RealMatrix, cachedB, ;, private, RealMatrix, cachedV, ;, public, BiDiagonalTransformer, (, RealMatrix, matrix, ), {, final, int, m, =]
[;, private, RealMatrix, cachedB, ;, private, RealMatrix, cachedV, ;, public, BiDiagonalTransformer, (, RealMatrix, matrix, ), {, final, int, m, =]
[BiDiagonalTransformer, (, RealMatrix, matrix, ), {, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =]
[BiDiagonalTransformer, (, RealMatrix, matrix, ), {, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =]
[matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =]
[matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =]
[), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (]
[final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m, ,]
[=, matrix, ., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m, ,, n, ), ;]
[., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =]
[., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =]
[int, p, =, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;]
[=, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =]
[min, (, m, ,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, []
[,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;]
[), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =]
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, []
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, []
[., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, [, p, -]
[), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;]
[main, =, new, double, [, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =]
[new, double, [, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;]
[[, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =]
[], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;]
[secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =]
[[, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (]
[[, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (]
[-, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=]
[;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {]
[null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else, {]
[(, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, ), {, if, (]
[(, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, ), {, if, (]
[;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, ), {, if, (, cachedU, ==]
[;, }, }, public, RealMatrix, getU, (, ), {, if, (, cachedU, ==, null, ), {, final, int, m, =]
[;, }, }, public, RealMatrix, getU, (, ), {, if, (, cachedU, ==, null, ), {, final, int, m, =]
[{, if, (, cachedU, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedU, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedU, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[(, cachedU, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, []
[=, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =]
[=, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =]
[=, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =]
[=, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =]
[householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (]
[householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (]
[0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=]
[length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?]
[final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 0, :]
[final, int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =]
[final, int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =]
[int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (]
[int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (]
[=, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=]
[>=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?]
[), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :]
[], diagonal, =, (, m, >=, n, ), ?, main, :, secondary, ;, double, [, ], [, ], ua, =]
[(, m, >=, n, ), ?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, []
[n, ), ?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ], []
[[, ], [, ], ua, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =]
[[, ], [, ], ua, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =]
[[, ], ua, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -]
[ua, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;]
[ua, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;]
[new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=]
[[, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;]
[m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --]
[m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {]
[m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {]
[m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {]
[;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {, ua, []
[int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {, ua, [, k, ], []
[m, -, 1, ;, k, >=, p, ;, --, k, ), {, ua, [, k, ], [, k, ], =]
[--, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =]
[--, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =]
[), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;]
[ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;]
[k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=]
[[, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;]
[k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --]
[k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =]
[k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =]
[p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, []
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, []
[--, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], []
[{, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =]
[], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (]
[], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (]
[], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (]
[=, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[=, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[[, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -]
[;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=]
[=, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =]
[;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[(, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <]
[[, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;]
[k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;, ++]
[), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {, double, alpha, =]
[k, ;, j, <, m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =]
[j, <, m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;]
[j, <, m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;]
[m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <]
[++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;]
[j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, []
[int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], []
[k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *]
[k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *]
[k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *]
[i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, []
[;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], []
[;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], []
[i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -]
[-=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }]
[[, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=]
[[, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=]
[[, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=]
[], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, []
[], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, []
[j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -]
[householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *]
[householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *]
[i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, []
[i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, []
[[, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -]
[/=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =]
[[, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;]
[[, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;]
[-, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <]
[], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;]
[*, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {]
[k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {]
[k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {]
[diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, []
[for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ], []
[i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=]
[i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=]
[=, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -]
[;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *]
[;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *]
[;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *]
[<, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, []
[++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], []
[++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], []
[), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -]
[+=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (]
[+=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (]
[alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >]
[[, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[[, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[[, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, []
[-, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], []
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =]
[}, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =, 1, ;, }]
[if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =]
[if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =]
[0, ), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (]
[0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (]
[createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==]
[cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==, null, ), {, final, int, m, =]
[cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==, null, ), {, final, int, m, =]
[{, if, (, cachedB, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedB, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedB, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[(, cachedB, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, []
[length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, double, [, ], [, ], ba, =]
[int, n, =, householderVectors, [, 0, ], ., length, ;, double, [, ], [, ], ba, =, new, double, []
[householderVectors, [, 0, ], ., length, ;, double, [, ], [, ], ba, =, new, double, [, m, ], []
[[, ], [, ], ba, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =]
[[, ], ba, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[[, ], ba, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[ba, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[ba, =, new, double, [, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;]
[m, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {, ba, []
[int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {, ba, [, i, ], []
[0, ;, i, <, main, ., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =]
[0, ;, i, <, main, ., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =]
[i, <, main, ., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, []
[;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <]
[i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (]
[i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (]
[[, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >]
[=, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {]
[=, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {]
[=, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {]
[[, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, []
[;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], []
[;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], []
[(, m, <, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -]
[n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =]
[n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =]
[{, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary, []
[{, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary, []
[(, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary, [, i, -]
[], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (]
[], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (]
[i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <]
[i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <]
[i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <]
[=, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -]
[i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {]
[i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {]
[i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {]
[1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, []
[}, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i, ], []
[}, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i, ], []
[else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i, ], [, i, +]
[(, i, <, main, ., length, -, 1, ), {, ba, [, i, ], [, i, +, 1, ], =]
[(, i, <, main, ., length, -, 1, ), {, ba, [, i, ], [, i, +, 1, ], =]
[<, main, ., length, -, 1, ), {, ba, [, i, ], [, i, +, 1, ], =, secondary, []
[), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }]
[ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =]
[ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =]
[[, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (]
[=, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (]
[createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==]
[cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==, null, ), {, final, int, m, =]
[cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==, null, ), {, final, int, m, =]
[{, if, (, cachedV, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedV, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[{, if, (, cachedV, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[(, cachedV, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, []
[=, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =]
[=, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =]
[=, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =]
[=, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =]
[householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (]
[householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (]
[0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=]
[length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?]
[final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 1, :]
[final, int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =]
[final, int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =]
[int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (]
[int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (]
[=, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=]
[>=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?]
[), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :]
[], diagonal, =, (, m, >=, n, ), ?, secondary, :, main, ;, double, [, ], [, ], va, =]
[(, m, >=, n, ), ?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, []
[n, ), ?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, [, n, ], []
[[, ], [, ], va, =, new, double, [, n, ], [, n, ], ;, for, (, int, k, =]
[[, ], [, ], va, =, new, double, [, n, ], [, n, ], ;, for, (, int, k, =]
[[, ], va, =, new, double, [, n, ], [, n, ], ;, for, (, int, k, =, n, -]
[va, =, new, double, [, n, ], [, n, ], ;, for, (, int, k, =, n, -, 1, ;]
[va, =, new, double, [, n, ], [, n, ], ;, for, (, int, k, =, n, -, 1, ;]
[new, double, [, n, ], [, n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=]
[[, n, ], [, n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;]
[n, ], [, n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --]
[n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {]
[n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {]
[n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {]
[;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {, va, []
[int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {, va, [, k, ], []
[n, -, 1, ;, k, >=, p, ;, --, k, ), {, va, [, k, ], [, k, ], =]
[--, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =]
[--, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =]
[), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;]
[va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;]
[k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=]
[[, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;]
[k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --]
[k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =]
[k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =]
[p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, []
[p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, []
[1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -]
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;]
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;]
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], []
[double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =]
[=, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (]
[=, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (]
[=, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (]
[[, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=]
[k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <]
[(, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, n, ;]
[hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, n, ;, ++]
[), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, double, beta, =]
[k, ;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =]
[j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;]
[j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;]
[n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <]
[++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;]
[j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++]
[double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=]
[;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=, va, []
[int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=, va, [, i, ], []
[k, ;, i, <, n, ;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *]
[k, ;, i, <, n, ;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *]
[i, <, n, ;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK, []
[++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }]
[), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=]
[), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=]
[), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=]
[beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, []
[beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, []
[va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -]
[], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *]
[], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *]
[j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, []
[}, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =]
[/=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;]
[/=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;]
[[, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <]
[-, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;]
[diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++]
[hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {]
[hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {]
[hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {]
[k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va, []
[for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ], []
[i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=]
[i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=]
[=, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -]
[;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *]
[;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *]
[<, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, []
[i, ], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (]
[i, ], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (]
[[, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >]
[+=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[+=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[+=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, []
[[, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], []
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =]
[}, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =, 1, ;, }]
[if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =]
[if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =]
[0, ), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (]
[0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return]
[createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return]
[[, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double, [, ], getMainDiagonalRef, (, ), {, return]
[}, double, [, ], getMainDiagonalRef, (, ), {, return, main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return]
[main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return]
[main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return]
[main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return]
[[, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors, ., length, >=]
[[, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors, ., length, >=]
[[, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors, ., length, >=]
[getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors, ., length, >=, householderVectors, []
[length, >=, householderVectors, [, 0, ], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =]
[length, >=, householderVectors, [, 0, ], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =]
[;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, []
[householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =]
[length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <]
[n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, n, ;]
[n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, n, ;]
[length, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, double, xNormSqr, =]
[0, ;, k, <, n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =]
[k, <, n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;]
[k, <, n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;]
[n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <]
[k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;]
[++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[(, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, []
[=, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], []
[i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;]
[m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=]
[m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=]
[++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *]
[[, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =]
[[, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =]
[], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, []
[c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =]
[c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =]
[*, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (]
[*, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (]
[*, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (]
[;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (, hK, []
[double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (, hK, [, k, ], >]
[hK, =, householderVectors, [, k, ], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?]
[=, householderVectors, [, k, ], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -]
[=, householderVectors, [, k, ], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -]
[], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[(, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, []
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =]
[(, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;]
[), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[[, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, double, alpha, =]
[1, ;, j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =]
[j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;]
[j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;]
[n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <]
[++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;]
[j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[(, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[(, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, []
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *]
[final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *, hI, []
[hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }]
[householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=]
[householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=]
[i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *]
[i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *]
[i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *]
[;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, []
[hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], []
[], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =]
[}, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;]
[}, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;]
[/=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <]
[*, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;]
[householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[(, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[(, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, []
[++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=]
[++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, alpha, *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, alpha, *]
[final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, alpha, *, hI, []
[i, ], ;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (]
[i, ], ;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (]
[;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <]
[;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <]
[[, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -]
[-=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -, 1, ), {]
[*, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =]
[}, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =]
[}, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =]
[if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +]
[k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[(, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, final, double, c, =]
[(, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, final, double, c, =]
[j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, []
[+, 1, ;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[<, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[=, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, []
[=, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, []
[[, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >]
[c, *, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?]
[*, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[*, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[=, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[=, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[(, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, []
[(, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, []
[), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +]
[[, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=]
[(, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =]
[(, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =]
[!=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +]
[), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;]
[), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;]
[hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[+, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =]
[double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =]
[double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =]
[], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +]
[=, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[=, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[[, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[=, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=]
[(, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=, hI, []
[=, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *]
[=, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *]
[+, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, []
[<, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }]
[;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=]
[;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=]
[j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *]
[j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *]
[{, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, []
[{, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, []
[-=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, [, k, +]
[j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =]
[j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =]
[;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +]
[beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;]
[beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;]
[b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <]
[hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[[, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, []
[int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=]
[int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=]
[=, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *]
[=, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *]
[+, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, []
[[, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =]
[[, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =]
[}, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[}, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[}, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, []
[householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =]
[length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <]
[n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, m, ;]
[n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, m, ;]
[(, int, k, =, 0, ;, k, <, m, ;, k, ++, ), {, final, double, [, ], hK, =]
[(, int, k, =, 0, ;, k, <, m, ;, k, ++, ), {, final, double, [, ], hK, =]
[k, =, 0, ;, k, <, m, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, []
[m, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =]
[double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =]
[], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;]
[], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;]
[=, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <]
[[, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;]
[k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, final, double, c, =]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, final, double, c, =]
[(, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, []
[=, k, ;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[<, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[=, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, []
[j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >]
[xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?]
[+=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -]
[+=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -]
[;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[(, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, []
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =]
[(, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;]
[), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[[, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =]
[double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =]
[], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;]
[], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;]
[=, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <]
[[, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;]
[i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++]
[double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, []
[int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *]
[int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *]
[=, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, []
[<, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }]
[;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=]
[;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=]
[j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *]
[j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *]
[j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *]
[{, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, []
[hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], []
[], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =]
[}, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;]
[}, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;]
[/=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <]
[*, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;]
[householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++]
[], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {]
[], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {]
[k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, []
[for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=]
[for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=]
[int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, alpha, *]
[int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, alpha, *]
[=, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, alpha, *, hK, []
[j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (]
[j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (]
[{, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <]
[{, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <]
[[, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <, m, -]
[], ;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =]
[], ;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =]
[}, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, []
[}, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, []
[}, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, [, k, +]
[k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;]
[m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =]
[[, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =]
[[, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =]
[hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +]
[householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[(, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[(, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[(, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, []
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], []
[i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;]
[m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=]
[m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=]
[++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *]
[=, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =]
[=, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =]
[householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (]
[i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, []
[k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >]
[xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?]
[+=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -]
[+=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -]
[;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[(, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, []
[;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=]
[;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =]
[;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =]
[(, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +]
[!=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;]
[!=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;]
[), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[[, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, double, beta, =]
[1, ;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =]
[1, ;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =]
[j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +]
[n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[{, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, []
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *]
[final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *, hI, []
[hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }]
[householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=]
[householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=]
[i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *]
[i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *]
[;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, []
[hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =]
[hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =]
[k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +]
[;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <]
[b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[*, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, []
[++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=]
[++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, beta, *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, beta, *]
[final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, beta, *, hI, []
