[., util, ., zip, ., CRC32, ;, class, AliasStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[., util, ., zip, ., CRC32, ;, class, AliasStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[., CRC32, ;, class, AliasStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., CRC32, ;, class, AliasStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[=, Logger, ., getLogger, (, AliasStrings, ., class, ., getName, (, ), ), ;, private, static, final, String, STRING_ALIAS_PREFIX, =]
[final, String, STRING_ALIAS_PREFIX, =, "$$S_", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, Matcher, blacklist, =]
[<, String, >, aliasableStrings, ;, private, final, boolean, outputStringUsage, ;, private, final, SortedMap, <, String, ,, StringInfo, >, stringInfoMap, =]
[<, String, >, aliasableStrings, ;, private, final, boolean, outputStringUsage, ;, private, final, SortedMap, <, String, ,, StringInfo, >, stringInfoMap, =]
[String, ,, StringInfo, >, stringInfoMap, =, Maps, ., newTreeMap, (, ), ;, private, final, Set, <, String, >, usedHashedAliases, =]
[usedHashedAliases, =, new, LinkedHashSet, <, String, >, (, ), ;, private, final, Map, <, JSModule, ,, Node, >, moduleVarParentMap, =]
[<, JSModule, ,, Node, >, moduleVarParentMap, =, new, HashMap, <, JSModule, ,, Node, >, (, ), ;, long, unitTestHashReductionMask, =]
[JSModule, ,, Node, >, moduleVarParentMap, =, new, HashMap, <, JSModule, ,, Node, >, (, ), ;, long, unitTestHashReductionMask, =, ~]
[(, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {]
[(, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {]
[JSModuleGraph, moduleGraph, ,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =]
[,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;]
[,, Set, <, String, >, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;]
[>, strings, ,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =]
[,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;]
[,, String, blacklistRegex, ,, boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;]
[boolean, outputStringUsage, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =]
[this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (]
[this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (]
[this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (]
[this, ., moduleGraph, =, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=]
[=, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {]
[=, moduleGraph, ;, this, ., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {]
[., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =]
[., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =]
[., aliasableStrings, =, strings, ;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =]
[;, if, (, blacklistRegex, ., length, (, ), !=, 0, ), {, this, ., blacklist, =, Pattern, ., compile, (]
[length, (, ), !=, 0, ), {, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (]
[{, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {]
[{, this, ., blacklist, =, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {]
[=, Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =]
[compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;, }]
[compile, (, blacklistRegex, ), ., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;, }]
[., matcher, (, "", ), ;, }, else, {, this, ., blacklist, =, null, ;, }, this, ., outputStringUsage, =]
[this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., outputStringUsage, =, outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[outputStringUsage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings", ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings", ), ;]
[process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (]
[Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, Node, root, ), {, logger, ., fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), {, logger, ., fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;]
[fine, (, "Aliasing common strings", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;]
[., traverse, (, compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (]
[compiler, ,, root, ,, this, ), ;, replaceStringsWithAliases, (, ), ;, addAliasDeclarationNodes, (, ), ;, if, (, outputStringUsage, ), {]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isString, (, ), &&]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isString, (, ), &&, !]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isString, (, ), &&, !]
[,, Node, parent, ), {, if, (, n, ., isString, (, ), &&, !, parent, ., isGetProp, (, ), &&]
[Node, parent, ), {, if, (, n, ., isString, (, ), &&, !, parent, ., isGetProp, (, ), &&, !]
[Node, parent, ), {, if, (, n, ., isString, (, ), &&, !, parent, ., isGetProp, (, ), &&, !]
[), &&, !, parent, ., isGetProp, (, ), &&, !, parent, ., isRegExp, (, ), ), {, String, str, =]
[), &&, !, parent, ., isGetProp, (, ), &&, !, parent, ., isRegExp, (, ), ), {, String, str, =]
[&&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (]
[&&, !, parent, ., isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (]
[isRegExp, (, ), ), {, String, str, =, n, ., getString, (, ), ;, if, (, "undefined", ., equals, (]
[., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (]
[., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (]
[., getString, (, ), ;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (]
[(, ), ;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=]
[;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&]
[;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&]
[;, if, (, "undefined", ., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&]
[., equals, (, str, ), ), {, return, ;, }, if, (, blacklist, !=, null, &&, blacklist, ., reset, (]
[!=, null, &&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (]
[!=, null, &&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (]
[!=, null, &&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (]
[&&, blacklist, ., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==]
[., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||]
[., reset, (, str, ), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||]
[), ., find, (, ), ), {, return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (]
[return, ;, }, if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =]
[if, (, aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (]
[aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,]
[contains, (, str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =]
[str, ), ), {, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (]
[{, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;]
[{, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;]
[{, StringOccurrence, occurrence, =, new, StringOccurrence, (, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;]
[(, n, ,, parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (]
[parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;]
[parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;]
[parent, ), ;, StringInfo, info, =, getOrCreateStringInfo, (, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;]
[(, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (]
[(, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (]
[(, str, ), ;, info, ., occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (]
[occurrences, ., add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||]
[add, (, occurrence, ), ;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (]
[;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {]
[;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {]
[;, info, ., numOccurrences, ++, ;, if, (, t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {]
[., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =]
[., inGlobalScope, (, ), ||, isInThrowExpression, (, n, ), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =]
[), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[), ), {, info, ., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (]
[., numOccurrencesInfrequentlyExecuted, ++, ;, }, JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (]
[JSModule, module, =, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (]
[=, t, ., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=]
[., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&]
[., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&]
[., getModule, (, ), ;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&]
[;, if, (, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=]
[(, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&]
[(, info, ., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&]
[., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=]
[., numOccurrences, !=, 1, ), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=]
[), {, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&]
[{, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !]
[{, if, (, module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !]
[!=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (]
[&&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,]
[&&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,]
[&&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {]
[!=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =]
[!=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (]
[moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,]
[moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, ), ), {, module, =, moduleGraph, ., getDeepestCommonDependency, (, module, ,]
[., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =]
[., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =]
[,, info, ., moduleToContainDecl, ), ;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (]
[;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (]
[;, }, else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (]
[else, {, return, ;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (, varParent, ==]
[;, }, }, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (, varParent, ==, null, ), {]
[}, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =]
[}, Node, varParent, =, moduleVarParentMap, ., get, (, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =]
[moduleVarParentMap, ., get, (, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (]
[(, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;]
[(, module, ), ;, if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;]
[if, (, varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (]
[varParent, ==, null, ), {, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,]
[{, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }]
[{, varParent, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }]
[., getNodeForCodeInsertion, (, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =]
[(, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;]
[(, module, ), ;, moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;]
[moduleVarParentMap, ., put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =]
[put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;]
[put, (, module, ,, varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;]
[varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =]
[varParent, ), ;, }, info, ., moduleToContainDecl, =, module, ;, info, ., parentForNewVarDecl, =, varParent, ;, info, ., siblingToInsertVarDeclBefore, =]
[varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =]
[varParent, ., getFirstChild, (, ), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =]
[), ;, }, }, }, private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap, ., get, (]
[private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap, ., get, (, string, ), ;, if, (]
[private, StringInfo, getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap, ., get, (, string, ), ;, if, (]
[getOrCreateStringInfo, (, String, string, ), {, StringInfo, info, =, stringInfoMap, ., get, (, string, ), ;, if, (, info, ==]
[string, ), {, StringInfo, info, =, stringInfoMap, ., get, (, string, ), ;, if, (, info, ==, null, ), {]
[{, StringInfo, info, =, stringInfoMap, ., get, (, string, ), ;, if, (, info, ==, null, ), {, info, =]
[=, stringInfoMap, ., get, (, string, ), ;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (]
[=, stringInfoMap, ., get, (, string, ), ;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (]
[;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;]
[;, if, (, info, ==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;]
[==, null, ), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (]
[), {, info, =, new, StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,]
[StringInfo, (, stringInfoMap, ., size, (, ), ), ;, stringInfoMap, ., put, (, string, ,, info, ), ;, }, return]
[;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :]
[;, }, return, info, ;, }, private, static, boolean, isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :]
[isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, switch, (]
[isInThrowExpression, (, Node, n, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, switch, (]
[Node, ancestor, :, n, ., getAncestors, (, ), ), {, switch, (, ancestor, ., getType, (, ), ), {, case]
[Node, ancestor, :, n, ., getAncestors, (, ), ), {, switch, (, ancestor, ., getType, (, ), ), {, case]
[getAncestors, (, ), ), {, switch, (, ancestor, ., getType, (, ), ), {, case, Token, ., THROW, :, return]
[), {, switch, (, ancestor, ., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case]
[), {, switch, (, ancestor, ., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case]
[., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case]
[., getType, (, ), ), {, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case]
[{, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[{, case, Token, ., THROW, :, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case]
[:, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[:, return, true, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case]
[Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case]
[Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case]
[Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case]
[Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case]
[Token, ., DO, :, case, Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case]
[Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case]
[Token, ., FOR, :, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case]
[Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case]
[Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case]
[Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[Token, ., CASE, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case]
[Token, ., DEFAULT_CASE, :, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case]
[Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case]
[Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case]
[Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case]
[Token, ., SCRIPT, :, case, Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case]
[Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case]
[Token, ., FUNCTION, :, case, Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case]
[Token, ., TRY, :, case, Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return]
[Token, ., CATCH, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, return, false, ;, }, }, return]
[return, false, ;, }, private, void, replaceStringsWithAliases, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry, :]
[return, false, ;, }, private, void, replaceStringsWithAliases, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry, :]
[for, (, Entry, <, String, ,, StringInfo, >, entry, :, stringInfoMap, ., entrySet, (, ), ), {, String, literal, =]
[for, (, Entry, <, String, ,, StringInfo, >, entry, :, stringInfoMap, ., entrySet, (, ), ), {, String, literal, =]
[:, stringInfoMap, ., entrySet, (, ), ), {, String, literal, =, entry, ., getKey, (, ), ;, StringInfo, info, =]
[:, stringInfoMap, ., entrySet, (, ), ), {, String, literal, =, entry, ., getKey, (, ), ;, StringInfo, info, =]
[String, literal, =, entry, ., getKey, (, ), ;, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (]
[=, entry, ., getKey, (, ), ;, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (]
[., getKey, (, ), ;, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,]
[., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :]
[., getValue, (, ), ;, if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :]
[if, (, shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {]
[shouldReplaceWithAlias, (, literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (]
[literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,]
[literal, ,, info, ), ), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,]
[), {, for, (, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (]
[(, StringOccurrence, occurrence, :, info, ., occurrences, ), {, replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (, literal, ), ,]
[}, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry, :]
[}, }, }, }, private, void, addAliasDeclarationNodes, (, ), {, for, (, Entry, <, String, ,, StringInfo, >, entry, :]
[for, (, Entry, <, String, ,, StringInfo, >, entry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =]
[for, (, Entry, <, String, ,, StringInfo, >, entry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =]
[entry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (]
[:, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, !]
[:, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, entry, ., getValue, (, ), ;, if, (, !]
[entry, ., getValue, (, ), ;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =]
[entry, ., getValue, (, ), ;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =]
[), ;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =, info, ., getVariableName, (]
[), ;, if, (, !, info, ., isAliased, ), {, continue, ;, }, String, alias, =, info, ., getVariableName, (]
[continue, ;, }, String, alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =]
[continue, ;, }, String, alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =]
[alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =, IR, ., var, (]
[alias, =, info, ., getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =, IR, ., var, (]
[getVariableName, (, entry, ., getKey, (, ), ), ;, Node, var, =, IR, ., var, (, IR, ., name, (]
[., getKey, (, ), ), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,]
[., getKey, (, ), ), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,]
[), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (]
[), ;, Node, var, =, IR, ., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (]
[., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (]
[., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (]
[., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (]
[), ,, IR, ., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==]
[., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {]
[., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {]
[., string, (, entry, ., getKey, (, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {]
[(, ), ), ), ;, if, (, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (]
[(, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {]
[(, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {]
[(, info, ., siblingToInsertVarDeclBefore, ==, null, ), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {]
[), {, info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (]
[info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,]
[info, ., parentForNewVarDecl, ., addChildToFront, (, var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,]
[var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }]
[var, ), ;, }, else, {, info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, ), ;, }]
[reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (]
[reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (]
[reportCodeChange, (, ), ;, }, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (]
[}, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (, info, ., numOccurrences, >]
[}, }, private, static, boolean, shouldReplaceWithAlias, (, String, str, ,, StringInfo, info, ), {, if, (, info, ., numOccurrences, >]
[(, String, str, ,, StringInfo, info, ), {, if, (, info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return]
[), {, if, (, info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =]
[), {, if, (, info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =]
[if, (, info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +]
[if, (, info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted, ), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +]
[), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =]
[), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =]
[), {, return, true, ;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =]
[;, }, int, sizeOfLiteral, =, 2, +, str, ., length, (, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *]
[2, +, str, ., length, (, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =]
[(, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =]
[(, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =]
[(, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =]
[(, ), ;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =]
[;, int, sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +]
[sizeOfStrings, =, info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +]
[info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +]
[info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +]
[info, ., numOccurrences, *, sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +]
[sizeOfLiteral, ;, int, sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *]
[sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return]
[sizeOfVariable, =, 3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return]
[3, ;, int, sizeOfAliases, =, 6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable, ;, return, sizeOfAliases, <]
[return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {]
[return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {]
[return, sizeOfAliases, <, sizeOfStrings, ;, }, private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {]
[private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, ., replaceChild, (]
[private, void, replaceStringWithAliasName, (, StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, ., replaceChild, (]
[StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,]
[StringOccurrence, occurrence, ,, String, name, ,, StringInfo, info, ), {, occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,]
[name, ,, StringInfo, info, ), {, occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (]
[), {, occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;]
[), {, occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;]
[parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =]
[replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =, true, ;]
[replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), ), ;, info, ., isAliased, =, true, ;]
[isAliased, =, true, ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, outputStringUsage, (, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[{, StringBuilder, sb, =, new, StringBuilder, (, "Strings used more than once:\n", ), ;, for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :]
[{, StringBuilder, sb, =, new, StringBuilder, (, "Strings used more than once:\n", ), ;, for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :]
[for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =]
[for, (, Entry, <, String, ,, StringInfo, >, stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =]
[stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (]
[stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (]
[stringInfoEntry, :, stringInfoMap, ., entrySet, (, ), ), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (]
[entrySet, (, ), ), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >]
[), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {]
[), {, StringInfo, info, =, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {]
[=, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (]
[=, stringInfoEntry, ., getValue, (, ), ;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (]
[), ;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;]
[), ;, if, (, info, ., numOccurrences, >, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;]
[info, ., numOccurrences, >, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (]
[>, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;]
[>, 1, ), {, sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;]
[sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (]
[sb, ., append, (, info, ., numOccurrences, ), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (]
[), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;]
[), ;, sb, ., append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;]
[append, (, ": ", ), ;, sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (]
[sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }]
[sb, ., append, (, stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }]
[stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }, logger, ., fine, (]
[stringInfoEntry, ., getKey, (, ), ), ;, sb, ., append, (, '\n', ), ;, }, }, logger, ., fine, (]
[class, StringOccurrence, {, final, Node, node, ;, final, Node, parent, ;, StringOccurrence, (, Node, node, ,, Node, parent, ), {]
[class, StringOccurrence, {, final, Node, node, ;, final, Node, parent, ;, StringOccurrence, (, Node, node, ,, Node, parent, ), {]
[Node, node, ;, final, Node, parent, ;, StringOccurrence, (, Node, node, ,, Node, parent, ), {, this, ., node, =]
[;, final, Node, parent, ;, StringOccurrence, (, Node, node, ,, Node, parent, ), {, this, ., node, =, node, ;]
[;, final, Node, parent, ;, StringOccurrence, (, Node, node, ,, Node, parent, ), {, this, ., node, =, node, ;]
[;, StringOccurrence, (, Node, node, ,, Node, parent, ), {, this, ., node, =, node, ;, this, ., parent, =]
[numOccurrencesInfrequentlyExecuted, ;, JSModule, moduleToContainDecl, ;, Node, parentForNewVarDecl, ;, Node, siblingToInsertVarDeclBefore, ;, String, aliasName, ;, StringInfo, (, int, id, ), {]
[numOccurrencesInfrequentlyExecuted, ;, JSModule, moduleToContainDecl, ;, Node, parentForNewVarDecl, ;, Node, siblingToInsertVarDeclBefore, ;, String, aliasName, ;, StringInfo, (, int, id, ), {]
[;, Node, parentForNewVarDecl, ;, Node, siblingToInsertVarDeclBefore, ;, String, aliasName, ;, StringInfo, (, int, id, ), {, this, ., id, =]
[parentForNewVarDecl, ;, Node, siblingToInsertVarDeclBefore, ;, String, aliasName, ;, StringInfo, (, int, id, ), {, this, ., id, =, id, ;]
[parentForNewVarDecl, ;, Node, siblingToInsertVarDeclBefore, ;, String, aliasName, ;, StringInfo, (, int, id, ), {, this, ., id, =, id, ;]
[;, String, aliasName, ;, StringInfo, (, int, id, ), {, this, ., id, =, id, ;, this, ., occurrences, =]
[), {, this, ., id, =, id, ;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;]
[), {, this, ., id, =, id, ;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;]
[id, =, id, ;, this, ., occurrences, =, new, ArrayList, <, StringOccurrence, >, (, ), ;, this, ., isAliased, =]
[>, (, ), ;, this, ., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (]
[>, (, ), ;, this, ., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (]
[), ;, this, ., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==]
[., isAliased, =, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {]
[=, false, ;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {, aliasName, =]
[;, }, String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {, aliasName, =, encodeStringAsIdentifier, (]
[String, getVariableName, (, String, stringLiteral, ), {, if, (, aliasName, ==, null, ), {, aliasName, =, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,]
[), {, if, (, aliasName, ==, null, ), {, aliasName, =, encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, ), ;, }, return]
[;, }, return, aliasName, ;, }, String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT, =]
[String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT, =, 20, ;, final, int, length, =]
[String, encodeStringAsIdentifier, (, String, prefix, ,, String, s, ), {, final, int, MAX_LIMIT, =, 20, ;, final, int, length, =]
[final, int, MAX_LIMIT, =, 20, ;, final, int, length, =, s, ., length, (, ), ;, final, int, limit, =]
[final, int, MAX_LIMIT, =, 20, ;, final, int, length, =, s, ., length, (, ), ;, final, int, limit, =]
[20, ;, final, int, length, =, s, ., length, (, ), ;, final, int, limit, =, Math, ., min, (]
[final, int, length, =, s, ., length, (, ), ;, final, int, limit, =, Math, ., min, (, length, ,]
[length, (, ), ;, final, int, limit, =, Math, ., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =]
[int, limit, =, Math, ., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[int, limit, =, Math, ., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[., min, (, length, ,, MAX_LIMIT, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =]
[(, ), ;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =]
[;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;]
[;, sb, ., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;]
[., append, (, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[(, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;]
[(, prefix, ), ;, boolean, protectHex, =, false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;]
[false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;, i, ++, ), {, char, ch, =]
[false, ;, for, (, int, i, =, 0, ;, i, <, limit, ;, i, ++, ), {, char, ch, =]
[int, i, =, 0, ;, i, <, limit, ;, i, ++, ), {, char, ch, =, s, ., charAt, (]
[i, <, limit, ;, i, ++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (]
[++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (]
[++, ), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (]
[), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (]
[), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (]
[), {, char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (]
[char, ch, =, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=]
[=, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&]
[=, s, ., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&]
[., charAt, (, i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=]
[i, ), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||]
[), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[), ;, if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[if, (, protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=]
[protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&]
[protectHex, ), {, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&]
[{, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=]
[ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {]
[ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {]
[ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (]
[||, (, ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }]
[ch, >=, 'a', &&, ch, <=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =]
[<=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (]
[<=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (]
[<=, 'f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (]
['f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (]
['f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (]
['f', ), ), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (]
[), {, sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=]
[sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&]
[sb, ., append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&]
[append, (, '_', ), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=]
[), ;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||]
[;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[;, }, protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (]
[protectHex, =, false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=]
[false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&]
[false, ;, }, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&]
[}, if, (, (, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=]
[(, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||]
[ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (]
[ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (]
[ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (]
['0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=]
[ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&]
[ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&]
['9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=]
[ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {]
[ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {]
[ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (]
[ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {]
[ch, >=, 'a', &&, ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {]
[ch, <=, 'z', ), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (]
[), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;]
[), ), {, sb, ., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;]
[., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (]
[., append, (, ch, ), ;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (]
[), ;, }, else, {, sb, ., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (]
[{, sb, ., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;]
[., append, (, '$', ), ;, sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =]
[sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (]
[sb, ., append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (]
[append, (, Integer, ., toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (, length, ==]
[toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {, return]
[toHexString, (, ch, ), ), ;, protectHex, =, true, ;, }, }, if, (, length, ==, limit, ), {, return]
[}, }, if, (, length, ==, limit, ), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =]
[==, limit, ), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;]
[==, limit, ), {, return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;]
[return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, ., update, (]
[return, sb, ., toString, (, ), ;, }, CRC32, crc32, =, new, CRC32, (, ), ;, crc32, ., update, (]
[=, new, CRC32, (, ), ;, crc32, ., update, (, s, ., getBytes, (, ), ), ;, long, hash, =]
[=, new, CRC32, (, ), ;, crc32, ., update, (, s, ., getBytes, (, ), ), ;, long, hash, =]
[=, new, CRC32, (, ), ;, crc32, ., update, (, s, ., getBytes, (, ), ), ;, long, hash, =]
[crc32, ., update, (, s, ., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &]
[update, (, s, ., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;]
[update, (, s, ., getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;]
[getBytes, (, ), ), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (]
[), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;]
[), ;, long, hash, =, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;]
[=, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb, ., append, (]
[=, crc32, ., getValue, (, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb, ., append, (]
[(, ), &, unitTestHashReductionMask, ;, sb, ., append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (]
[append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =]
[append, (, '_', ), ;, sb, ., append, (, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =]
[(, Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (]
[Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !]
[Long, ., toHexString, (, hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !]
[hash, ), ), ;, String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (]
[String, encoded, =, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {]
[=, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=]
[=, sb, ., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=]
[., toString, (, ), ;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=, "_", +]
[;, if, (, !, usedHashedAliases, ., add, (, encoded, ), ), {, encoded, +=, "_", +, id, ;, }, return]
