[., util, ., Iterator, ;, public, class, JsonMLUtil, {, public, static, boolean, isExpression, (, JsonML, element, ), {, switch, (]
[., util, ., Iterator, ;, public, class, JsonMLUtil, {, public, static, boolean, isExpression, (, JsonML, element, ), {, switch, (]
[{, public, static, boolean, isExpression, (, JsonML, element, ), {, switch, (, element, ., getType, (, ), ), {, case]
[boolean, isExpression, (, JsonML, element, ), {, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, case]
[JsonML, element, ), {, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, case, AssignExpr, :, case]
[{, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case]
[element, ., getType, (, ), ), {, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case]
[(, ), ), {, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case]
[{, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case]
[:, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case]
[:, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case]
[:, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case]
[:, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case]
[:, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case]
[:, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case]
[:, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case]
[:, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case]
[:, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case]
[:, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case]
[:, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case]
[:, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case]
[:, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case]
[:, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case]
[:, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return]
[ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return, true, ;, default, :, return]
[;, default, :, return, false, ;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws, Exception, {, return]
[:, return, false, ;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws, Exception, {, return, parseElement, (]
[;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws, Exception, {, return, parseElement, (, new, JSONArray, (]
[(, jsonml, ), ), ;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =]
[), ;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (]
[), ;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (]
[static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (, TagType, ., valueOf, (]
[static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (, TagType, ., valueOf, (]
[JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (, TagType, ., valueOf, (, element, ., getString, (]
[=, new, JsonML, (, TagType, ., valueOf, (, element, ., getString, (, 0, ), ), ), ;, JSONObject, attrs, =]
[=, new, JsonML, (, TagType, ., valueOf, (, element, ., getString, (, 0, ), ), ), ;, JSONObject, attrs, =]
[TagType, ., valueOf, (, element, ., getString, (, 0, ), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (]
[), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =]
[), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =]
[., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs, ., keys, (, ), ;, while, (]
[., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs, ., keys, (, ), ;, while, (]
[it, =, attrs, ., keys, (, ), ;, while, (, it, ., hasNext, (, ), ), {, String, key, =]
[., keys, (, ), ;, while, (, it, ., hasNext, (, ), ), {, String, key, =, (, String, )]
[., keys, (, ), ;, while, (, it, ., hasNext, (, ), ), {, String, key, =, (, String, )]
[hasNext, (, ), ), {, String, key, =, (, String, ), it, ., next, (, ), ;, Object, value, =]
[hasNext, (, ), ), {, String, key, =, (, String, ), it, ., next, (, ), ;, Object, value, =]
[{, String, key, =, (, String, ), it, ., next, (, ), ;, Object, value, =, attrs, ., get, (]
[), it, ., next, (, ), ;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =]
[), it, ., next, (, ), ;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =]
[(, ), ;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (]
[=, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (]
[=, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (]
[., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (, tag, ==]
[=, TagAttr, ., get, (, key, ), ;, if, (, tag, ==, null, ), {, continue, ;, }, if, (]
[=, TagAttr, ., get, (, key, ), ;, if, (, tag, ==, null, ), {, continue, ;, }, if, (]
[key, ), ;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {]
[;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =]
[;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =]
[if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =, (]
[==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =, (, (, Number, )]
[instanceof, Number, ), {, value, =, (, (, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (]
[value, =, (, (, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case]
[(, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case]
[value, ), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case]
[doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS, :, case]
[;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case]
[(, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case]
[{, case, NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case]
[NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :]
[NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :]
[:, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (]
[FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,]
[TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case]
[:, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (]
[:, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (]
[:, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (]
[LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=]
[jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&]
[jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&]
[tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (]
[;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (, null, ), ), {]
[;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (, null, ), ), {, value, =]
[(, value, !=, null, &&, value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (]
[(, value, !=, null, &&, value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (]
[value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {]
[value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {]
[null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (]
[), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,]
[), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,]
[{, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,, (]
[null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number, )]
[., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {]
[., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {]
[,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (]
[(, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,]
[., setAttribute, (, tag, ,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =]
[(, tag, ,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;]
[(, tag, ,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;]
[,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;, i, <]
[,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;, i, <]
[;, default, :, }, }, for, (, int, i, =, 2, ;, i, <, element, ., length, (, ), ;]
[default, :, }, }, for, (, int, i, =, 2, ;, i, <, element, ., length, (, ), ;, ++]
[}, for, (, int, i, =, 2, ;, i, <, element, ., length, (, ), ;, ++, i, ), {]
[}, for, (, int, i, =, 2, ;, i, <, element, ., length, (, ), ;, ++, i, ), {]
[i, =, 2, ;, i, <, element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (]
[2, ;, i, <, element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (]
[2, ;, i, <, element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (]
[element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (]
[i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;, }, return]
[), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (]
[jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (]
[}, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (, tree1, ,]
[), ), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[), ), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (]
[(, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (]
[;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (, tree1, ,]
[), ., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =]
[., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {]
[., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {]
[;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,]
[;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,]
[class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,]
[class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,]
[static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,]
[static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,]
[], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,]
[], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,]
[TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,]
[TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,]
[TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,]
[TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,]
[TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,]
[TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,]
[JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {]
[JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {]
[JsonML, mismatchA, ;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {, this, ., treeA, =]
[;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {, this, ., treeA, =, treeA, ;]
[;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {, this, ., treeA, =, treeA, ;]
[;, JsonMLComparator, (, JsonML, treeA, ,, JsonML, treeB, ), {, this, ., treeA, =, treeA, ;, this, ., treeB, =]
[treeA, ,, JsonML, treeB, ), {, this, ., treeA, =, treeA, ;, this, ., treeB, =, treeB, ;, if, (]
[JsonML, treeB, ), {, this, ., treeA, =, treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (]
[), {, this, ., treeA, =, treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,]
[treeA, =, treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {]
[treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =]
[this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null, ;]
[treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null, ;, mismatchB, =]
[=, null, ;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {]
[;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =]
[=, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =, a, ;]
[;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =, a, ;, mismatchB, =]
[private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =, a, ;, mismatchB, =, b, ;, return]
[=, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[=, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[=, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==]
[false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||]
[false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||]
[}, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||, b, ==]
[JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (]
[JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (]
[JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (]
[,, JsonML, b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (, a, ==]
[b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (, a, ==, null, &&]
[b, ), {, if, (, a, ==, null, ||, b, ==, null, ), {, if, (, a, ==, null, &&]
[{, if, (, a, ==, null, ||, b, ==, null, ), {, if, (, a, ==, null, &&, b, ==]
[==, null, ||, b, ==, null, ), {, if, (, a, ==, null, &&, b, ==, null, ), {, return]
[), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return]
[if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (]
[a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,]
[), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (]
[{, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (, !]
[true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (, !, areEquivalent, (]
[}, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (, !, areEquivalent, (, a, ,]
[(, a, ,, b, ), ;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return]
[,, b, ), ;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (]
[), ;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,]
[!, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (]
[!, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (]
[!, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (]
[), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=]
[), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=]
[b, ), ;, }, if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return]
[;, }, if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return, setMismatch, (]
[if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return, setMismatch, (, a, ,]
[childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA, =]
[childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA, =]
[childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA, =]
[JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, ), ;, Iterator, <, JsonML, >, itB, =]
[JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, ), ;, Iterator, <, JsonML, >, itB, =]
[JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, ), ;, Iterator, <, JsonML, >, itB, =]
[), ;, Iterator, <, JsonML, >, itB, =, b, ., getChildren, (, ), ., listIterator, (, ), ;, while, (]
[), ;, Iterator, <, JsonML, >, itB, =, b, ., getChildren, (, ), ., listIterator, (, ), ;, while, (]
[., getChildren, (, ), ., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (]
[getChildren, (, ), ., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (, !]
[), ., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (]
[), ., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (]
[while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (, itA, ., next, (, ), ,]
[while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (, itA, ., next, (, ), ,]
[if, (, !, compareElements, (, itA, ., next, (, ), ,, itB, ., next, (, ), ), ), {, return]
[itA, ., next, (, ), ,, itB, ., next, (, ), ), ), {, return, false, ;, }, }, return]
[;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[}, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ., getType, (, ), !=]
[}, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ., getType, (, ), !=]
[JsonML, b, ), {, if, (, a, ., getType, (, ), !=, b, ., getType, (, ), ), {, return]
[getType, (, ), !=, b, ., getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr, :]
[., getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (]
[getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !]
[), ), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (]
[{, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr, ,]
[false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr, ,, a, ,]
[TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr, ,, a, ,, b, ), ), {, return]
[{, if, (, !, compareAttribute, (, attr, ,, a, ,, b, ), ), {, return, false, ;, }, }, return]
[true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a, ,, JsonML, b, ), {, Object, valueA, =]
[true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a, ,, JsonML, b, ), {, Object, valueA, =]
[true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a, ,, JsonML, b, ), {, Object, valueA, =]
[attr, ,, JsonML, a, ,, JsonML, b, ), {, Object, valueA, =, a, ., getAttributes, (, ), ., get, (]
[b, ), {, Object, valueA, =, a, ., getAttributes, (, ), ., get, (, attr, ), ;, Object, valueB, =]
[b, ), {, Object, valueA, =, a, ., getAttributes, (, ), ., get, (, attr, ), ;, Object, valueB, =]
[b, ), {, Object, valueA, =, a, ., getAttributes, (, ), ., get, (, attr, ), ;, Object, valueB, =]
[getAttributes, (, ), ., get, (, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (]
[(, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (]
[(, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (]
[(, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (]
[), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==]
[Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==, null, &&]
[Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==, null, &&]
[=, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==]
[(, ), ., get, (, attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return]
[attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (]
[attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (]
[attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (]
[;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==]
[(, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||]
[(, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||]
[==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==]
[==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return]
[true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (]
[;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !]
[}, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (]
[}, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (]
[==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (]
[return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double, doubleA, =]
[if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double, doubleA, =, null, ,, doubleB, =]
[valueA, ., equals, (, valueB, ), ), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (]
[valueA, ., equals, (, valueB, ), ), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (]
[), ), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {]
[), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =]
[), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =]
[{, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =, (]
[=, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =, (, (, Number, )]
[Number, ), {, doubleA, =, (, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (]
[Number, ), {, doubleA, =, (, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (]
[(, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {]
[Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =]
[Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =]
[., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf, (]
[), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf, (, (, String, )]
[instanceof, String, ), {, doubleA, =, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return]
[=, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return, false, ;, }, if, (]
[=, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return, false, ;, }, if, (]
[(, String, ), valueA, ), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {]
[), valueA, ), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =]
[), valueA, ), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =]
[valueA, ), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (]
[}, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (, (, Number, )]
[Number, ), {, doubleB, =, (, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (]
[Number, ), {, doubleB, =, (, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (]
[(, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {]
[Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =]
[Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =]
[., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf, (]
[), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf, (, (, String, )]
[instanceof, String, ), {, doubleB, =, Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return]
[=, Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (]
[Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (, !]
[Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (, !]
[(, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (, !, doubleA, ., equals, (]
[;, }, else, {, return, false, ;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {, return]
[false, ;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {, return, false, ;, }, }, return]
[doubleB, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return]
[doubleB, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return]
[doubleB, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==]
[return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==, null, &&]
[return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==, null, &&]
[;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==, null, &&, mismatchB, ==]
[), {, return, mismatchA, ==, null, &&, mismatchB, ==, null, ;, }, private, String, compare, (, ), {, if, (]
[&&, mismatchB, ==, null, ;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return, "The trees are not equal: ", +]
[compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +]
[compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +]
[compareSilent, (, ), ), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +]
[), ), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +]
[), ), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +]
[}, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +]
[toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +]
[), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +]
[), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +]
